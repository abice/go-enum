// Code generated by go-enum
// DO NOT EDIT!

package example

import (
	"fmt"
	"strings"
)

const (
	// CommentedValue1 is a Commented of type Value1
	// Commented value 1
	CommentedValue1 Commented = iota
	// CommentedValue2 is a Commented of type Value2
	CommentedValue2
	// CommentedValue3 is a Commented of type Value3
	// Commented value 3
	CommentedValue3
)

const _CommentedName = "value1value2value3"

var _CommentedMap = map[Commented]string{
	0: _CommentedName[0:6],
	1: _CommentedName[6:12],
	2: _CommentedName[12:18],
}

// String implements the Stringer interface.
func (x Commented) String() string {
	if str, ok := _CommentedMap[x]; ok {
		return str
	}
	return fmt.Sprintf("Commented(%d)", x)
}

var _CommentedValue = map[string]Commented{
	_CommentedName[0:6]:                    0,
	strings.ToLower(_CommentedName[0:6]):   0,
	_CommentedName[6:12]:                   1,
	strings.ToLower(_CommentedName[6:12]):  1,
	_CommentedName[12:18]:                  2,
	strings.ToLower(_CommentedName[12:18]): 2,
}

// ParseCommented attempts to convert a string to a Commented
func ParseCommented(name string) (Commented, error) {
	if x, ok := _CommentedValue[name]; ok {
		return x, nil
	}
	return Commented(0), fmt.Errorf("%s is not a valid Commented", name)
}

// MarshalText implements the text marshaller method
func (x *Commented) MarshalText() ([]byte, error) {
	return []byte(x.String()), nil
}

// UnmarshalText implements the text unmarshaller method
func (x *Commented) UnmarshalText(text []byte) error {
	name := string(text)
	tmp, err := ParseCommented(name)
	if err != nil {
		return err
	}
	*x = tmp
	return nil
}
