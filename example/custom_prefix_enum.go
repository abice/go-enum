// Code generated by go-enum
// DO NOT EDIT!

package example

import (
	"fmt"
)

const (
	// AcmeIncProductAnvil is a Product of type Anvil
	AcmeIncProductAnvil Product = iota
	// AcmeIncProductDynamite is a Product of type Dynamite
	AcmeIncProductDynamite
	// AcmeIncProductGlue is a Product of type Glue
	AcmeIncProductGlue
)

const _ProductName = "AnvilDynamiteGlue"

var _ProductMap = map[Product]string{
	0: _ProductName[0:5],
	1: _ProductName[5:13],
	2: _ProductName[13:17],
}

// String implements the Stringer interface.
func (x Product) String() string {
	if str, ok := _ProductMap[x]; ok {
		return str
	}
	return fmt.Sprintf("Product(%d)", x)
}

var _ProductValue = map[string]Product{
	_ProductName[0:5]:   0,
	_ProductName[5:13]:  1,
	_ProductName[13:17]: 2,
}

// ParseProduct attempts to convert a string to a Product
func ParseProduct(name string) (Product, error) {
	if x, ok := _ProductValue[name]; ok {
		return x, nil
	}
	return Product(0), fmt.Errorf("%s is not a valid Product", name)
}
