// Code generated by go-enum DO NOT EDIT.
// Version: example
// Revision: example
// Build Date: example
// Built By: example

//go:build example
// +build example

package example

import (
	"errors"
	"fmt"
)

const (
	// StrGenderUnknown is a StrGender of type (empty string).
	// Unknown (default) case
	StrGenderUnknown StrGender = ""
	// StrGenderMale is a StrGender of type male.
	StrGenderMale StrGender = "male"
	// StrGenderFemale is a StrGender of type female.
	StrGenderFemale StrGender = "female"
)

var ErrInvalidStrGender = errors.New("not a valid StrGender")

// String implements the Stringer interface.
func (x StrGender) String() string {
	return string(x)
}

// IsValid provides a quick way to determine if the typed value is
// part of the allowed enumerated values
func (x StrGender) IsValid() bool {
	_, err := ParseStrGender(string(x))
	return err == nil
}

var _StrGenderValue = map[string]StrGender{
	"":       StrGenderUnknown,
	"male":   StrGenderMale,
	"female": StrGenderFemale,
}

// ParseStrGender attempts to convert a string to a StrGender.
func ParseStrGender(name string) (StrGender, error) {
	if x, ok := _StrGenderValue[name]; ok {
		return x, nil
	}
	return StrGender(""), fmt.Errorf("%s is %w", name, ErrInvalidStrGender)
}

// MarshalText implements the text marshaller method.
func (x StrGender) MarshalText() ([]byte, error) {
	return []byte(string(x)), nil
}

// UnmarshalText implements the text unmarshaller method.
func (x *StrGender) UnmarshalText(text []byte) error {
	tmp, err := ParseStrGender(string(text))
	if errors.Is(err, ErrInvalidStrGender) {
		*x = StrGenderUnknown
		return nil
	}
	if err != nil {
		return err
	}
	*x = tmp
	return nil
}
