// Code generated by go-enum DO NOT EDIT.
// Version: example
// Revision: example
// Build Date: example
// Built By: example

//go:build example
// +build example

package example

import (
	"fmt"
)

const (
	// UnparsedStringA is a UnparsedString of type A.
	UnparsedStringA UnparsedString = "A"
	// UnparsedStringB is a UnparsedString of type B.
	UnparsedStringB UnparsedString = "B"
	// UnparsedStringC is a UnparsedString of type C.
	UnparsedStringC UnparsedString = "C"
	// UnparsedStringD is a UnparsedString of type D.
	UnparsedStringD UnparsedString = "D"
	// UnparsedStringE is a UnparsedString of type E.
	UnparsedStringE UnparsedString = "E"
)

// String implements the Stringer interface.
func (x UnparsedString) String() string {
	return string(x)
}

// IsValid provides a quick way to determine if the typed value is
// part of the allowed enumerated values
func (x UnparsedString) IsValid() bool {
	_, ok := _UnparsedStringValue[string(x)]
	return ok
}

var _UnparsedStringValue = map[string]UnparsedString{
	"A": UnparsedStringA,
	"B": UnparsedStringB,
	"C": UnparsedStringC,
	"D": UnparsedStringD,
	"E": UnparsedStringE,
}

const (
	// UnparsedValuesA is a UnparsedValues of type A.
	UnparsedValuesA UnparsedValues = iota
	// UnparsedValuesB is a UnparsedValues of type B.
	UnparsedValuesB
	// UnparsedValuesC is a UnparsedValues of type C.
	UnparsedValuesC
	// UnparsedValuesD is a UnparsedValues of type D.
	UnparsedValuesD
	// UnparsedValuesE is a UnparsedValues of type E.
	UnparsedValuesE
)

const _UnparsedValuesName = "ABCDE"

var _UnparsedValuesMap = map[UnparsedValues]string{
	UnparsedValuesA: _UnparsedValuesName[0:1],
	UnparsedValuesB: _UnparsedValuesName[1:2],
	UnparsedValuesC: _UnparsedValuesName[2:3],
	UnparsedValuesD: _UnparsedValuesName[3:4],
	UnparsedValuesE: _UnparsedValuesName[4:5],
}

// String implements the Stringer interface.
func (x UnparsedValues) String() string {
	if str, ok := _UnparsedValuesMap[x]; ok {
		return str
	}
	return fmt.Sprintf("UnparsedValues(%d)", x)
}

// IsValid provides a quick way to determine if the typed value is
// part of the allowed enumerated values
func (x UnparsedValues) IsValid() bool {
	_, ok := _UnparsedValuesMap[x]
	return ok
}

var _UnparsedValuesValue = map[string]UnparsedValues{
	_UnparsedValuesName[0:1]: UnparsedValuesA,
	_UnparsedValuesName[1:2]: UnparsedValuesB,
	_UnparsedValuesName[2:3]: UnparsedValuesC,
	_UnparsedValuesName[3:4]: UnparsedValuesD,
	_UnparsedValuesName[4:5]: UnparsedValuesE,
}
