// Code generated by go-enum
// DO NOT EDIT!

package example

import (
	"database/sql/driver"
	"fmt"
)

const (
	// JobStatePending is a JobState of type Pending
	JobStatePending JobState = iota
	// JobStateProcessing is a JobState of type Processing
	JobStateProcessing
	// JobStateCompleted is a JobState of type Completed
	JobStateCompleted
	// JobStateFailed is a JobState of type Failed
	JobStateFailed
)

const _JobStateName = "pendingprocessingcompletedfailed"

var _JobStateMap = map[JobState]string{
	0: _JobStateName[0:7],
	1: _JobStateName[7:17],
	2: _JobStateName[17:26],
	3: _JobStateName[26:32],
}

// String implements the Stringer interface.
func (x JobState) String() string {
	if str, ok := _JobStateMap[x]; ok {
		return str
	}
	return fmt.Sprintf("JobState(%d)", x)
}

var _JobStateValue = map[string]JobState{
	_JobStateName[0:7]:   0,
	_JobStateName[7:17]:  1,
	_JobStateName[17:26]: 2,
	_JobStateName[26:32]: 3,
}

// ParseJobState attempts to convert a string to a JobState
func ParseJobState(name string) (JobState, error) {
	if x, ok := _JobStateValue[name]; ok {
		return x, nil
	}
	return JobState(0), fmt.Errorf("%s is not a valid JobState", name)
}

// Scan implements the Scanner interface.
func (x *JobState) Scan(value interface{}) (err error) {
	if value == nil {
		*x = JobState(0)
		return
	}

	// A wider range of scannable types.
	switch v := value.(type) {
	case *JobState:
		*x = *v
	case JobState:
		*x = v
	case int:
		*x = JobState(v)
	case int64:
		*x = JobState(v)
	case uint:
		*x = JobState(v)
	case uint64:
		*x = JobState(v)
	case *int:
		*x = JobState(*v)
	case *int64:
		*x = JobState(*v)
	case *uint:
		*x = JobState(*v)
	case *uint64:
		*x = JobState(*v)
	case string:
		*x, err = ParseJobState(v)
	case *string:
		*x, err = ParseJobState(*v)
	case []byte:
		*x, err = ParseJobState(string(v))
	}

	return
}

// Value implements the driver Valuer interface.
func (x JobState) Value() (driver.Value, error) {
	return x.String(), nil
}

type NullJobState struct {
	JobState JobState
	Valid    bool
}

func NewNullJobState(val interface{}) (x NullJobState) {
	x.Scan(val) // yes, we ignore this error, it will just be an invalid value.
	return
}

// Scan implements the Scanner interface.
func (x *NullJobState) Scan(value interface{}) (err error) {
	if value == nil {
		x.JobState, x.Valid = JobState(0), false
		return
	}

	err = x.JobState.Scan(value)
	x.Valid = (err == nil)
	return
}

// Value implements the driver Valuer interface.
func (x NullJobState) Value() (driver.Value, error) {
	if !x.Valid {
		return nil, nil
	}
	return x.JobState.String(), nil
}
