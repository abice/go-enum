// Code generated by go-enum DO NOT EDIT.
// Version: example
// Revision: example
// Build Date: example
// Built By: example

package globs

import (
	"fmt"
)

const (
	// LetterA is a Letter of type A.
	LetterA Letter = iota
	// LetterB is a Letter of type B.
	LetterB
	// LetterC is a Letter of type C.
	LetterC
	// LetterD is a Letter of type D.
	LetterD
	// LetterE is a Letter of type E.
	LetterE
	// LetterF is a Letter of type F.
	LetterF
	// LetterG is a Letter of type G.
	LetterG
	// LetterH is a Letter of type H.
	LetterH
	// LetterI is a Letter of type I.
	LetterI
	// LetterJ is a Letter of type J.
	LetterJ
	// LetterK is a Letter of type K.
	LetterK
	// LetterL is a Letter of type L.
	LetterL
	// LetterM is a Letter of type M.
	LetterM
	// LetterN is a Letter of type N.
	LetterN
	// LetterO is a Letter of type O.
	LetterO
	// LetterP is a Letter of type P.
	LetterP
	// LetterQ is a Letter of type Q.
	LetterQ
	// LetterR is a Letter of type R.
	LetterR
	// LetterS is a Letter of type S.
	LetterS
	// LetterT is a Letter of type T.
	LetterT
	// LetterU is a Letter of type U.
	LetterU
	// LetterV is a Letter of type V.
	LetterV
	// LetterW is a Letter of type W.
	LetterW
	// LetterX is a Letter of type X.
	LetterX
	// LetterY is a Letter of type Y.
	LetterY
	// LetterZ is a Letter of type Z.
	LetterZ
)

const _LetterName = "abcdefghijklmnopqrstuvwxyz"

var _LetterMap = map[Letter]string{
	0:  _LetterName[0:1],
	1:  _LetterName[1:2],
	2:  _LetterName[2:3],
	3:  _LetterName[3:4],
	4:  _LetterName[4:5],
	5:  _LetterName[5:6],
	6:  _LetterName[6:7],
	7:  _LetterName[7:8],
	8:  _LetterName[8:9],
	9:  _LetterName[9:10],
	10: _LetterName[10:11],
	11: _LetterName[11:12],
	12: _LetterName[12:13],
	13: _LetterName[13:14],
	14: _LetterName[14:15],
	15: _LetterName[15:16],
	16: _LetterName[16:17],
	17: _LetterName[17:18],
	18: _LetterName[18:19],
	19: _LetterName[19:20],
	20: _LetterName[20:21],
	21: _LetterName[21:22],
	22: _LetterName[22:23],
	23: _LetterName[23:24],
	24: _LetterName[24:25],
	25: _LetterName[25:26],
}

// String implements the Stringer interface.
func (x Letter) String() string {
	if str, ok := _LetterMap[x]; ok {
		return str
	}
	return fmt.Sprintf("Letter(%d)", x)
}

var _LetterValue = map[string]Letter{
	_LetterName[0:1]:   0,
	_LetterName[1:2]:   1,
	_LetterName[2:3]:   2,
	_LetterName[3:4]:   3,
	_LetterName[4:5]:   4,
	_LetterName[5:6]:   5,
	_LetterName[6:7]:   6,
	_LetterName[7:8]:   7,
	_LetterName[8:9]:   8,
	_LetterName[9:10]:  9,
	_LetterName[10:11]: 10,
	_LetterName[11:12]: 11,
	_LetterName[12:13]: 12,
	_LetterName[13:14]: 13,
	_LetterName[14:15]: 14,
	_LetterName[15:16]: 15,
	_LetterName[16:17]: 16,
	_LetterName[17:18]: 17,
	_LetterName[18:19]: 18,
	_LetterName[19:20]: 19,
	_LetterName[20:21]: 20,
	_LetterName[21:22]: 21,
	_LetterName[22:23]: 22,
	_LetterName[23:24]: 23,
	_LetterName[24:25]: 24,
	_LetterName[25:26]: 25,
}

// ParseLetter attempts to convert a string to a Letter
func ParseLetter(name string) (Letter, error) {
	if x, ok := _LetterValue[name]; ok {
		return x, nil
	}
	return Letter(0), fmt.Errorf("%s is not a valid Letter", name)
}
