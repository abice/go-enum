// Code generated by go-enum
// DO NOT EDIT!

package example

import (
	"database/sql/driver"
	"fmt"
)

const (
	// ImageTypeJpeg is a ImageType of type Jpeg
	ImageTypeJpeg ImageType = iota
	// ImageTypeJpg is a ImageType of type Jpg
	ImageTypeJpg
	// ImageTypePng is a ImageType of type Png
	ImageTypePng
	// ImageTypeTiff is a ImageType of type Tiff
	ImageTypeTiff
	// ImageTypeGif is a ImageType of type Gif
	ImageTypeGif
)

const _ImageTypeName = "jpegjpgpngtiffgif"

var _ImageTypeMap = map[ImageType]string{
	0: _ImageTypeName[0:4],
	1: _ImageTypeName[4:7],
	2: _ImageTypeName[7:10],
	3: _ImageTypeName[10:14],
	4: _ImageTypeName[14:17],
}

// String implements the Stringer interface.
func (x ImageType) String() string {
	if str, ok := _ImageTypeMap[x]; ok {
		return str
	}
	return fmt.Sprintf("ImageType(%d)", x)
}

var _ImageTypeValue = map[string]ImageType{
	_ImageTypeName[0:4]:   0,
	_ImageTypeName[4:7]:   1,
	_ImageTypeName[7:10]:  2,
	_ImageTypeName[10:14]: 3,
	_ImageTypeName[14:17]: 4,
}

// ParseImageType attempts to convert a string to a ImageType
func ParseImageType(name string) (ImageType, error) {
	if x, ok := _ImageTypeValue[name]; ok {
		return x, nil
	}
	return ImageType(0), fmt.Errorf("%s is not a valid ImageType", name)
}

// Scan implements the Scanner interface.
func (x *ImageType) Scan(value interface{}) (err error) {
	if value == nil {
		*x = ImageType(0)
		return
	}

	// A wider range of scannable types.
	switch v := value.(type) {
	case *ImageType:
		*x = *v
	case ImageType:
		*x = v
	case int:
		*x = ImageType(v)
	case int64:
		*x = ImageType(v)
	case uint:
		*x = ImageType(v)
	case uint64:
		*x = ImageType(v)
	case *int:
		*x = ImageType(*v)
	case *int64:
		*x = ImageType(*v)
	case *uint:
		*x = ImageType(*v)
	case *uint64:
		*x = ImageType(*v)
	case string:
		*x, err = ParseImageType(v)
	case *string:
		*x, err = ParseImageType(*v)
	case []byte:
		*x, err = ParseImageType(string(v))
	}

	return
}

// Value implements the driver Valuer interface.
func (x ImageType) Value() (driver.Value, error) {
	return int64(x), nil
}

type NullImageType struct {
	ImageType ImageType
	Valid     bool
}

func NewNullImageType(val interface{}) (x NullImageType) {
	x.Scan(val) // yes, we ignore this error, it will just be an invalid value.
	return
}

// Scan implements the Scanner interface.
func (x *NullImageType) Scan(value interface{}) (err error) {
	if value == nil {
		x.ImageType, x.Valid = ImageType(0), false
		return
	}

	err = x.ImageType.Scan(value)
	x.Valid = (err == nil)
	return
}

// Value implements the driver Valuer interface.
func (x NullImageType) Value() (driver.Value, error) {
	if !x.Valid {
		return nil, nil
	}
	// driver.Value accepts int64 for int values.
	return int64(x.ImageType), nil
}
