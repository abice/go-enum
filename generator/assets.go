// Code generated by go-bindata.
// sources:
// enum.tmpl
// DO NOT EDIT!

package generator

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _enumTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x53\xcf\x4f\xf3\x38\x10\x3d\xd7\x7f\xc5\x23\x02\x29\x46\x25\xe5\xbc\xab\x9e\x16\x0e\x1c\xf8\x21\xc1\xee\x05\x21\x64\x9a\x49\xb1\x68\x9c\xac\xe3\xf6\x4b\x65\xf9\x7f\xff\x34\x76\x4a\xd3\x7e\xf4\x66\x7b\xe6\x3d\xcf\x7b\x33\xe3\xfd\x15\x4a\xaa\xb4\x21\x64\x9f\xa4\x4a\xb2\x59\x08\x62\x36\xc3\x3f\x4d\x49\x58\x92\x21\xab\x1c\x95\xf8\xd8\x62\xd9\x5c\x91\x59\xd7\x1c\xbc\x79\xc4\xc3\xe3\x0b\x6e\x6f\xee\x5e\xce\x84\x68\xd5\xe2\x4b\x2d\x09\xde\x17\xc3\x31\x04\x21\x74\xdd\x36\xd6\x21\x17\x00\x90\x55\xb5\xcb\x84\x14\xde\x93\x29\x71\xc5\xf1\xf1\xcf\xcc\xcb\xff\x2e\x1a\xd3\x31\x84\x63\xe7\xfc\xf8\xa0\x6a\xc2\x5f\x73\x14\x7c\x29\xe2\x8d\xc1\xde\xc3\x2a\xb3\x24\x9c\xdb\x3b\x53\x52\x3f\xc5\xf9\x46\xad\xd6\xa3\xd4\xff\xf8\xda\x21\x04\x31\xf1\x1e\xba\x02\xfd\x3f\xe4\x24\x96\xec\x3d\x0b\x61\x36\xc3\xf3\x97\x6e\x5b\x2a\x11\x43\xde\xd3\xaa\xa3\xf8\xee\xfd\x90\xfd\x64\xa9\xd2\x3d\x95\x8c\x0a\x01\xba\x83\xe2\xe0\xae\xb8\x10\xd0\x54\x70\xdb\x96\xf6\x90\xf4\x1e\xa5\x86\x10\xe5\x9f\x62\xdb\x97\x96\x74\xe0\x1a\x0c\x1c\xb3\xcf\xa1\x1b\xa7\x76\x64\x6c\x4c\x3a\x49\x76\x10\x8e\xea\x76\xa5\x1c\x21\xeb\x9c\xd5\x66\x49\x36\x43\xc1\xaa\xb9\x4b\x4f\xca\x76\xe4\xfd\xde\xbb\x10\xa0\x1c\x43\x5c\x07\xd7\x60\xd1\x98\x0d\x59\x07\x85\x04\xe6\x37\x16\x37\x06\x88\x6a\x6d\x16\x3f\x31\xe5\x86\x6d\x4c\x40\x89\xfc\x30\x38\x05\x59\xdb\x58\x09\x2f\x26\xba\x42\x3f\x45\xf3\xc5\xbd\x79\x3f\x4c\x8b\x4d\x7a\x65\xa2\xb7\xbf\x39\xc3\x8b\xc9\xc4\x92\x5b\x5b\x73\x54\x45\xde\xcb\x29\x8c\x5e\x89\x49\x10\x27\x32\xae\xe5\x14\x55\xed\x8a\x5b\xfe\xb8\xca\xb3\x8b\x8e\x7b\x65\x1a\x96\xb7\x51\x2b\x5d\x1e\x01\xb2\x29\xf8\x63\x29\xe2\x28\x72\x1b\x8a\x5a\xd9\xee\x53\xad\xb0\x53\x9d\xf7\xb8\x3c\x04\x49\xdc\xa7\x9c\x17\xea\x5d\x2e\x91\xbf\xbe\x7d\x6c\x1d\x8d\xe5\x0e\xd5\xa5\x40\xde\x17\xcf\xd1\xa1\x5c\x0e\x02\x82\x38\xcd\xfd\xaf\xa9\x47\xec\x8e\x7a\x37\xd0\xc8\xc4\xcf\xf4\x66\x58\x88\x64\x7c\x4c\x92\x62\xe2\xea\x36\xd6\xc0\x91\x53\xbd\x92\xb1\x15\x9c\x74\x36\xe7\x52\xc6\x6e\x93\xb5\xd1\xda\xcb\x1e\x73\xb8\xba\xfd\x96\x91\x4a\xde\x4d\xdf\xfe\x70\xb0\xbd\xdf\xa3\xf7\xbd\xc1\x47\x7d\x8e\x1b\x37\x47\xe6\xfd\x50\xb7\xae\xb6\x69\x4f\x11\x42\x26\xc4\x46\xd9\x63\xc8\xbd\x6a\x31\xe7\xfd\xa8\x55\x3b\xce\x16\x3b\xff\x34\x8e\xed\xdb\x39\xbd\x9b\xe6\x34\x7b\x9d\xb3\x27\xa6\xef\x5e\xb5\xaf\xfa\x8f\xc1\xeb\x9c\x1d\x4f\x19\x8f\xd4\x73\x6b\xb5\x71\x55\x9e\x1d\xb9\x7a\x51\xca\x6c\x0a\x1d\x47\xe8\x07\x09\x71\xba\x93\x88\xb5\x39\x90\x51\xac\x9a\x5f\x64\x17\xaa\x23\x8c\x5c\xfd\x1d\x00\x00\xff\xff\x75\x9b\x60\x1b\x8b\x05\x00\x00")

func enumTmplBytes() ([]byte, error) {
	return bindataRead(
		_enumTmpl,
		"enum.tmpl",
	)
}

func enumTmpl() (*asset, error) {
	bytes, err := enumTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "enum.tmpl", size: 1419, mode: os.FileMode(420), modTime: time.Unix(1502730755, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"enum.tmpl": enumTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"enum.tmpl": &bintree{enumTmpl, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

