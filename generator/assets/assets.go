// Code generated by go-bindata. DO NOT EDIT.
// sources:
// enum.tmpl

package assets

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _enumTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x56\x41\x6f\xeb\x36\x0c\x3e\xc7\xbf\x82\xcf\x68\x01\xbb\x73\x9d\x0e\xbb\x6d\xc8\x69\xef\xad\x78\x03\xfa\xfa\x80\x74\xbb\x04\x45\xa1\xda\x74\x2a\xc4\x96\x3d\x49\xc9\x1c\x68\xfa\xef\x03\x25\xd9\x71\xd2\xa4\xd8\x61\x97\x22\x36\xc9\x8f\xfc\xc8\x8f\x74\x8d\xb9\x85\x12\x2b\x2e\x10\xe2\x37\x64\x25\xca\xd8\xda\x68\x3e\x87\x5f\xdb\x12\x61\x8d\x02\x25\xd3\x58\xc2\xeb\x1e\xd6\xed\x2d\x8a\x6d\x43\xc6\xcf\x8f\xf0\xed\xf1\x09\xbe\x7c\xfe\xfa\xf4\x29\x8a\x3a\x56\x6c\xd8\x1a\xc1\x98\x3c\xfc\xb4\x36\x8a\x78\xd3\xb5\x52\x43\x12\x01\x00\xc4\x55\xa3\xe3\x28\x8d\x8c\x41\x51\xc2\x2d\xd9\xa7\x99\x09\x97\xf2\x16\xad\x50\x14\x42\xb6\x2b\x7a\xf9\x8d\x35\x08\x3f\x2f\x20\xa7\x87\xdc\x3d\x51\xb0\xb3\xef\x98\x54\x64\x2b\x79\xa1\x21\xae\x99\xd2\x6d\x55\x29\xd4\x31\xdc\x05\x27\x90\x4c\xac\x11\xae\xe4\x57\x51\x62\x9f\x51\x48\xbd\x9d\xe0\xfd\x49\x8f\x0a\xac\x8d\x66\x0e\x91\x30\x1e\x1d\x06\xf9\x74\xf5\xb6\xd8\x1c\x03\xfb\x9c\xff\x40\xc5\xa5\xd2\x60\xad\x31\x70\xd5\x8e\x01\x6a\xfb\x1a\x52\x78\xe4\x21\x71\x48\x00\xbc\x02\xfc\x6b\xf0\x70\x5c\xe2\x97\xd8\xda\xf9\x1c\x96\x1b\xde\x75\x58\x82\x33\x19\x83\xb5\x42\xf7\xde\x98\xe0\xfd\x5d\x62\xc5\x7b\x2c\x29\xca\x5a\xe0\x0a\x18\x19\x87\x16\x59\x0b\x6d\x05\x7a\xdf\xe1\x21\xc4\xbf\x77\x0d\xb7\xd6\x0d\xe1\x12\xda\xa1\xb4\x50\xef\x9d\xa3\x36\x45\x5f\x00\x6f\x35\xf3\x8e\x02\xe1\x6e\xa4\x6d\x2d\xfc\x00\x93\x36\x8c\x19\x3d\x8b\xe0\x3f\xed\xec\xd4\xf3\x7d\x8a\x8b\x68\x57\x2f\xae\xc5\x04\xe0\x86\x70\x3c\x17\xff\x23\x28\xc3\x33\x4e\x49\x62\xa0\xb1\xe9\x6a\xa6\x11\x62\xa5\x25\x17\x6b\x94\x31\xe4\x34\x10\x92\xf1\x77\x26\x15\x1a\x73\x10\x97\xb5\xc0\x34\x85\x68\x05\xba\x85\xa2\x15\x3b\x94\x1a\x18\xf8\x60\x7a\x47\x7d\x9f\x06\x44\xd5\x56\x14\xe7\x90\x12\x41\x13\xf6\x81\x29\x24\xc7\xc6\x0c\x50\xca\x56\xa6\x60\xa2\x19\xaf\xa0\xcf\xa0\xdd\x10\xbf\x97\x63\x37\x27\xa3\x15\x01\x3d\xff\x42\x1e\x26\x9a\xcd\x24\xea\xad\x14\x27\x55\x24\x7d\x9a\x81\xe0\x75\x34\x73\x52\xe3\x15\xe4\x14\xa5\xdc\x22\x5c\x08\xb9\x4b\x33\xa8\x1a\x9d\x7f\xa1\x4a\xaa\x24\xbe\x56\xa4\x2b\xd1\x12\xdf\x1d\xab\x79\x09\xa7\x35\x6b\xb9\x87\xd5\xb5\x7a\x8e\x33\x20\xf4\x2c\xb0\x53\xf9\xef\x2d\x17\xc9\x49\xed\xf4\x57\x65\x10\x67\x10\xa7\xa9\x5f\x30\xa7\x88\xff\xb1\xa2\x50\xc7\x80\xee\xc6\xee\x2e\x0b\xc9\x2e\x6f\x98\x54\x6f\xac\x86\x61\x46\x49\x0f\x37\xc7\xf1\x29\x3c\x78\x9f\x27\xec\x75\x92\x42\xb2\x7a\x7e\xdd\x6b\x9c\x0e\x27\x14\xea\x0d\x49\x9f\x2f\x1d\xe3\x24\x0d\xed\xb6\xd1\x65\xec\x3f\x44\x33\x41\xd7\xd8\xeb\x00\x93\x7a\x7c\x82\x17\xe1\xbe\xf9\x46\x3a\xa7\x34\x9a\xe9\xa6\x73\x35\x90\xe5\x92\xb2\x52\x27\x1c\x72\xfa\xb4\xa0\x52\xa6\xda\x40\x29\x9d\x10\x6e\x7a\x58\x80\x6e\xba\x91\x86\x2f\x79\xb8\x09\x43\xa3\xaa\x9a\xad\xc1\x5f\xfd\x25\x6a\xe0\x4d\x57\x63\x83\x82\x76\xe0\x0d\xe1\xbe\xad\x99\x58\x03\x39\x85\xb3\xc6\x85\x46\x59\xb1\x02\x81\xb8\x5f\x6e\xc0\x12\x75\xb2\x63\xf5\xb8\x03\x23\xeb\xdd\x87\xec\x76\xac\x4e\x43\xed\xbb\x68\x4a\xc9\x2f\xed\xfd\xc7\x25\xde\xa3\xd6\x28\xff\x73\x8d\xf7\x48\x83\x1f\xbd\x8d\x9d\x0c\xfd\xa6\x0f\x29\x9f\xe8\xb0\x9e\xe4\x5c\x73\xfd\xb6\x7d\xcd\x8b\xb6\x99\xab\xae\xfa\xf1\xa7\x79\xf7\x1b\xb5\xf1\xb4\x43\x97\x33\x13\x68\x92\x0e\x97\xe5\x90\x35\x3e\xd1\xf8\xf1\xc0\xc2\x8f\xa3\xaf\xe7\x78\xd9\xc6\x2f\xe8\x99\x55\x84\x05\x21\x87\x74\xbc\xda\xfb\x4f\x20\x50\x82\x41\x07\xfe\x62\x58\xbb\x63\xf2\x1c\x82\x82\x05\x18\x23\x58\x33\x46\xdb\x41\xfe\x67\x9c\x93\x14\x56\xcf\x07\x72\xba\xe9\x68\xde\x0d\xdb\x60\x32\xbc\xcf\xa0\xc6\xf3\x67\x83\x0e\x46\xd1\x76\xfb\xc4\x6d\xc2\x59\x8f\xb1\x5f\xa4\x6f\xf7\xb1\x1f\xff\xb3\x38\x53\xff\x03\xeb\x5c\xf5\xd0\xb0\x6e\x4a\x3e\x1a\xf6\x97\xc3\x3b\xf5\x86\x4d\x9f\x4c\x88\x57\xf4\x70\xe1\x56\x3f\xb0\x6e\xc5\xdf\x9d\x69\xa5\xfd\x2a\x86\x47\xba\x6e\xcb\x4e\x72\xa1\xab\xe4\x64\xd0\xc9\x75\x99\xc6\x19\xf0\x34\x3a\x4f\xc1\x2b\xcb\x91\xd8\x8a\x23\x1a\x79\xdd\xfe\x8d\xb2\x60\x0a\x61\x22\x92\x7f\x03\x00\x00\xff\xff\xb6\xe4\x6d\x12\xda\x09\x00\x00")

func enumTmplBytes() ([]byte, error) {
	return bindataRead(
		_enumTmpl,
		"enum.tmpl",
	)
}

func enumTmpl() (*asset, error) {
	bytes, err := enumTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "enum.tmpl", size: 2522, mode: os.FileMode(420), modTime: time.Unix(1528557189, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xc3, 0xf6, 0x5, 0xc9, 0xb7, 0xf, 0xe3, 0x31, 0xba, 0xc, 0x33, 0x80, 0xed, 0x4, 0xbe, 0x7e, 0x7b, 0x73, 0x46, 0xcc, 0xb7, 0x7b, 0x4b, 0x1a, 0xe1, 0xd8, 0x18, 0x1d, 0x48, 0x31, 0x9e, 0x73}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"enum.tmpl": enumTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"enum.tmpl": &bintree{enumTmpl, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
