// Code generated by go-bindata. DO NOT EDIT.
// sources:
// enum.tmpl (3.312kB)

package assets

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _enumTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x56\x5f\x6f\xdb\x36\x10\x7f\xb6\x3e\xc5\x55\x48\x00\x29\x53\xe4\x0c\x7b\xeb\xe0\xa7\xb6\x0b\x3a\x20\x4d\x81\x64\x7b\x09\x82\x80\x91\x4e\x36\x11\x89\x52\x49\xda\xb5\xa1\xf1\xbb\x0f\x47\x52\x32\xed\xc8\xe9\x06\x6c\x2f\x86\xc5\xfb\xff\xbb\xdf\x1d\xd9\xf7\x97\x50\x62\xc5\x05\x42\xbc\x42\x56\xa2\x8c\x8d\x89\xe6\x73\xf8\xd0\x96\x08\x4b\x14\x28\x99\xc6\x12\x9e\x77\xb0\x6c\x2f\x51\xac\x1b\x12\x7e\xbc\x85\x2f\xb7\xf7\xf0\xe9\xe3\xe7\xfb\x77\x51\xd4\xb1\xe2\x85\x2d\x11\xfa\x3e\xf7\x7f\x8d\x89\x22\xde\x74\xad\xd4\x90\x44\x00\x00\x71\xd5\xe8\x38\x4a\xa3\xbe\x47\x51\xc2\x25\xc9\xc3\xc8\xe4\x97\xe2\x16\xad\x50\x64\x42\xb2\x33\x3a\xfc\xc2\x1a\x84\xf7\x0b\xc8\xe9\x23\xb7\x5f\x64\x6c\xe5\x1b\x26\x15\xc9\x4a\x5e\x68\x88\x6b\xa6\x74\x5b\x55\x0a\x75\x0c\x57\x5e\x09\x24\x13\x4b\x84\x33\xf9\x59\x94\xb8\xcd\xc8\xa4\x5e\x07\xfe\xfe\xa4\x4f\x05\xc6\x44\x33\xeb\x91\x7c\xdc\x5a\x1f\xa4\xd3\xd5\xeb\xe2\xe5\xd0\xb1\x8b\xf9\x17\x54\x5c\x2a\x0d\xc6\xf4\x3d\x9c\xb5\xa3\x81\x5a\x3f\xfb\x10\xce\xf3\x10\xd8\x07\x00\x5e\x01\x7e\x1b\x34\x6c\x2d\xf1\x53\x6c\xcc\x7c\x0e\x77\x2f\xbc\xeb\xb0\x04\x2b\xea\x7b\xac\x15\xda\xf3\xbe\xf7\xda\x5f\x25\x56\x7c\x8b\x25\x59\x19\x03\x5c\x01\x23\xe1\x00\x91\x31\xd0\x56\xa0\x77\x1d\xee\x4d\xdc\xb9\x05\x7c\x28\x90\x57\x43\xf4\x0f\x6d\xd3\xa0\xd0\x24\x08\xc3\x04\xc7\xa4\xef\x4c\xa9\x7f\xa7\x12\xd9\x57\xe5\x4b\xbd\xb2\xa8\x84\x89\x2d\x80\xb7\x9a\x39\x45\x81\x70\x35\x22\x66\x0c\xfc\x04\x01\x82\x63\xb2\x0e\x00\xaf\x1f\x36\x25\xd4\x7c\x1d\xe2\xa4\xb7\xb3\x27\xdb\x1d\x72\x60\xfb\x77\xd8\x52\xf7\xc7\x93\xca\x55\x9c\x12\x3b\x41\x63\xd3\xd5\x4c\x23\xc4\x4a\x4b\x2e\x96\x28\x63\xc8\xa9\x97\x34\x01\x5f\x99\x54\xd8\xf7\x7b\x5e\x1a\x03\x4c\x93\x89\x56\xa0\x5b\x28\x5a\xb1\x41\xa9\x81\x81\x33\xa6\x33\x6a\x59\x68\x10\x55\x6b\x51\x4c\x79\x4a\x04\x91\xc3\x19\xa6\x90\x1c\x0a\x33\x40\x29\x5b\x99\x42\x1f\xcd\x78\x05\xdb\x0c\xda\x17\xaa\xef\xe9\x50\xcd\x32\xf0\x81\x1c\x3d\xfe\x4a\x1a\x7d\x34\x9b\x49\xd4\x6b\x29\xc8\x44\xf0\x3a\x9a\xd9\x2e\xf3\x0a\x72\xd2\x52\x76\x66\x06\x95\xa3\x7c\xae\xd2\x0c\xaa\x46\xe7\x9f\x28\x72\x95\xc4\xe7\x8a\x28\x28\x5a\xaa\x6f\xc3\x6a\x5e\xc2\x71\x8e\x5a\xee\xe0\xe1\x5c\x3d\xc6\x19\x90\xf7\xcc\x57\xa3\xf2\xdf\x5b\x2e\x92\xa3\x5c\xe9\x57\x65\x10\x67\x10\xa7\xa9\xa7\x1e\x31\xe0\x3f\xcc\xc8\xe7\x91\x86\xc4\xb6\x4b\x88\x68\x96\x37\x4c\xaa\x15\xab\xc1\xad\xbe\x1b\xf7\x75\x8f\x5b\x0d\xbc\xe9\x6a\xa4\x99\x50\xa0\x57\x08\x9a\xce\xbc\x76\x8d\x12\x1a\xd4\xab\xb6\x74\x8d\x4c\xb6\x70\x71\x18\x34\x0d\x5d\x25\x29\x24\x0f\x8f\xcf\x3b\x8d\x61\x07\x7d\x75\x4e\x90\x6c\xf3\x3b\x0b\x53\x92\xa6\xae\x47\x8e\x6c\x7f\x88\xe6\x07\x29\xad\xc5\xbf\x48\xea\xc0\x5d\x62\xed\x5d\xfc\xd4\x25\x46\x79\x09\xbf\x78\x5d\xdb\xac\x52\x1a\xcd\x74\xd3\xd9\xe4\x49\x72\x8a\xb7\xa9\xa5\x25\x29\xbd\x5b\x50\x0d\x21\xf3\x50\x4a\x4b\xbb\x8b\x2d\x2c\x40\x37\xdd\x58\xbf\xab\x75\x58\x56\x43\x5b\xd4\xb7\xa1\x25\x77\x05\x13\xc7\x85\xd3\x99\x40\x09\x5c\x68\x94\x15\x2b\x30\x3f\x5d\x32\xe9\x26\x6e\xfb\x8f\xea\xbd\x09\xea\xdd\x30\x09\xc1\xd4\x45\xd1\x4c\x7d\xe7\xba\x58\xc1\x86\x6a\x75\xbb\x2f\xa1\x05\x6b\xbb\x56\x30\x35\x68\xbe\x8f\x66\x0e\xac\x05\x6c\xbc\xc0\x81\x19\x08\x3c\x88\x9b\xd4\x2b\x08\x5e\x93\xd4\xa2\xf0\x8a\xd7\x7b\xb4\xfc\x90\xfe\xef\xb0\x13\xc0\xee\xc2\x3a\x42\xb8\x94\x7c\x83\xd2\xc9\x26\x71\x3e\x86\xd9\x6a\x12\xd1\x9d\xa5\xbb\x06\x27\xe8\xbe\xe7\x79\x76\xa2\xf5\x55\xcd\x96\x43\xef\xf1\x15\xe7\xaf\xdb\x9a\x89\x25\x90\x92\xbf\x6a\xc7\xe4\x80\x72\x7b\x8b\x09\xa8\x89\x08\xe3\x76\xdd\x33\xe0\x4d\x88\x37\xac\x4e\x3d\x80\x9b\x28\xc4\xd5\xc1\x77\xfd\x76\x8e\xd7\xa8\x75\x88\xe0\x8f\x92\xbc\x46\x5a\x17\x01\x53\x03\xec\x2e\xb6\x3e\xe6\x3d\x5d\xf7\x47\x41\x97\x5c\xaf\xd6\xcf\x79\xd1\x36\x73\xd5\x55\x3f\xff\x32\xef\x7e\x23\x20\x8f\x30\x7a\x23\x32\x39\x4d\xd2\xe1\xd2\xda\x47\x8d\x8f\xd6\xe9\x61\xcb\xfc\x9f\x83\x37\xdd\x78\x69\x8e\xef\xba\x89\xad\x0f\x0b\xf2\xec\xc3\xf1\x6a\xe7\x1e\x66\x40\x01\x06\x26\xb8\xcb\xc9\x18\x9a\xd0\xa9\x7b\xc3\xce\x90\x60\xcd\x68\xed\x6f\xe8\x29\x55\x57\x0c\x3d\x9e\x6a\xae\x34\xbd\x99\xba\x56\x29\xfe\x5c\x0f\xd3\xec\x26\x5d\x91\xe4\xd0\xde\x43\x36\xe1\x34\x49\xe1\xe1\x71\x8f\x97\x6e\x3a\xe2\x50\xc3\x5e\x30\x19\xce\x33\xa8\x71\xfa\xd2\xa3\xeb\xae\x68\xbb\x5d\x62\x47\x7c\x52\x63\x6c\x01\x0d\xae\x7d\xd5\x8e\x4f\xe8\x09\x48\x6e\x58\x67\x01\x81\x86\x75\x21\x9e\x16\x12\x37\x74\xaf\xf6\xa8\x6f\xd4\x3f\x19\xf0\x61\x6c\x03\x82\xf0\x8a\x3e\x4e\xbc\x42\x6e\x58\xf7\xb0\x7d\xf5\x00\x51\xda\xed\x23\xff\x49\xf7\xf8\x5d\x27\xb9\xd0\x55\x72\xc4\xb3\xe4\xbc\x4c\xe3\x0c\xb6\x69\x34\x5d\xae\x23\xb6\x2d\x98\xae\xc0\xa0\xe4\xbc\x6e\xbf\xa3\xb4\xeb\x36\xe4\xe8\xdf\x01\x00\x00\xff\xff\xfa\x6e\x48\x20\xf0\x0c\x00\x00")

func enumTmplBytes() ([]byte, error) {
	return bindataRead(
		_enumTmpl,
		"enum.tmpl",
	)
}

func enumTmpl() (*asset, error) {
	bytes, err := enumTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "enum.tmpl", size: 3312, mode: os.FileMode(420), modTime: time.Unix(1538862026, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xbf, 0xdf, 0x90, 0x1d, 0xf6, 0x35, 0x9f, 0xc3, 0xd5, 0x21, 0x36, 0xbe, 0x9f, 0x17, 0xed, 0x39, 0xd2, 0x1b, 0xc, 0xde, 0xb2, 0xce, 0xd8, 0x91, 0x78, 0x5, 0x5c, 0xb3, 0xe8, 0xb5, 0x84, 0xec}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"enum.tmpl": enumTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"enum.tmpl": &bintree{enumTmpl, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
