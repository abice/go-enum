// Code generated by go-bindata. DO NOT EDIT.
// sources:
// enum.tmpl (8.662kB)

package assets

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _enumTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xe4\x59\xdd\x8f\xdb\xb8\x11\x7f\xb6\xfe\x8a\x39\x23\x77\x27\xb9\x8e\x9c\xa2\x45\x1f\x72\xd8\x87\xcb\x47\x83\x3b\xf4\x36\x41\x37\xcd\x4b\x10\x04\xb4\x34\x5a\xf3\x56\x22\x75\x24\xa5\x95\xab\xea\x7f\x2f\x86\xa4\x64\x59\xd6\x7e\x34\xdd\xbd\xa0\xe8\x8b\x61\x8a\xc3\xe1\xfc\x66\x86\xf3\x41\xb6\xed\x53\x48\x31\xe3\x02\x61\xb9\x43\x96\xa2\x5a\x76\x5d\xb0\xd9\xc0\x4b\x99\x22\x5c\xa2\x40\xc5\x0c\xa6\xb0\xdd\xc3\xa5\x7c\x8a\xa2\x2a\xe0\xd5\x5b\x38\x7f\xfb\x1e\x5e\xbf\xfa\xe9\x7d\x4c\x94\x1f\x50\x69\x2e\xc5\x73\x68\x5b\x88\x6b\x37\x00\xc7\xe4\xef\x58\xf3\xc3\x9c\xf2\x23\x3f\xf9\xa2\xe2\x79\x0a\xaf\x98\x41\x37\xbd\xa5\x31\x0d\x47\xf3\x06\x5e\xec\x0f\xb3\xe6\xc5\x9e\xe6\x82\x92\x25\x57\xec\x12\xa1\x6d\x63\xff\x97\xbe\xf2\xa2\x94\xca\x40\x18\x00\x00\x2c\xb3\xc2\x2c\x83\x28\x68\x5b\x14\x29\x3c\xa5\xf9\x31\x54\x02\x42\x40\x13\x29\x34\x2d\xa1\xb9\x27\xf4\xf1\x9c\x15\x08\xcf\xcf\x20\xa6\x41\x6c\x47\xb4\xd8\xce\xd7\x4c\x69\x9a\x4b\x79\x62\x60\x99\x33\x6d\x64\x96\x69\x34\x4b\x78\xe6\x89\x40\x31\x71\x89\xf0\x44\xfd\x24\x52\x6c\xd6\xb4\x24\xaf\x46\xfc\x3e\xd0\x50\x13\x86\x85\xe5\x48\x3c\xde\x5a\x1e\x44\x53\xe6\x55\x72\x75\xcc\xd8\xed\xf9\x2f\xc8\xb8\xd2\x06\xba\xae\x6d\xe1\x89\x1c\x16\xe8\x6a\xeb\xb7\x70\x9c\xfb\x8d\xfd\x06\xc0\x33\xc0\xdf\x7a\x0a\x8b\x65\xf9\x79\xd9\x75\x9b\x0d\x5c\x5c\xf1\xb2\xc4\x14\xdc\x54\xdb\x62\xae\xd1\x4e\xb4\xad\x27\x7f\xa7\x30\xe3\x0d\xa6\xb4\xac\xeb\x80\x6b\x60\x34\xd9\xeb\xa8\xeb\x40\x66\x60\xf6\x25\x1e\x96\xb8\xef\xb1\x55\x79\x0f\x91\x67\xfd\xfe\x2f\x65\x51\xa0\x30\x34\x31\xde\x67\xf4\x99\xe8\xdd\x52\xb2\xe0\x4d\x92\x1c\x70\x79\xb0\xcf\xac\x5e\xc6\x92\x9d\x01\x97\x86\x39\x42\x81\xf0\x6c\xd0\x59\xd7\xc1\x1f\x60\xa4\x43\x5a\x68\x77\x74\x1a\xf0\xf4\x63\xb3\x8c\x29\x4f\xb7\xb8\x91\xdb\x93\xcf\xd6\x3e\xc4\xc0\x5a\xf0\xd8\xa8\xee\x8f\x77\x2b\x87\x38\x22\xff\x04\x83\x45\x99\xd3\x09\x58\x6a\xa3\xb8\xb8\x44\xb5\x84\xd8\xba\x7c\xcd\x14\x7c\x6e\xdb\x83\x5b\x76\xdd\x2f\xac\x84\x33\xda\xbf\x60\x25\xcf\xf6\xce\xc5\x2c\x31\x19\xd8\xae\x07\x5e\x94\x39\x92\x7e\x35\x98\x1d\xfa\xaf\xa8\x80\x0b\x83\x2a\x63\x09\xc6\x41\x56\x89\x04\xc2\x06\x8e\x99\x47\x9e\x36\x8c\xc0\x89\x02\x6d\xb0\xe0\x19\x0d\xd6\x20\xaf\x08\xdd\xa9\x38\x1f\x9b\x4f\x3f\xd0\x64\x1b\x2c\x16\x0a\x4d\xa5\x04\xd1\x07\x8b\x2e\xe8\x87\x59\x61\xe2\x8b\x52\x71\x61\xb2\x70\x79\xbc\x3e\xfc\x36\x8d\x96\x6b\x68\xa2\x60\x1e\xae\xf3\x70\x0b\xb8\x12\x47\x90\xe3\x5c\x5e\xa3\x4a\x98\xc6\x1e\xfd\x3b\xa6\x34\x1e\x2f\x07\x66\x48\xbb\xa4\x08\x09\x89\x14\x35\x2a\x03\xac\x07\x67\xa4\x75\xef\xf1\x02\xaf\x99\x19\x56\xa1\xa0\xa3\xe4\x56\x46\x10\x1e\x4f\xae\x01\x95\x92\x2a\xf2\xfa\x6a\x6e\xd0\x96\x45\xf3\x91\x18\x9d\xa8\xac\x59\x83\xe0\x79\xb0\xe8\xda\x96\x67\x10\x0b\xd9\x23\xa3\x73\xf3\x92\xfe\x73\xa1\x51\x68\x6e\x78\x8d\x50\x92\x7c\x6b\x48\x09\x80\xc6\x92\x51\xb8\x86\x5c\xca\xab\xaa\x24\x54\xa5\xc2\x1a\x85\x81\x4a\x08\x4c\x50\x6b\xa6\xf6\x90\x48\x6d\xe8\xf4\xf6\x6a\x23\x05\x0c\x9a\xe0\x19\x5c\x23\xa4\x52\x7c\x6f\x40\x20\xa6\x60\x64\x7c\x0f\x24\x6e\xb5\x8e\xdf\xcb\xbf\x11\x57\xab\xa2\xe8\x36\x68\xbd\xe3\x2f\x3c\x4a\x56\xa0\xb6\x51\xb4\xa7\x9d\xe8\xfc\x59\xb4\xb6\xde\xf3\x9a\xb4\x9b\x85\xcb\x6f\x35\xc5\x24\x21\xc9\x88\x35\xcb\x79\x0a\x53\x3b\x18\xb5\x87\x8f\xdf\xea\x4f\xcb\x35\x10\xf7\x35\xf4\x32\xfe\x2c\xb9\x08\x27\x28\xe8\x57\xaf\x61\xb9\x86\x65\x14\xf9\x50\x44\x11\xe1\x01\x25\xf2\x72\x44\xe3\x40\x67\xd3\x12\xe9\x3c\x2e\x2a\x6d\xac\x2d\x7d\xf6\xfb\xa5\xd2\x66\xce\x8d\xbd\xeb\xea\x5b\x7d\x77\x0d\x4c\xa4\x50\x32\xc1\x13\x4d\xdc\xbd\x5c\x56\x2a\xef\xd7\x37\xf0\x3f\xf6\xed\xc9\xde\x6d\xb0\xa8\x59\x6e\x3d\x9c\x1c\xe1\xa6\xe5\x91\xf5\x17\x22\xfa\xe6\x8c\xec\x6d\x3d\xc0\x0a\x13\xa2\x52\xd1\x38\x1e\xd4\x2c\x0f\xba\xa0\xcf\x18\xbd\x2e\x4a\xa3\x48\x0b\x37\x45\xa6\x77\x46\x85\x11\xac\x4e\x85\xf3\x4c\xbf\x6b\x66\x78\x16\x4c\xe9\x1d\xcb\x7b\xed\xba\xd1\x7b\x6c\xcc\x34\x46\x1a\xfa\xe6\xa9\x73\x54\x50\xa0\xd9\xc9\xf4\xe6\x38\x39\x62\x15\x46\x10\x7e\xfc\xb4\xdd\x1b\x1c\x47\x01\x2f\x95\x9b\x08\x9b\xb8\x0f\xac\x91\x3b\x0c\x2e\x62\xfd\x43\x14\x77\x88\x54\x89\x5b\x84\x5a\x4d\xa5\x3a\xe2\x17\x5a\x06\x4e\x80\xc8\x49\x46\x82\x09\x5f\xeb\x38\x6b\x5b\xa2\x28\x58\x98\xa2\xfc\x32\x0b\x7b\x9c\xa8\x5c\xc4\x5f\x35\x70\x06\xa6\x28\x07\x05\x38\xb0\x13\xbb\x48\x05\xb1\xfe\x2d\xb7\x3f\xa2\xca\x73\x2e\xcc\xf0\x5f\x1b\xd5\x75\x73\xa9\xe0\xb5\x52\xe7\x3c\x7f\x67\x14\x9c\x39\x34\x3a\x3e\xc7\xeb\x70\xe9\xaa\xad\x52\xda\xec\x66\x9d\x9e\xe7\xcb\x08\x36\x1b\x90\x02\xa1\x44\xe5\x0a\x96\x4c\x2a\xe8\x4b\xc8\x24\x67\x7a\x87\xda\xe5\xcc\x84\x89\x93\x8c\x99\x30\x21\xe6\x13\xe6\x89\xce\x89\x36\x74\x32\x0c\xe4\x6d\x17\x01\x79\xfd\x71\x56\x70\x44\x67\x07\xdd\x59\x65\x9d\xc4\x97\x41\xa9\xa4\x50\x1b\xfe\x7f\x84\x6b\x9e\xa2\xf2\x75\xa6\xcc\x40\x93\x7c\x6c\x9b\xa3\x85\xa6\x63\x4b\x95\x2a\x5e\xa3\xf2\x35\x61\xed\x6a\x4e\x66\x9c\x2b\xc9\xd2\x16\x6e\x3b\x84\x9c\x6b\x63\x75\x81\x4d\x89\x29\x47\x91\xec\x83\x85\xbe\xe6\x26\xd9\x41\x4d\xd6\x77\xe5\x57\x48\x8c\xad\xe0\x89\xcb\x3d\xe6\x2f\x7f\x7e\x7e\x83\xc8\x75\xe4\xa9\x9c\x4b\x39\x32\xe7\x4d\xf3\xce\x54\x47\x2e\xfc\x8f\xac\x4f\x01\x77\xc6\xbb\x08\x17\x45\x74\x8a\x91\x36\xea\xed\x9c\x96\xa9\x9a\x71\xea\x64\x87\x98\x48\xf4\x4e\xcd\x6b\xa8\xbd\x2f\x6b\xa3\x28\x76\xc6\x3f\x1a\xc9\xc3\x3a\xfa\xc1\x4d\x8c\x6c\x30\x96\x75\x2a\x26\xcb\xfd\x69\x5d\x2c\xc8\xb7\x17\xdd\x50\xe4\x5a\xb8\xee\x68\xdd\x0d\xd7\x9f\xb4\x3a\xfa\x4a\xb0\x0f\xfb\x3f\x28\xfc\x63\xf2\xc1\x39\xea\x83\xcb\xdc\xe9\x30\xab\x53\x1e\x84\xc4\x0b\x68\xe5\xf3\x61\xe4\xa6\x58\x10\x38\xd1\xec\x2e\xab\x7e\xeb\xea\x3e\x7b\x57\xf7\xf3\xe9\x95\xe7\xf5\x5f\xc8\x35\x61\xbd\x3a\xe2\xed\x44\x78\x0c\xee\x59\x2e\x19\xb1\xa7\x48\xf8\xab\x96\xa2\x4f\x6f\x1a\xb0\x46\xb5\x37\x3b\x5b\x01\x92\x1f\x79\x4a\x5b\x33\x98\xef\xe9\x8b\xa8\x8a\x2d\xaa\x3b\x75\xf3\x20\x5b\x3c\x8a\x66\xab\xc7\x34\x5b\xf5\xa8\x76\x5b\x1d\xc2\xe8\x97\xb2\xbf\x2d\x1a\xad\xbe\x56\xf4\x5d\x3d\x5c\xf8\xed\x82\xc5\x50\x60\x04\x37\x56\x15\xda\x15\x94\x9b\x0d\xb8\x9c\x38\x49\xf2\x2e\x5f\xba\xb9\x7b\xf5\xc6\x96\x92\xaa\xbd\x71\xa6\x9d\xa9\xf9\x0e\xc5\xde\x7a\x28\x7f\x5c\x5f\xf1\x35\xa4\xb1\xbe\x1a\x36\x23\x59\x86\x52\xcc\xff\xe9\x8b\xe5\x2c\x67\x97\x5e\xc4\x0b\x3c\x29\x47\xdf\xc8\x9c\x89\x4b\x20\x22\x5f\x63\x0c\x42\x02\xc9\x78\x5b\x89\x84\x86\xac\x39\x34\x18\x43\x2d\x5a\xdf\x5a\x73\x92\x03\x04\x43\x52\x19\x15\x9a\xae\x78\x7e\x73\xbb\x8c\x6f\xd0\x98\xb1\x26\xef\x12\xf2\x0d\x52\x25\x3f\x2a\xe1\x46\x3a\x5c\x35\x7e\xcf\xf7\x54\x49\x4e\x36\xbd\xe4\x66\x57\x6d\xe3\x44\x16\x1b\x5d\x66\x7f\xfc\xd3\xa6\xfc\x2b\x29\x72\xa2\xa3\x5b\x76\x26\xa6\x47\x37\x2e\x7e\xd7\xc9\x55\xc9\xf2\xc6\x3a\x7a\xa6\x84\x26\x3b\xda\xb2\xf7\xbc\xca\xf3\x49\xcf\xa4\x8d\xaa\x12\xd3\x52\x47\x3a\xfe\x3e\x19\x06\x8b\x0f\xb6\x9d\xa5\x33\xba\xd8\x4a\x99\xb7\xed\x66\x05\x3f\xa6\x29\x68\x59\x10\xb0\x4c\xd2\xf1\x37\x12\xae\x77\x68\x76\x54\x66\xef\xb8\xf6\x71\xe1\x9a\x69\x7b\x0f\x96\x56\x16\xd3\xa1\x8b\xa1\x91\x54\xb6\x2f\x5d\x6d\x3a\x7f\xd9\x31\xea\xd2\x16\x17\x68\x16\x8b\xd1\x9e\xd4\x32\x83\xeb\x99\xad\x02\xcf\xf1\xfa\x14\x92\xf5\xae\xe3\xea\xbb\x99\x41\x6e\x8f\x45\x13\xf7\x15\xbb\xed\x11\xf6\xa8\xd7\x70\x8d\xc0\x2f\x85\x54\xe8\x30\x58\xff\x5c\x03\x37\x70\xcd\xf3\x1c\x7e\xad\xb4\x81\x2d\x02\xf5\x09\xc2\xf5\xf8\xae\x48\xee\x2d\xe5\x9d\xe3\x3f\xed\x24\xe6\x04\xbc\x67\x37\xe1\x2f\x59\x47\x9a\x6b\x62\x3a\xb3\x67\x60\x54\x85\x07\xad\xcd\xb6\x1d\x4d\x3c\xbd\x37\x68\x62\x67\xeb\x99\x6e\x64\x0d\x19\xcb\x35\x4e\x9a\x12\x17\xb0\xa7\x8c\xe2\x83\xf4\x11\x29\xba\x67\x1a\x1e\x82\x7e\x34\xd6\x99\x8f\x3b\xc7\x89\xe8\x8b\x03\xe4\x9c\x3a\xef\x0c\x92\x3c\x83\x6f\xbc\xa0\xa3\x6e\x56\xf0\xbc\xbf\xb3\x3a\x6d\xad\x58\x92\x60\x69\xb4\x0b\xac\xb6\x95\x22\xc9\x5d\xc3\x15\x4f\xc3\xee\x44\x43\x0f\x9a\x11\x1e\x0b\xf0\x90\xc6\xa6\xd6\x9d\xc9\x6a\xce\xcd\x6e\xbd\x6e\xf9\xf9\xe2\xed\x39\x24\x52\x29\x4c\x4c\xbe\x07\x8d\x8a\xb3\x9c\xff\x93\xba\xd3\xb9\xe8\x64\x24\xd0\x8a\x1e\xa6\x98\x85\x39\x62\x3d\x7f\xfd\xe2\x9e\x78\xc8\xad\x2e\xec\x85\xc1\x92\xfe\x2e\x2d\x7c\xe1\xfd\x72\x04\x9f\x6a\xd7\xd8\xf3\x0c\xc5\xd4\x66\x63\xa5\xf8\xfb\x1c\xcf\x78\xfe\x32\x67\x02\x38\xc5\xbb\x20\x67\x4a\x16\x13\xd0\xb3\xc1\xe1\x68\x87\x70\x3b\x73\xb7\x33\x0a\x02\xc1\xa2\x66\x0a\x9a\x71\x18\x71\xe7\xf6\xf9\x99\xc3\x3b\x70\x0b\xb7\x6b\xf8\xae\x99\xde\xee\xcc\x5c\xee\xb8\x53\x2f\xdc\x31\x6f\xa2\x49\x4e\x3e\x76\x87\x63\xcf\x60\x22\xfd\x82\x4c\x45\xa6\x73\xc9\x8a\xc0\x9d\xce\xdf\x9e\x14\x2e\x8c\xba\x67\x5e\x20\x4b\x3e\x6e\x6a\x78\xa8\x03\x6e\x25\xfd\x9d\xcf\xf8\xef\x78\xb0\x2d\xbc\xff\xc7\xb3\x6d\x81\xff\xaf\x1c\xef\xa3\xd3\x7d\xe8\x21\x0e\xef\xec\xc3\x33\xe6\xf0\xd6\x3e\xf3\xee\x42\x86\x6b\x5b\x5f\xf5\x8e\x9e\xf5\x32\xa9\x12\xb4\x8f\x54\x40\x35\x6f\xef\x81\xee\xa9\xa8\xeb\x66\x2e\x86\xed\x2b\x8e\xad\x5d\x04\x2b\x06\x4e\xfe\x51\x70\x8e\xd4\xe1\x22\x83\xd9\xdb\x50\x99\x41\x29\xb5\xe6\xdb\xbc\xbf\xc2\xec\xaf\x4f\x65\x36\xff\x3c\x38\xc3\x34\x8c\xe0\xe3\xa7\x43\x09\x6f\x8a\x92\x2c\x51\xb0\x2b\x0c\xfb\xef\x6b\xc8\x71\xfe\x09\x2a\xa2\xde\x5f\x96\xfb\xd0\x5e\xc3\xcf\x52\x0c\xd6\x30\x45\x79\xb0\xc6\xd3\xb1\x11\xfe\x1d\x00\x00\xff\xff\xcd\xe3\x2a\x81\xd6\x21\x00\x00")

func enumTmplBytes() ([]byte, error) {
	return bindataRead(
		_enumTmpl,
		"enum.tmpl",
	)
}

func enumTmpl() (*asset, error) {
	bytes, err := enumTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "enum.tmpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xa1, 0xda, 0x31, 0x38, 0xe3, 0x6, 0x16, 0x85, 0x81, 0x26, 0x17, 0x21, 0x76, 0xbc, 0x9, 0x22, 0x2, 0x71, 0x8c, 0xb8, 0xcf, 0xe2, 0x8, 0x8f, 0xa2, 0x22, 0xda, 0x1e, 0xad, 0x8f, 0xa8, 0xc4}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"enum.tmpl": enumTmpl,
}

// AssetDebug is true if the assets were built with the debug flag enabled.
const AssetDebug = false

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"enum.tmpl": {enumTmpl, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
