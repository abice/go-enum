// Code generated by go-bindata. DO NOT EDIT.
// sources:
// enum.tmpl (6.435kB)

package assets

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _enumTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x58\xdd\x72\xdc\xb6\x15\xbe\x5e\x3e\xc5\x31\xc7\xae\x49\x75\xcd\x75\xa6\x9d\x5e\x24\xa3\x8b\x8c\xe3\x7a\xd2\xa9\x65\xcf\x48\xcd\x8d\xea\x51\x20\xf2\x70\x17\x15\x09\x30\x00\xb8\xe2\x0e\xcb\xab\xf6\x7d\xf2\x0e\x79\x95\xbe\x48\xe7\x00\x20\x97\x4b\x71\x25\xc5\xb1\x26\x17\xd2\x70\x89\x83\x83\xef\xfc\x7f\x44\xdb\xbe\x82\x0c\x73\x2e\x10\xc2\x0d\xb2\x0c\x55\xd8\x75\xc1\x6a\x05\x6f\x64\x86\xb0\x46\x81\x8a\x19\xcc\xe0\x7a\x07\x6b\xf9\x0a\x45\x5d\xd2\xe2\x77\x1f\xe0\xec\xc3\x05\xbc\xfd\xee\xfb\x8b\x67\x41\x50\xb1\xf4\x86\xad\x11\xda\x36\xf1\x8f\x5d\x17\x04\xbc\xac\xa4\x32\x10\x05\x00\x00\x61\x5e\x9a\x30\x88\x83\xb6\x45\x91\xc1\x2b\x5a\x1f\x9f\x4c\x7a\xe9\xdc\x54\x0a\x4d\x5b\x68\xed\x39\xbd\x3c\x63\x25\xc2\xd7\xa7\x90\xd0\x8f\xc4\xfe\xa2\xcd\x76\x7d\xcb\x94\xa6\xb5\x8c\xa7\x06\xc2\x82\x69\x23\xf3\x5c\xa3\x09\xe1\xb5\x17\x02\xc5\xc4\x1a\xe1\xb9\xfa\x5e\x64\xd8\x2c\x69\x4b\x51\x8f\xf4\xfd\x40\x3f\x35\x74\x5d\xb0\xb0\x1a\x49\xc7\x07\xab\x83\x64\xaa\xa2\x4e\x6f\x0e\x15\xbb\x33\xff\x0d\x39\x57\xda\x40\xd7\xb5\x2d\x3c\x97\xc3\x06\x5d\x5f\xfb\x23\x9c\xe6\xfe\x60\x7f\x00\xf0\x1c\xf0\xa7\x5e\xc2\xda\x12\x5e\x85\x5d\xb7\x5a\xc1\xf9\x0d\xaf\x2a\xcc\xc0\x2e\xb5\x2d\x16\x1a\xed\xfb\xb6\xf5\xd2\x1f\x15\xe6\xbc\xc1\x8c\x76\x75\x1d\x70\x0d\x8c\x16\x7b\x17\x75\x1d\xc8\x1c\xcc\xae\xc2\xfd\x16\xf7\xde\x3a\xbc\x37\x90\xe7\xfd\xe9\x6f\x64\x59\xa2\x30\xb4\x30\x3e\x66\xf4\x9a\xe4\xdd\x56\x8a\xdf\x31\x20\x7b\xab\xbc\xa9\xaf\xad\x57\xc6\xc0\x4e\x81\x4b\xc3\x9c\xa0\x40\x78\x3d\x78\xac\xeb\xe0\x8f\x30\xf2\xe0\x00\xd6\x39\xc0\xcb\x8f\x83\x32\x96\xbc\x7b\xc4\x51\x6d\xcf\xaf\x6c\x74\x48\x81\x8d\xdf\x61\x48\xdd\x83\x4f\x2a\x67\x71\x4c\xd9\x09\x06\xcb\xaa\x60\x06\x21\xd4\x46\x71\xb1\x46\x15\x42\x42\xb1\xa4\x0a\xf8\xc8\x94\xc6\xb6\xdd\xe7\x65\xd7\x01\x33\xb4\xc5\x68\x30\x12\x52\x29\xb6\xa8\x0c\x30\x70\x9b\xe9\x1d\x85\x6c\xbc\x21\xc8\x6b\x91\xce\x69\x8a\x04\x25\x87\xdb\x18\x43\x74\xb8\xb8\x04\x54\x4a\xaa\x18\xda\x60\xc1\x73\x68\x96\x20\x6f\xc8\xbe\xab\x43\x31\x9b\x81\x97\xa4\xe8\xd3\x37\x24\xd1\x06\x8b\x85\x42\x53\x2b\x41\x5b\x04\x2f\x82\x45\xd7\xb6\x3c\x87\x44\xc8\x94\x69\x04\x9f\x0b\x6f\xe8\x99\x0b\x8d\x42\x73\xc3\xb7\x08\x15\xe1\x5b\x42\x46\xf8\x35\x56\x8c\xfa\x01\x14\x52\xde\xd4\x15\x19\x55\x29\xdc\xa2\x30\x50\x0b\x81\x29\x6a\xcd\xd4\x0e\x52\xa9\x0d\x25\x64\x21\x6f\x51\xa5\x4c\x93\xfd\x83\x23\x78\x0e\xb7\x08\x99\x14\x2f\x0d\x08\xc4\x0c\x8c\x4c\x1e\x61\x89\xdb\xad\x93\x0b\xf9\x77\xd2\x6a\x5d\x14\xdf\x67\x5a\x1f\xcc\x85\xb7\x92\x95\xa8\x6d\x5f\xe8\x65\x27\x3e\x7f\x1d\x2f\x21\x2f\x4d\xf2\x96\xbc\x9b\x47\xe1\x0b\x4d\x65\x26\x24\xc5\x70\xcb\x0a\x9e\xc1\x34\x0e\x46\xed\xe0\xf2\x85\xfe\x14\x2e\x81\xb4\x2f\xa1\xc7\xf8\x37\xc9\x45\x34\xb1\x82\xfe\xeb\x25\x84\x4b\x08\xe3\xd8\x97\x17\x65\xf9\x17\x44\xe4\x71\xc4\xe3\xe2\xb5\x8d\x96\x7c\x9e\x54\x46\x41\x9f\x73\x51\x33\xd9\x1a\xc3\x47\xa3\xa2\x18\x4e\x26\x29\xdd\x0e\xd8\xfe\xd0\x04\x5d\xd0\x77\x93\x5e\x67\xc9\x94\xde\xb0\x02\xdc\xc8\x78\xef\x7e\x5d\x60\x63\x80\x97\x55\x81\xd4\x4b\x34\x98\x0d\x82\xa1\x77\x5e\xba\x40\x05\x25\x9a\x8d\xcc\x8e\x82\x19\x69\x8a\x62\x88\x2e\x3f\x5d\xef\x0c\x8e\x13\xdf\x83\x72\x0b\x51\x93\x9c\x5b\xcf\x47\x71\xec\xe2\xef\x6a\xf4\x1f\xa2\x7c\x00\x51\x2d\x8e\x63\x3a\x99\x82\x3a\x50\x17\xd9\xfd\xee\xfc\xd8\x01\x23\x5c\xc2\xcf\x2b\x97\x09\x56\x28\x0e\x16\xa6\xac\x2c\x78\x5a\x39\x56\xee\xb1\xad\x01\x12\x7a\x76\x4a\x36\x8c\xb3\x1a\x95\x0a\x16\x5d\xb0\x38\x69\xe0\x14\x4c\x59\x0d\xf6\x3b\x5b\x27\x51\x91\x0a\x12\xfd\x53\x61\xff\x89\xba\x28\xb8\x30\xc3\xb3\x36\xaa\xeb\x82\x2d\x53\xd3\x22\x7b\xab\xd4\x19\x2f\x3e\x1a\x05\xa7\xce\x1a\x9d\x9c\xe1\x6d\x14\xba\x89\x59\x49\x2e\x0c\x2a\x9b\x7e\xbc\x08\x63\x58\xad\x40\x0a\x84\x0a\x95\x9b\x3a\xb9\x54\xd0\xd3\x80\xb4\x60\x7a\x83\xda\x86\xe0\x3c\x65\x62\xea\x79\x7a\x27\x48\x19\xa9\xcc\x59\x8a\xc9\x71\x9f\x93\x6c\xe4\x30\x0c\xe2\x6d\x17\x43\x44\x8e\x3a\xe8\x83\x4e\xe8\x74\xef\x3b\xeb\xac\x3b\x15\x35\x38\x95\x1c\x6a\x1b\xde\xb7\x70\xcb\x33\x54\x9e\x2b\xc8\x1c\x34\xe1\x63\xd7\x05\x5a\xd3\x74\x62\xa5\x32\xc5\xb7\xa8\xfc\x5c\xdf\x3a\xde\xc0\x8c\xcb\x24\x59\xd9\xe9\xbb\x41\x28\xb8\x36\xd6\x17\xd8\x54\x98\x71\x14\xe9\x2e\x58\xe8\x5b\x6e\xd2\x0d\x6c\x29\xfa\x6e\x88\x46\xa4\xd8\x02\x4f\x5d\xb7\x35\x7f\xf9\xf3\xd7\x47\x20\x6f\x63\x2f\xe5\x52\xca\x89\xb9\x6c\x9a\x4f\xa6\x61\x83\x4b\xce\x87\x37\xf8\x5c\xdd\xc6\xb1\xeb\x94\xa3\xb4\xa1\xde\x34\x93\x96\xe4\x90\x72\x47\x39\x56\xf2\xf5\xc6\x40\xc5\xb4\x06\x2e\x80\xc1\x8f\xbe\x22\x5f\x7e\xf5\x32\xfe\x91\xc6\x88\x41\x96\x91\x77\x28\x0d\x84\x81\x5f\x7e\xfe\xe7\x55\xf4\xbf\xff\xfc\x37\xbe\x5a\xfd\xf2\x33\x69\x72\x91\x5b\xc2\xd6\x97\x87\x36\x8a\x46\x67\xf2\xad\x91\x7c\x84\xec\x1b\x27\x30\x0a\xef\xd8\xaa\xa9\x07\x58\xe1\xfb\xc0\x62\x41\x65\x63\xff\x06\x22\x64\x7d\x73\xb8\x63\xf0\xfd\x76\x1f\x91\x07\xe3\x71\x72\x57\x07\x19\xe3\x31\x5a\x88\xbe\x4a\x8f\x95\x9a\x47\x66\x4f\x39\xe9\x8f\xae\x1f\x73\x76\xfd\xb8\x94\x39\xf1\xba\x7e\x03\xae\x89\xea\x93\x03\xdd\x0e\xc2\x93\x68\xaf\x9f\x12\x7a\xfd\xb4\xd8\xf7\x95\xfa\xb9\xea\xef\x2b\x57\x7b\x50\x17\x2c\x86\x21\x10\x1c\xed\xfc\xda\x8d\xfc\xd5\x0a\x5c\xdf\x9a\x34\x62\xd7\xd3\xdc\xda\x6c\x3b\x9e\x76\x63\x2b\x49\x03\x79\xdc\x0d\x67\xc6\xf2\x7e\x1e\x2f\x87\x11\xe5\xd8\xce\xef\x81\xc6\x06\x3b\x6a\x46\x58\x86\x71\xe9\x1f\x7a\x3a\x93\x17\x6c\xed\x21\x9e\xe3\x1d\xc6\xf0\x4e\x16\x4c\xac\x81\x84\xfc\x1c\x18\x40\x02\x61\xbc\x6f\x8c\xa1\xa1\xae\x34\x50\xfa\x81\x2f\x6c\xef\xe5\x05\xd4\xc8\x82\xa1\x33\x8d\xc8\x80\xe3\x37\xef\xee\xc7\xf8\x0e\x8d\x19\x7b\xf2\x21\x90\xef\x90\xc8\xd6\x68\xcc\x8e\x7c\x78\xd2\xf8\x33\x2f\x68\xda\x4f\x0e\x5d\x73\xb3\xa9\xaf\x93\x54\x96\x2b\x5d\xe5\x5f\xfd\x69\x55\xfd\x95\x1c\x39\xf1\xd1\x3d\x27\x93\xd2\x28\xee\x3f\x10\xf6\xa7\x86\x13\x7e\x7b\x94\xeb\xcc\xd0\x1c\x8a\xa3\xa5\x26\x67\x75\x51\x4c\x58\xad\x36\xaa\x4e\x4d\x4b\x3c\xf9\x90\xed\x1e\x7e\x9e\x2d\x7e\xb0\x24\x9b\x66\xcd\xe2\x5a\x4a\x4b\x2b\xad\x0d\x67\x78\x7b\x57\xab\x0d\xf0\x21\x49\x69\x66\x0e\xb7\x99\xd9\x24\x3d\xb1\xb1\x54\x6a\x47\x5f\x06\xb7\x08\x7c\x2d\xa4\x42\x30\x1b\xae\x5d\x8a\x2c\x81\x1b\xb8\xe5\x45\x01\xff\xaa\xb5\x81\x6b\x74\x73\xd4\x91\x7f\xc7\x25\x7a\x67\xf9\xf8\xfc\x5a\xc2\x35\x07\xf0\x37\x90\xae\x26\x99\x7e\x24\x35\x89\xf3\xe2\x0c\x17\x5b\x42\xce\x0a\x8d\x13\x4a\xe6\x3a\xdf\x54\x51\xb2\x07\x15\x93\xff\x7a\xa5\xd1\x9e\x16\xc4\x63\x57\xf8\x8a\x3e\xe4\x32\x9f\xdd\x7a\xe6\xbc\xf4\x60\xfb\xe1\x39\x3c\xf3\x40\x47\x5c\x5e\xf0\xa2\xff\x46\xbd\x4b\x2c\x59\x9a\x62\x65\xb4\x6b\x59\x96\x48\x12\x72\x47\x37\x93\x69\x43\x9b\x78\xe8\x8b\xf6\xda\xa7\x32\x78\x18\x10\xd3\xe8\xce\xcc\x0b\x91\x81\x2f\xf4\xd1\x23\x27\x2a\x99\x7d\x46\xd1\x9f\x1b\xe5\xeb\x9e\xa0\xde\x5d\xbf\xbf\xb8\xcf\x8d\x7a\x64\x7d\x9f\x1b\xf5\xc4\x25\xfe\xa5\x22\x6a\x91\xfe\x6e\x41\xdd\x8f\xde\xfd\x35\xf0\x70\xcf\x36\x5c\x05\xcf\x5c\xa2\xc0\x29\xcd\x05\x3f\x2c\x78\xbe\x73\x77\xb9\x40\xe3\xa1\xaf\x7a\x77\xd7\xd3\x75\x33\xdf\xb9\xf6\x1a\xc6\x36\x23\xc1\xca\x61\xb7\xbf\xd4\x9b\x13\x75\xc6\x69\x60\xee\xe3\x4e\xe6\x50\x49\xad\x39\x7d\x1e\xfa\x79\xe5\xbf\x06\x65\x3e\xd9\xef\x7d\x3f\xa3\x34\x8a\xe1\xf2\xd3\x7e\xda\x99\xb2\x22\x06\x50\xb2\x1b\x8c\xfa\xf7\x4b\x28\x70\xfe\x0e\x29\x26\x9e\x29\xab\x5d\x64\x6f\x15\x66\x25\x86\x90\x98\xb2\xda\xfb\xdd\xde\xba\xcf\xb8\xe4\x3d\xab\xac\x43\xa0\x64\xd5\xd8\x9f\x6e\x9e\xf8\x4b\xbb\xc9\x44\xf1\x81\x7a\x0c\x4d\xeb\xb3\x60\x34\xde\x79\x4e\x3f\x8e\x5c\xf7\xbd\x67\xd5\x65\x73\xe7\x62\x4f\x1b\x35\xce\xb5\xbc\x34\xc9\x79\xa5\xb8\x30\x79\x34\x61\x09\xd1\x8b\x2c\x0e\x97\xd0\xc4\xc1\xbc\xb9\xae\x7c\xac\xc1\xb5\x38\x30\x39\xe9\xef\x2b\xf1\x20\x47\xff\x1f\x00\x00\xff\xff\x75\xaa\x20\xe9\x23\x19\x00\x00")

func enumTmplBytes() ([]byte, error) {
	return bindataRead(
		_enumTmpl,
		"enum.tmpl",
	)
}

func enumTmpl() (*asset, error) {
	bytes, err := enumTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "enum.tmpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x82, 0x7, 0xc3, 0x4a, 0x34, 0xbd, 0x11, 0x96, 0x39, 0xf3, 0x35, 0xdf, 0x87, 0x42, 0x18, 0xa2, 0x1e, 0xbd, 0x6f, 0xeb, 0x1c, 0x1b, 0x3f, 0xb1, 0x5c, 0x16, 0xda, 0x93, 0x8f, 0x6b, 0x54, 0xb2}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"enum.tmpl": enumTmpl,
}

// AssetDebug is true if the assets were built with the debug flag enabled.
const AssetDebug = false

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"enum.tmpl": {enumTmpl, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
