package assets

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
)

func bindata_read(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	return buf.Bytes(), nil
}

var _enum_tmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x57\x5f\x6f\xdb\x36\x10\x7f\xb6\x3e\xc5\x55\x48\x07\xa9\x53\xe5\x0c\x7b\x6b\xe1\xa7\xb6\x0b\x5a\xa0\x4d\x81\x64\x7b\x09\x82\x80\x91\x4e\x0e\x17\x89\x52\x49\xda\x75\xa0\xf1\xbb\x0f\x47\x52\x32\xad\xc8\xc9\x0a\x74\x2f\x86\xc9\xfb\x7f\xf7\xbb\xe3\xa9\xef\x5f\x43\x89\x15\x17\x08\xf1\x1d\xb2\x12\x65\x6c\x4c\xb4\x5c\xc2\xbb\xb6\x44\x58\xa3\x40\xc9\x34\x96\x70\xfb\x00\xeb\xf6\x35\x8a\x4d\x43\xc4\xf7\xe7\xf0\xe5\xfc\x12\x3e\xbc\xff\x78\xf9\x22\x8a\x3a\x56\xdc\xb3\x35\x42\xdf\xe7\xfe\xaf\x31\x51\xc4\x9b\xae\x95\x1a\x92\x08\x00\x80\xcc\xf0\x0a\xf2\xbf\x55\x2b\xc0\x98\x18\x45\xd1\x96\x5c\xac\x97\x74\x11\xf7\x3d\xa0\x28\xe1\xb5\x31\x96\x39\xae\x1a\x1d\x47\x69\xd4\xf7\xc3\x6d\x14\xba\x49\x4e\x90\x93\x45\x2b\x14\xe9\x27\xda\x09\x5d\x7e\x61\x0d\xc2\x9b\x15\xe4\x74\xc8\xed\x89\x84\x2d\x7d\xcb\xa4\x22\x5a\xc9\x0b\x0d\x71\xcd\x94\x6e\xab\x4a\xa1\x8e\xe1\xd4\x33\x81\x64\x62\x8d\x70\x22\x3f\x8a\x12\x77\x19\x89\xd4\x9b\x40\xdf\x5f\x74\x54\x60\x4c\xb4\xb0\x1a\x49\xc7\xb9\xd5\x41\x3c\x5d\xbd\x29\xee\x0f\x15\x3b\x9b\xff\x40\xc5\xa5\xd2\x60\x4c\xdf\xc3\x49\x3b\x0a\xa8\xcd\xad\x37\xe1\x34\x0f\x86\xbd\x01\xca\x16\x7e\x1b\x38\x6c\x2c\xf1\x4d\x6c\xcc\x72\x09\x17\xf7\xbc\xeb\xb0\x04\x4b\xea\x7b\xac\x15\xda\xfb\xbe\xf7\xdc\x5f\x25\x56\x7c\x87\x25\x49\x19\x03\x5c\x01\x23\xe2\x90\x22\x63\xa0\xad\x40\x3f\x74\xb8\x17\x71\xf7\x36\xe1\x43\x80\xbc\x1a\xac\xbf\x6b\x9b\x06\x85\x26\x42\x68\x26\xb8\x26\x7e\x27\xea\x8a\x3d\xef\xc8\x3e\x2a\x1f\xea\xa9\xcd\x4a\xe8\xd8\x0a\x78\xab\x99\x63\x14\x08\xa7\x63\xc6\x8c\x81\x5f\x21\xc8\xe0\xe8\xac\x4b\x80\xe7\x0f\x8b\x12\x72\x3e\x36\x71\x54\xdb\xc9\x8d\xad\x0e\x29\xb0\xf5\x3b\x2c\xa9\xfb\xe3\x41\xe5\x22\x4e\x09\x9d\xa0\xb1\xe9\x6a\xa6\x11\x62\xa5\x25\x17\x6b\x94\x31\xe4\x54\x4b\x6a\x97\xaf\x4c\x2a\xec\xfb\x3d\x2e\x8d\x01\xa6\x49\x44\x2b\xd0\x2d\x14\xad\xd8\xa2\xd4\xc0\xc0\x09\xd3\x1d\x95\x2c\x14\x88\xaa\x8d\x28\xe6\x34\x25\x82\xc0\xe1\x04\x53\x48\x0e\x89\x19\xa0\x94\xad\x4c\xa1\x8f\x16\xbc\x82\x5d\x06\xed\x3d\xc5\x77\x73\xc8\x66\x11\x78\x45\x8a\xae\xdf\x12\x47\x1f\x2d\x16\x12\xf5\x46\x0a\x12\x11\xbc\x8e\x16\xb6\xca\xd4\xc2\xc4\xa5\x6c\xcf\x0c\x2c\x13\x7f\x4e\xd3\x0c\xaa\x46\xe7\x1f\xc8\x72\x95\xc4\x2f\x15\x41\x50\xb4\x14\xdf\x96\xd5\xbc\x84\xa9\x8f\x5a\x3e\xc0\xd5\x4b\x75\x1d\x67\x40\xda\x33\x1f\x8d\xca\x3f\xb5\x5c\x24\x13\x5f\xe9\x57\x65\x10\x67\x10\xa7\xa9\x87\x1e\x21\xe0\x27\x7a\xe4\xfd\x48\x43\x60\xdb\x21\x64\x67\x58\xc3\xa4\xba\x63\x35\xb8\x39\xf9\xd9\x9d\x2e\x71\xa7\x81\x37\x5d\x8d\xd4\x13\x0a\xf4\x1d\x82\xa6\x3b\xcf\x5d\xa3\x84\x06\xf5\x5d\x5b\xba\x42\x26\x3b\x78\x75\x68\x34\x0d\x55\x25\x29\x24\x57\xd7\xb7\x0f\x1a\xc3\x0a\xfa\xe8\x1c\x21\xd9\xe5\x17\x36\x4d\x49\x9a\xba\x1a\x39\xb0\xfd\x29\x9a\x67\x5c\xda\x88\x1f\x70\xea\x40\x5d\x62\xe5\x9d\xfd\xd4\x39\x46\x7e\x09\x3f\x78\x5d\xd9\x2c\x53\x1a\x2d\x74\xd3\x59\xe7\x89\x72\x0c\xb7\xa9\x85\x25\x31\xbd\x58\x51\x0c\x21\xf2\x50\x4a\x0b\xbb\x57\x3b\x58\x81\x6e\xba\x31\x7e\x17\xeb\x30\xac\x86\xb2\xa8\x6f\x43\x49\x2e\x0a\x26\xa6\x81\xd3\x9d\x40\x09\x5c\x68\x94\x15\x2b\x30\x3f\x1e\x32\xf1\x26\x6e\xfa\x8f\xec\xbd\x09\xe2\xdd\x32\x09\x41\xd7\x45\xd1\x42\x7d\xe7\xba\xb8\x83\x2d\xc5\xea\x66\x5f\x42\x03\xd6\x56\xad\x60\x6a\xe0\x7c\x13\x2d\x5c\xb2\x56\xb0\xf5\x04\x97\xcc\x80\xe0\x93\xb8\x4d\x3d\x83\xe0\x35\x51\x6d\x16\x1e\xe1\x7a\x9f\x2d\xdf\xa4\xff\x7b\xda\x29\xc1\xee\xc1\x9a\x64\xb8\x94\x7c\x8b\xd2\xd1\x66\xf3\x3c\x4d\xb3\xe5\x24\xa0\x3b\x49\xf7\x0c\xce\xc0\x7d\x8f\xf3\xec\x48\xe9\xfd\x56\x11\xb4\xe3\xa7\x8b\xf3\x2f\x53\x07\x89\x2b\xf7\xf4\xc7\xc0\x3f\xd2\x8c\xa4\xe8\xc9\x66\x0c\xb5\x86\x2d\x39\xed\xc6\xa3\x1e\x8d\x1c\x3f\xd2\x8c\xd6\xad\xf9\x66\x24\x70\xaa\x01\x99\x43\x99\xdf\xac\x26\xc6\xac\x70\x06\xbf\xa8\xf4\xed\x33\x38\x78\x0e\x4f\xea\x27\xf6\x70\x55\xb3\xf5\xd0\xc4\xf8\x68\x78\x9d\xb5\x35\x13\x6b\x20\x26\xbf\x33\x8d\x28\x03\x4a\xd9\x53\x2d\x8d\x9a\x3a\x7a\x7c\x26\xf7\xd9\x7a\x32\xb6\x2d\xab\x53\xef\xfc\x36\x0a\x63\x72\xc5\x3d\x7b\xda\xc7\x33\xd4\x3a\x6c\x85\xe7\x9c\x3c\x43\x9a\xfb\xc1\xc8\x09\x60\xf6\x6a\xe7\x6d\x5e\xd2\xde\x36\x31\xba\xe6\xfa\x6e\x73\x9b\x17\x6d\xb3\x54\x5d\xf5\xdb\xef\xcb\xee\x0f\x4a\xe4\x24\x47\x4f\x58\x26\xa5\x49\x3a\x6c\x1f\x7b\xab\xf1\xe4\x5d\x3c\x2c\x99\xff\x73\xb0\x9c\x8f\xdb\xcf\xb8\xa0\xcf\x3c\xdf\xb0\x22\xcd\xde\x1c\xaf\x1e\xdc\x86\x4d\xdf\x05\x23\x12\xdc\x96\x61\x0c\xa1\x79\x6e\x01\xb0\xc3\x50\xb0\x66\x94\xf6\xab\xd6\x1c\xab\x0b\x86\xb6\xe0\x9a\x2b\x4d\xcb\x6f\xd7\x2a\xc5\x6f\xeb\x61\x2c\xbb\x91\xad\x88\x72\x28\xef\x53\x36\xa3\x34\x49\xe1\xea\x7a\x9f\x2f\xdd\x74\x84\xa1\x86\xdd\x63\x32\xdc\x67\x50\xe3\xfc\xf6\x42\x7b\x4b\xd1\x76\x0f\x89\xed\xad\x59\x8e\xb1\x04\xd4\x34\xf6\xf3\x64\xfc\x16\x9a\x49\xc9\x67\xd6\xd9\x84\x40\xc3\xba\x30\x9f\x36\x25\x6e\x24\x3d\x7a\x10\x7d\xa1\xfe\xcb\xa4\x1e\x86\x5a\x00\x10\x5e\xd1\xe1\xc8\x3a\xf9\x99\x75\x57\xbb\x47\x9b\xa4\xd2\x6e\x16\xf8\x23\x2d\x64\x17\x9d\xe4\x42\x57\xc9\x04\x67\xc9\xcb\x32\x8d\x33\xd8\xd9\x21\x3a\x13\xae\x03\xb6\x0d\x98\x76\x99\x20\xe4\xbc\x6e\xbf\xa3\xb4\xef\x66\x88\xd1\x7f\x03\x00\x00\xff\xff\x61\xea\x04\x04\xe6\x0e\x00\x00")

func enum_tmpl() ([]byte, error) {
	return bindata_read(
		_enum_tmpl,
		"enum.tmpl",
	)
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		return f()
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() ([]byte, error){
	"enum.tmpl": enum_tmpl,
}
// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for name := range node.Children {
		rv = append(rv, name)
	}
	return rv, nil
}

type _bintree_t struct {
	Func func() ([]byte, error)
	Children map[string]*_bintree_t
}
var _bintree = &_bintree_t{nil, map[string]*_bintree_t{
	"enum.tmpl": &_bintree_t{enum_tmpl, map[string]*_bintree_t{
	}},
}}
