// Code generated by go-bindata. DO NOT EDIT.
// sources:
// enum.tmpl (3.311kB)

package assets

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _enumTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x56\x5f\x6f\xdb\x36\x10\x7f\xb6\x3e\xc5\x55\x48\x00\x29\x73\xe4\x0c\x7b\xeb\xe0\xa7\xb6\x0b\x3a\x20\x4d\x81\x64\x7b\x09\x82\x80\x91\x4e\x36\x11\x89\x52\x49\xda\xb5\xa1\xf1\xbb\x0f\x47\x52\x32\xad\xc8\xe9\x1e\xd6\x17\xc3\xe2\xfd\xff\xdd\xef\x8e\xec\xba\x4b\x28\xb0\xe4\x02\x21\x5e\x23\x2b\x50\xc6\xc6\x44\x8b\x05\x7c\x68\x0a\x84\x15\x0a\x94\x4c\x63\x01\xcf\x7b\x58\x35\x97\x28\x36\x35\x09\x3f\xde\xc2\x97\xdb\x7b\xf8\xf4\xf1\xf3\xfd\xbb\x28\x6a\x59\xfe\xc2\x56\x08\x5d\x97\xf9\xbf\xc6\x44\x11\xaf\xdb\x46\x6a\x48\x22\x00\x80\xb8\xac\x75\x1c\xa5\x51\xd7\xa1\x28\xe0\x92\xe4\x61\x64\xf2\x4b\x71\xf3\x46\x28\x32\x21\xd9\x19\x1d\x7e\x61\x35\xc2\xfb\x25\x64\xf4\x91\xd9\x2f\x32\xb6\xf2\x2d\x93\x8a\x64\x05\xcf\x35\xc4\x15\x53\xba\x29\x4b\x85\x3a\x86\x2b\xaf\x04\x92\x89\x15\xc2\x99\xfc\x2c\x0a\xdc\xcd\xc9\xa4\xda\x04\xfe\xfe\xa6\x4f\x05\xc6\x44\x33\xeb\x91\x7c\xdc\x5a\x1f\xa4\xd3\x56\x9b\xfc\xe5\xd8\xb1\x8b\xf9\x0f\x94\x5c\x2a\x0d\xc6\x74\x1d\x9c\x35\x83\x81\xda\x3c\xfb\x10\xce\x73\x1f\xd8\x07\x00\x5e\x02\x7e\xeb\x35\x6c\x2d\xf1\x53\x6c\xcc\x62\x01\x77\x2f\xbc\x6d\xb1\x00\x2b\xea\x3a\xac\x14\xda\xf3\xae\xf3\xda\x5f\x25\x96\x7c\x87\x05\x59\x19\x03\x5c\x01\x23\x61\x0f\x91\x31\xd0\x94\xa0\xf7\x2d\x1e\x4c\xdc\xb9\x05\xbc\x2f\x90\x97\x7d\xf4\x0f\x4d\x5d\xa3\xd0\x24\x08\xc3\x04\xc7\xa4\xef\x4c\xa9\x7f\xa7\x12\x39\x54\xe5\x4b\xbd\xb2\xa8\x84\x89\x2d\x81\x37\x9a\x39\x45\x81\x70\x35\x20\x66\x0c\xfc\x02\x01\x82\x43\xb2\x0e\x00\xaf\x1f\x36\x25\xd4\x7c\x1d\xe2\xa4\xb7\xb3\x27\xdb\x1d\x72\x60\xfb\x77\xdc\x52\xf7\xc7\x93\xca\x55\x9c\x12\x3b\x41\x63\xdd\x56\x4c\x23\xc4\x4a\x4b\x2e\x56\x28\x63\xc8\xa8\x97\x34\x01\x5f\x99\x54\xd8\x75\x07\x5e\x1a\x03\x4c\x93\x89\x56\xa0\x1b\xc8\x1b\xb1\x45\xa9\x81\x81\x33\xa6\x33\x6a\x59\x68\x10\x95\x1b\x91\x4f\x79\x4a\x04\x91\xc3\x19\xa6\x90\x1c\x0b\xe7\x80\x52\x36\x32\x85\x2e\x9a\xf1\x12\x76\x73\x68\x5e\xa8\xbe\xa7\x63\x35\xcb\xc0\x07\x72\xf4\xf8\x3b\x69\x74\xd1\x6c\x26\x51\x6f\xa4\x20\x13\xc1\xab\x68\x66\xbb\xcc\x4b\xc8\x48\x4b\xd9\x99\xe9\x55\x46\xf9\x5c\xa5\x73\x28\x6b\x9d\x7d\xa2\xc8\x65\x12\x9f\x2b\xa2\xa0\x68\xa8\xbe\x2d\xab\x78\x01\xe3\x1c\xb5\xdc\xc3\xc3\xb9\x7a\x8c\xe7\x40\xde\xe7\xbe\x1a\x95\xfd\xd9\x70\x91\x8c\x72\xa5\x5f\x35\x87\x78\x0e\x71\x9a\x7a\xea\x11\x03\xfe\xc7\x8c\x7c\x1e\x69\x48\x6c\xbb\x84\x88\x66\x59\xcd\xa4\x5a\xb3\x0a\xdc\xea\xbb\x71\x5f\xf7\xb8\xd3\xc0\xeb\xb6\x42\x9a\x09\x05\x7a\x8d\xa0\xe9\xcc\x6b\x57\x28\xa1\x46\xbd\x6e\x0a\xd7\xc8\x64\x37\x8a\x99\x86\x9e\x92\x14\x92\x87\xc7\xe7\xbd\xc6\xb0\x81\xbe\x38\x27\x48\x76\xd9\x9d\x45\x29\x49\x53\xd7\x22\xc7\xb5\xbf\x44\xfd\x83\x8c\x36\xe2\x74\x4e\x17\xe3\xa4\x8e\xdc\x25\xd6\xde\xc5\x4f\x5d\x62\x94\x97\xf0\x7b\xd7\x75\xcd\x2a\xa5\xd1\x4c\xd7\xad\x4d\x9e\x24\xa7\x68\x9b\x5a\x56\x92\xd2\xbb\x25\xd5\x10\x12\x0f\xa5\xb4\xac\xbb\xd8\xc1\x12\x74\xdd\x0e\xf5\xbb\x5a\xfb\x5d\xd5\x77\x45\x7d\xeb\x3b\x72\x97\x33\x31\x2e\x9c\xce\x04\x4a\xe0\x42\xa3\x2c\x59\x8e\xd9\xe9\x92\x49\x37\x71\xcb\x7f\x50\xef\x4c\x50\xef\x96\x49\x08\x86\x2e\x8a\x66\xea\x3b\xd7\xf9\x1a\xb6\x54\xab\x5b\x7d\x09\xed\x57\xdb\xb5\x9c\xa9\x5e\xf3\x7d\x34\x73\x60\x2d\x61\xeb\x05\x0e\xcc\x40\xe0\x41\xdc\xa6\x5e\x41\xf0\x8a\xa4\x16\x85\x57\xb4\x3e\xa0\xe5\x67\xf4\xa7\xc3\x4e\x00\xbb\xfb\x6a\x84\x70\x21\xf9\x16\xa5\x93\x4d\xe2\x3c\x86\xd9\x6a\x12\xd1\x9d\xa5\xbb\x05\x27\xe8\x7e\xe0\xf9\xfc\x44\xeb\xcb\x8a\xad\xfa\xde\xe3\x2b\xce\x5f\x37\x15\x13\x2b\x20\x25\x7f\xd3\x0e\xc9\x01\xe5\xf6\x16\x13\x50\x13\x11\x86\xe5\x7a\x60\xc0\x9b\x10\x6f\x59\x95\x7a\x00\xb7\x51\x88\xab\x83\xef\xfa\xed\x1c\xaf\x51\xeb\x10\xc1\x1f\x25\x79\x8d\xb4\x2e\x02\xa6\x06\xd8\x5d\xec\x7c\xcc\x7b\xba\xed\x47\x41\x57\x5c\xaf\x37\xcf\x59\xde\xd4\x0b\xd5\x96\xbf\xfe\xb6\x68\xff\x20\x20\x47\x18\xbd\x11\x99\x9c\x26\x69\x7f\x67\x1d\xa2\xc6\xa3\x6d\x7a\xdc\x32\xff\xe7\xe8\x49\x37\xdc\x99\xc3\xb3\x6e\x62\xe9\xc3\x92\x3c\xfb\x70\xbc\xdc\xbb\x77\x19\x50\x80\x9e\x09\xee\x6e\x32\x86\x26\x74\xea\xda\xb0\x33\x24\x58\x3d\x58\xfb\x0b\x7a\x4a\xd5\x15\x43\x6f\xa7\x8a\x2b\x4d\x4f\xa6\xb6\x51\x8a\x3f\x57\xfd\x34\xbb\x49\x57\x24\x39\xb6\xf7\x90\x4d\x38\x4d\x52\x78\x78\x3c\xe0\xa5\xeb\x96\x38\x54\xb3\x17\x4c\xfa\xf3\x39\x54\x38\x7d\xe7\xd1\x6d\x97\x37\xed\x3e\xb1\x23\x3e\xa9\x31\xb4\x80\x06\xd7\x3e\x6a\x87\x17\xf4\x04\x24\x37\xac\xb5\x80\x40\xcd\xda\x10\x4f\x0b\x89\x1b\xba\x57\x7b\xd4\x37\xea\xbf\x0c\x78\x3f\xb6\x01\x41\x78\x49\x1f\x27\x1e\x21\x37\xac\x7d\xd8\xbd\x7a\x7f\x28\xed\xf6\x91\xff\xa4\x6b\xfc\xae\x95\x5c\xe8\x32\x19\xf1\x2c\x39\x2f\xd2\x78\x0e\xbb\x34\x9a\x2e\xd7\x11\xdb\x16\x4c\x57\x60\x50\x72\x56\x35\xdf\x51\xda\x75\x1b\x72\xf4\xdf\x00\x00\x00\xff\xff\xd3\x7c\x46\xc2\xef\x0c\x00\x00")

func enumTmplBytes() ([]byte, error) {
	return bindataRead(
		_enumTmpl,
		"enum.tmpl",
	)
}

func enumTmpl() (*asset, error) {
	bytes, err := enumTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "enum.tmpl", size: 3311, mode: os.FileMode(0644), modTime: time.Unix(1575469585, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xad, 0x1f, 0xae, 0xf9, 0x5b, 0xfe, 0x8a, 0x8, 0x9e, 0x42, 0xe6, 0xa8, 0xe3, 0xd7, 0xea, 0xf5, 0xb5, 0x31, 0xe1, 0xda, 0x3c, 0x17, 0xb5, 0x72, 0x95, 0x9e, 0x9c, 0xc2, 0xdb, 0x2f, 0x8f, 0xdd}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"enum.tmpl": enumTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"enum.tmpl": &bintree{enumTmpl, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
