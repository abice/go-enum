package assets

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
)

func bindata_read(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	return buf.Bytes(), nil
}

var _enum_tmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x57\x5f\x6f\xdb\x36\x10\x7f\xb6\x3e\xc5\x55\x48\x00\x29\x73\xe4\x0c\x7b\xeb\xe0\xa7\xb6\x0b\x5a\x20\x49\x81\x64\x7b\x09\x82\x80\x91\x4e\x36\x17\x89\x54\x49\xda\xb5\xa1\xe9\xbb\x0f\x47\x52\x32\xed\xc8\x69\x0b\xac\xc0\x5e\x0c\x91\xf7\xff\xee\x77\xc7\x73\xdb\x9e\x43\x81\x25\x17\x08\xf1\x12\x59\x81\x2a\xee\xba\x68\x36\x83\x77\xb2\x40\x58\xa0\x40\xc5\x0c\x16\xf0\xb4\x85\x85\x3c\x47\xb1\xaa\x89\xf8\xfe\x06\xae\x6f\xee\xe0\xc3\xfb\x8f\x77\x6f\xa2\xa8\x61\xf9\x33\x5b\x20\xb4\x6d\xe6\x3f\xbb\x2e\x8a\x78\xdd\x48\x65\x20\x89\x00\x00\xe2\xb2\x36\x71\x94\x46\x6d\x8b\xa2\x80\x73\xa2\x87\x96\x49\x2f\xd9\xcd\xa5\xd0\x24\x42\xb4\x13\xba\xbc\x66\x35\xc2\xdb\x39\x64\x74\xc8\xec\x89\x84\x2d\x7d\xcd\x94\x26\x5a\xc1\x73\x03\x71\xc5\xb4\x91\x65\xa9\xd1\xc4\x70\xe1\x99\x40\x31\xb1\x40\x38\x51\x1f\x45\x81\x9b\x29\x89\x54\xab\x40\xdf\x5f\x74\xd4\xd0\x75\xd1\xc4\x6a\x24\x1d\x37\x56\x07\xf1\x34\xd5\x2a\x7f\xde\x57\xec\x6c\xfe\x03\x25\x57\xda\x40\xd7\xb5\x2d\x9c\xc8\x41\x40\xaf\x9e\xbc\x09\xa7\xb9\x37\xec\x0d\x00\x2f\x01\xbf\xf4\x1c\x36\x96\xf8\x31\xee\xba\xd9\x0c\x6e\x9f\x79\xd3\x60\x01\x96\xd4\xb6\x58\x69\xb4\xf7\x6d\xeb\xb9\x3f\x2b\x2c\xf9\x06\x0b\x92\xea\x3a\xe0\x1a\x18\x11\xfb\x14\x75\x1d\xc8\x12\xcc\xb6\xc1\x9d\x88\xbb\xb7\x09\xef\x03\xe4\x65\x6f\xfd\x9d\xac\x6b\x14\x86\x08\xa1\x99\xe0\x9a\xf8\x9d\x28\xd5\xef\x98\x23\xbb\xa8\x7c\xa8\x17\x36\x2b\xa1\x63\x73\xe0\xd2\x30\xc7\x28\x10\x2e\x86\x8c\x75\x1d\xfc\x02\x41\x06\x07\x67\x5d\x02\x3c\x7f\x58\x94\x90\xf3\xa5\x89\xa3\xda\x4e\x1e\x6d\x75\x48\x81\xad\xdf\x7e\x49\xdd\x87\x07\x95\x8b\x38\x25\x74\x82\xc1\xba\xa9\x98\x41\x88\xb5\x51\x5c\x2c\x50\xc5\x90\x51\x2d\xa9\x03\x3e\x33\xa5\xb1\x6d\x77\xb8\xec\x3a\x60\x86\x44\x8c\x06\x23\x21\x97\x62\x8d\xca\x00\x03\x27\x4c\x77\x54\xb2\x50\x20\x2a\x57\x22\x1f\xd3\x94\x08\x02\x87\x13\x4c\x21\xd9\x27\x4e\x01\x95\x92\x2a\x85\x36\x9a\xf0\x12\x36\x53\x90\xcf\x14\xdf\xe3\x3e\x9b\x45\xe0\x3d\x29\x7a\xf8\x9d\x38\xda\x68\x32\x51\x68\x56\x4a\x90\x88\xe0\x55\x34\xb1\x55\xe6\x25\x64\xc4\xa5\x6d\xcf\xf4\x2c\x07\xfe\x5c\xa4\x53\x28\x6b\x93\x7d\x20\xcb\x65\x12\x9f\x6a\x82\xa0\x90\x14\xdf\x9a\x55\xbc\x80\x43\x1f\x8d\xda\xc2\xfd\xa9\x7e\x88\xa7\x40\xda\xa7\x3e\x1a\x9d\x7d\x92\x5c\x24\x07\xbe\xd2\xaf\x9e\x42\x3c\x85\x38\x4d\x3d\xf4\x08\x01\xff\xa1\x47\xde\x8f\x34\x04\xb6\x1d\x42\x04\xb3\xac\x66\x4a\x2f\x59\x05\x6e\xf4\x5d\xb9\xd3\x1d\x6e\x0c\xf0\xba\xa9\x90\x7a\x42\x83\x59\x22\x18\xba\xf3\xdc\x15\x2a\xa8\xd1\x2c\x65\xe1\x0a\x99\x6c\xe0\x6c\xdf\x68\x1a\xaa\x4a\x52\x48\xee\x1f\x9e\xb6\x06\xc3\x0a\xfa\xe8\x1c\x21\xd9\x64\xb7\x36\x4d\x49\x9a\xba\x1a\x39\xb0\xfd\x29\xea\x6f\xb8\xb4\x12\x3f\xe0\xd4\x9e\xba\xc4\xca\x3b\xfb\xa9\x73\x8c\xfc\x12\x7e\xf0\xba\xb2\x59\xa6\x34\x9a\x98\xba\xb1\xce\x13\xe5\x18\x6e\x53\x0b\x4b\x62\x7a\x33\xa7\x18\x42\xe4\xa1\x52\x16\x76\x67\x1b\x98\x83\xa9\x9b\x21\x7e\x17\x6b\x3f\xac\xfa\xb2\xe8\x2f\x7d\x49\x6e\x73\x26\x0e\x03\xa7\x3b\x81\x0a\xb8\x30\xa8\x4a\x96\x63\x76\x3c\x64\xe2\x4d\xdc\xf4\x1f\xd8\xdb\x2e\x88\x77\xcd\x14\x04\x5d\x17\x45\x13\xfd\x95\x9b\x7c\x09\x6b\x8a\xd5\xcd\xbe\x84\x06\xac\xad\x5a\xce\x74\xcf\xf9\x36\x9a\xb8\x64\xcd\x61\xed\x09\x2e\x99\x01\xc1\x27\x71\x9d\x7a\x06\xc1\x2b\xa2\xda\x2c\xbc\xc0\xf5\x2e\x5b\xbe\x49\x7f\x7a\xda\x29\xc1\xee\xc1\x3a\xc8\x70\xa1\xf8\x1a\x95\xa3\x8d\xe6\xf9\x30\xcd\x96\x93\x80\xee\x24\xdd\x33\x38\x02\xf7\x1d\xce\xa7\x47\x4a\xff\xb7\x96\x62\xbf\x1d\x3f\xdd\xde\x5c\x1f\x3a\x48\x5c\x99\xa7\x7f\x7f\x37\x92\xa6\x9f\xd5\x8d\xd6\xa3\x81\xe3\x47\x9a\xd1\x7a\xf5\x3f\x6e\xc6\xb2\x62\x8b\xbe\x1b\xf1\x45\xdc\x97\xb2\x62\x62\x01\xc4\xe4\x97\x9f\x01\x2e\x40\xb1\xbf\xd6\x9b\x68\xa8\x35\x87\xf7\x6e\xd7\x93\xaf\x86\xb7\x66\x55\xea\x9d\x5f\x47\x61\x4c\xae\x4a\x97\xaf\xfb\x78\x89\xc6\x84\x98\xfe\x96\x93\x97\x48\x03\x3c\x98\x1d\x01\x5c\xce\x36\xde\xe6\x1d\x2d\x60\x07\x46\x17\xdc\x2c\x57\x4f\x59\x2e\xeb\x99\x6e\xca\x5f\x7f\x9b\x35\x7f\x50\x22\x0f\x72\xf4\x8a\x65\x52\x9a\xa4\xfd\x1a\xb1\xb3\x1a\x1f\x3c\x70\xfb\x25\xf3\x1f\x7b\x5b\xf6\xb0\xc6\x0c\x9b\xf6\xc8\x3b\x0c\x73\xd2\xec\xcd\xf1\x72\xeb\x56\x65\x20\x03\x3d\x12\xdc\xba\xd0\x75\x34\x33\xc7\x5e\x72\x3b\xd5\x04\xab\x07\x69\xbf\x33\x8d\xb1\xba\x60\x68\x9d\xad\xb8\x36\xb4\xc5\x36\x52\x6b\xfe\x54\xf5\xf3\xd5\xcd\x5e\x4d\x94\x7d\x79\x9f\xb2\x11\xa5\x49\x0a\xf7\x0f\xbb\x7c\x99\xba\x21\x0c\xd5\xec\x19\x93\xfe\x7e\x0a\x15\x8e\xaf\x21\xb4\x80\xe4\xb2\xd9\x26\xb6\xbd\x46\x39\x86\x12\x50\xd3\xd8\xff\x19\xc3\x9f\x9a\x91\x94\x5c\xb1\xc6\x26\x04\x6a\xd6\x84\xf9\xb4\x29\x71\x03\xe6\xc5\xcb\xe6\x0b\xf5\x3d\x23\xb7\x1f\x51\x01\x40\x78\x49\x87\x23\x7b\xe1\x15\x6b\xee\x37\x2f\x56\x42\x6d\xdc\x2c\xf0\x47\xda\xac\x6e\x1b\xc5\x85\x29\x93\x03\x9c\x25\xa7\x45\x1a\x4f\x61\x93\x46\xe3\xe1\x3a\x60\xdb\x80\x69\x29\x09\x42\xce\x2a\xf9\x15\x95\x7d\x00\x43\x8c\xfe\x1b\x00\x00\xff\xff\x28\x8a\x8d\xd6\x82\x0e\x00\x00")

func enum_tmpl() ([]byte, error) {
	return bindata_read(
		_enum_tmpl,
		"enum.tmpl",
	)
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		return f()
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() ([]byte, error){
	"enum.tmpl": enum_tmpl,
}
// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for name := range node.Children {
		rv = append(rv, name)
	}
	return rv, nil
}

type _bintree_t struct {
	Func func() ([]byte, error)
	Children map[string]*_bintree_t
}
var _bintree = &_bintree_t{nil, map[string]*_bintree_t{
	"enum.tmpl": &_bintree_t{enum_tmpl, map[string]*_bintree_t{
	}},
}}
