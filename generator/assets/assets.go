// Code generated by go-bindata.
// sources:
// enum.tmpl
// DO NOT EDIT!

package assets

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _enumTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x56\x5f\x6f\xdb\x36\x10\x7f\xb6\x3e\xc5\x55\x48\x01\x29\x53\xe4\x0c\x7b\xcb\xe0\xa7\xb6\x0b\x3a\x20\x4d\x81\x64\x7b\x09\x82\x80\x91\x4e\x36\x11\x89\x52\x49\xda\xb5\xa1\xf1\xbb\x0f\x47\x52\x32\xed\xc8\xe9\x06\x6c\x2f\x86\xc5\xfb\xff\xbb\x1f\xef\xd8\xf7\x17\x50\x62\xc5\x05\x42\xbc\x42\x56\xa2\x8c\x8d\x89\xe6\x73\xf8\xd0\x96\x08\x4b\x14\x28\x99\xc6\x12\x9e\x77\xb0\x6c\x2f\x50\xac\x1b\x12\x7e\xbc\x85\x2f\xb7\xf7\xf0\xe9\xe3\xe7\xfb\x77\x51\xd4\xb1\xe2\x85\x2d\x11\xfa\x3e\xf7\x7f\x8d\x89\x22\xde\x74\xad\xd4\x90\x44\x00\x00\x71\xd5\xe8\x38\x4a\xa3\xbe\x47\x51\xc2\x05\xc9\xc3\xc8\xe4\x97\xe2\x16\xad\x50\x64\x42\xb2\x33\x3a\xfc\xc2\x1a\x84\xab\x05\xe4\xf4\x91\xdb\x2f\x32\xb6\xf2\x0d\x93\x8a\x64\x25\x2f\x34\xc4\x35\x53\xba\xad\x2a\x85\x3a\x86\x4b\xaf\x04\x92\x89\x25\xc2\x99\xfc\x2c\x4a\xdc\x66\x64\x52\xaf\x03\x7f\x7f\xd2\xa7\x02\x63\xa2\x99\xf5\x48\x3e\x6e\xad\x0f\xd2\xe9\xea\x75\xf1\x72\xe8\xd8\xc5\xfc\x0b\x2a\x2e\x95\x06\x63\xfa\x1e\xce\xda\xd1\x40\xad\x9f\x7d\x08\xe7\x79\x08\xec\x03\x00\xaf\x00\xbf\x0d\x1a\xb6\x96\xf8\x29\x36\x66\x3e\x87\xbb\x17\xde\x75\x58\x82\x15\xf5\x3d\xd6\x0a\xed\x79\xdf\x7b\xed\xaf\x12\x2b\xbe\xc5\x92\xac\x8c\x01\xae\x80\x91\x70\x80\xc8\x18\x68\x2b\xd0\xbb\x0e\xf7\x26\xee\xdc\x02\x3e\x14\xc8\xab\x21\xfa\x87\xb6\x69\x50\x68\x12\x84\x61\x82\x63\xd2\x77\xa6\xd4\xbf\x53\x89\xec\xab\xf2\xa5\x5e\x5a\x54\xc2\xc4\x16\xc0\x5b\xcd\x9c\xa2\x40\xb8\x1c\x11\x33\x06\x7e\x82\x00\xc1\x31\x59\x07\x80\xd7\x0f\x9b\x12\x6a\xbe\x0e\x71\xd2\xdb\xd9\x93\xed\x0e\x39\xb0\xfd\x3b\x6c\xa9\xfb\xe3\x49\xe5\x2a\x4e\x89\x9d\xa0\xb1\xe9\x6a\xa6\x11\x62\xa5\x25\x17\x4b\x94\x31\xe4\xd4\x4b\xba\x01\x5f\x99\x54\xd8\xf7\x7b\x5e\x1a\x03\x4c\x93\x89\x56\xa0\x5b\x28\x5a\xb1\x41\xa9\x81\x81\x33\xa6\x33\x6a\x59\x68\x10\x55\x6b\x51\x4c\x79\x4a\x04\x91\xc3\x19\xa6\x90\x1c\x0a\x33\x40\x29\x5b\x99\x42\x1f\xcd\x78\x05\xdb\x0c\xda\x17\xaa\xef\xe9\x50\xcd\x32\xf0\x81\x1c\x3d\xfe\x4a\x1a\x7d\x34\x9b\x49\xd4\x6b\x29\xc8\x44\xf0\x3a\x9a\xd9\x2e\xf3\x0a\x72\xd2\x52\xf6\xce\x0c\x2a\x47\xf9\x5c\xa6\x19\x54\x8d\xce\x3f\x51\xe4\x2a\x89\xdf\x2b\xa2\xa0\x68\xa9\xbe\x0d\xab\x79\x09\xc7\x39\x6a\xb9\x83\x87\xf7\xea\x31\xce\x80\xbc\x67\xbe\x1a\x95\xff\xde\x72\x91\x1c\xe5\x4a\xbf\x2a\x83\x38\x83\x38\x4d\x3d\xf5\x88\x01\xff\x61\x46\x3e\x8f\x34\x24\xb6\x1d\x42\x44\xb3\xbc\x61\x52\xad\x58\x0d\x6e\xf4\xdd\xb8\xaf\x7b\xdc\x6a\xe0\x4d\x57\x23\xdd\x09\x05\x7a\x85\xa0\xe9\xcc\x6b\xd7\x28\xa1\x41\xbd\x6a\x4b\xd7\xc8\x64\x0b\xe7\x87\x41\xd3\xd0\x55\x92\x42\xf2\xf0\xf8\xbc\xd3\x18\x76\xd0\x57\xe7\x04\xc9\x36\xbf\xb3\x30\x25\x69\xea\x7a\xe4\xc8\xf6\x87\x68\x7e\x90\xd2\x5a\xfc\x8b\xa4\x0e\xdc\x25\xd6\xde\xc5\x4f\x5d\x62\x94\x97\xf0\x83\xd7\xb5\xcd\x2a\xa5\xd1\x4c\x37\x9d\x4d\x9e\x24\xa7\x78\x9b\x5a\x5a\x92\xd2\xbb\x05\xd5\x10\x32\x0f\xa5\xb4\xb4\x3b\xdf\xc2\x02\x74\xd3\x8d\xf5\xbb\x5a\x87\x61\x35\xb4\x45\x7d\x1b\x5a\x72\x57\x30\x71\x5c\x38\x9d\x09\x94\xc0\x85\x46\x59\xb1\x02\xf3\xd3\x25\x93\x6e\xe2\xa6\xff\xa8\xde\x9b\xa0\xde\x0d\x93\x10\xdc\xba\x28\x9a\xa9\xef\x5c\x17\x2b\xd8\x50\xad\x6e\xf6\x25\x34\x60\x6d\xd7\x0a\xa6\x06\xcd\xab\x68\xe6\xc0\x5a\xc0\xc6\x0b\x1c\x98\x81\xc0\x83\xb8\x49\xbd\x82\xe0\xf5\xd5\x1e\x14\x7f\x17\xff\x77\x74\x09\x47\xb7\x97\x8e\x80\x2c\x25\xdf\xa0\x74\xb2\x49\x38\x8f\xd1\xb4\x9a\xc4\x67\x67\xe9\xb6\xdd\x04\xab\xf7\x74\xce\x4e\x74\xb8\xaa\xd9\x72\x68\x31\xbe\xa2\xf6\x75\x5b\x33\xb1\x04\x52\xf2\x1b\x75\x4c\x0e\x28\xb7\xb7\x1a\x8e\x9a\xfa\x3d\x0e\xd1\x7d\xa3\xdf\x84\x78\xc3\xea\xd4\x03\xb8\x89\x42\x5c\x1d\x7c\xd7\x6f\xe7\x78\x8d\x5a\x87\x08\xfe\x28\xc9\x6b\xa4\xa9\x10\x10\x32\xc0\xee\x7c\xeb\x63\xde\xd3\x56\x3f\x0a\xba\xe4\x7a\xb5\x7e\xce\x8b\xb6\x99\xab\xae\xfa\xf9\x97\x79\xf7\x1b\x01\x79\x84\xd1\x1b\x91\xc9\x69\x92\x0e\xbb\x69\x1f\x35\x3e\x9a\x9a\x87\x2d\xf3\x7f\x0e\x9e\x6e\xe3\x6e\x1c\x9f\x6f\x13\xc3\x1d\x16\xe4\xd9\x87\xe3\xd5\xce\xbd\xbf\x80\x02\x0c\x4c\x70\x3b\xc8\x18\xba\x88\x53\xeb\x01\x16\xd0\xf7\x82\x35\xa3\xb5\x5f\xc4\x53\xaa\xae\x18\x7a\x23\xd5\x5c\x69\x7a\x1a\x75\xad\x52\xfc\xb9\x1e\x2e\xad\xbb\xd0\x8a\x24\x87\xf6\x1e\xb2\x09\xa7\x49\x0a\x0f\x8f\x7b\xbc\x74\xd3\x11\x87\x1a\xf6\x82\xc9\x70\x9e\x41\x8d\xd3\xbb\x8d\xb6\x5a\xd1\x76\xbb\xc4\x5e\xf1\x49\x8d\xb1\x05\x74\x71\xed\xe3\x75\x7c\x29\x4f\x40\x72\xc3\x3a\x0b\x08\x34\xac\x0b\xf1\xb4\x90\xb8\x4b\xf7\x6a\x5c\xfa\x46\xfd\x93\x0b\x3e\x5c\xdb\x80\x20\xbc\xa2\x8f\x13\x8f\x8d\x1b\xd6\x3d\x6c\x5f\xbd\x33\x94\x76\xf3\xc8\x7f\xd2\xba\xbe\xeb\x24\x17\xba\x4a\x8e\x78\x96\xbc\x2f\xd3\x38\x83\x6d\x1a\x4d\x97\xeb\x88\x6d\x0b\xa6\x4d\x17\x94\x9c\xd7\xed\x77\x94\x76\xaa\x86\x1c\xfd\x3b\x00\x00\xff\xff\x05\xd5\x58\xf3\xd7\x0c\x00\x00")

func enumTmplBytes() ([]byte, error) {
	return bindataRead(
		_enumTmpl,
		"enum.tmpl",
	)
}

func enumTmpl() (*asset, error) {
	bytes, err := enumTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "enum.tmpl", size: 3287, mode: os.FileMode(420), modTime: time.Unix(1538797694, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"enum.tmpl": enumTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"enum.tmpl": &bintree{enumTmpl, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

