// Code generated by go-bindata.
// sources:
// enum.tmpl
// DO NOT EDIT!

package assets

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _enumTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x56\x4d\x6f\xe3\x36\x13\x3e\x5b\xbf\x62\x56\x48\x00\x29\xaf\x23\xe7\x45\x6f\x29\x7c\xea\x6e\x83\x2d\x90\xcd\x02\x49\x7b\x09\x82\x80\x91\x46\x36\x11\x89\xd4\x92\xb4\xd7\x86\xca\xff\x5e\x0c\x49\xc9\xb4\x63\x67\x5b\xa0\xbd\x18\x16\xe7\xfb\x99\x87\x33\xec\xfb\x4b\xa8\xb0\xe6\x02\x21\x5d\x22\xab\x50\xa5\xd6\x26\xb3\x19\xfc\x22\x2b\x84\x05\x0a\x54\xcc\x60\x05\x2f\x5b\x58\xc8\x4b\x14\xab\x96\x84\x1f\xef\xe0\xcb\xdd\x03\x7c\xfa\xf8\xf9\xe1\x43\x92\x74\xac\x7c\x65\x0b\x84\xbe\x2f\xc2\x5f\x6b\x93\x84\xb7\x9d\x54\x06\xb2\x04\x00\x20\xad\x5b\x93\x26\x79\xd2\xf7\x28\x2a\xb8\x24\x79\x1c\x99\xfc\x52\xdc\x52\x0a\x4d\x26\x24\x3b\xa3\xc3\x2f\xac\x45\xb8\x9e\x43\x41\x1f\x85\xfb\x22\x63\x27\x5f\x33\xa5\x49\x56\xf1\xd2\x40\xda\x30\x6d\x64\x5d\x6b\x34\x29\x5c\x05\x25\x50\x4c\x2c\x10\xce\xd4\x67\x51\xe1\x66\x4a\x26\xcd\x2a\xf2\xf7\x07\x7d\x6a\xb0\x36\x99\x38\x8f\xe4\xe3\xce\xf9\x20\x9d\xae\x59\x95\xaf\xfb\x8e\x7d\xcc\x3f\xa1\xe6\x4a\x1b\xb0\xb6\xef\xe1\x4c\x8e\x06\x7a\xf5\x12\x42\x78\xcf\x43\xe0\x10\x00\x78\x0d\xf8\x6d\xd0\x70\xb5\xa4\xcf\xa9\xb5\xb3\x19\xdc\xbf\xf2\xae\xc3\x0a\x9c\xa8\xef\xb1\xd1\xe8\xce\xfb\x3e\x68\x7f\x55\x58\xf3\x0d\x56\x64\x65\x2d\x70\x0d\x8c\x84\x03\x44\xd6\x82\xac\xc1\x6c\x3b\xdc\x99\xf8\x73\x07\xb8\xb5\xae\x09\xa7\xbc\xed\x52\x0b\xf9\x5e\xb9\xd2\x62\xef\x73\xe0\xd2\x30\xaf\x28\x10\xae\xc6\xb2\xad\x85\xff\x41\x04\xc3\x18\xd1\x57\x11\xf4\x63\x64\x63\xcd\xb7\x21\x4e\x7a\x3b\x7b\x76\x10\x93\x03\xd7\x84\xfd\xbe\xf8\x3f\x81\x19\xbe\xe2\x9c\x28\x06\x06\xdb\xae\x61\x06\x21\xd5\x46\x71\xb1\x40\x95\x42\x41\x0d\x21\x1a\x7f\x65\x4a\x63\xdf\xef\xc8\x65\x2d\x30\x43\x26\x46\x83\x91\x50\x4a\xb1\x46\x65\x80\x81\x37\xa6\x33\xc2\x3d\x36\x48\xea\x95\x28\x8f\x79\xca\x04\x75\xd8\x1b\xe6\x90\xed\x0b\xa7\x80\x4a\x49\x95\x43\x9f\x4c\x78\x0d\x9b\x29\xc8\x57\xaa\xef\x79\x5f\xcd\xd1\xe8\x91\x1c\x3d\xfd\x4c\x1a\x7d\x32\x99\x28\x34\x2b\x25\xc8\x44\xf0\x26\x99\x38\x6a\xf1\x1a\x0a\xd2\xd2\x8e\xf8\x83\xca\x41\x3e\x57\xf9\x14\xea\xd6\x14\x9f\x28\x72\x9d\xa5\xe7\x9a\x78\x24\x24\xd5\xb7\x66\x0d\xaf\xe0\x30\x47\xa3\xb6\xf0\x78\xae\x9f\xd2\x29\x90\xf7\x69\xa8\x46\x17\xbf\x49\x2e\xb2\x83\x5c\xe9\x57\x4f\x21\x9d\x42\x9a\xe7\xfe\x42\x39\x06\xfc\x8b\x19\x85\x3c\x06\xef\xae\xcd\x6e\x92\x10\xcd\x8a\x96\x29\xbd\x64\x0d\xf8\xf9\x75\xeb\xbf\x1e\x70\x63\x80\xb7\x5d\x83\x2d\x0a\xea\xea\x12\xc1\xd0\x59\xd0\x6e\x50\x41\x8b\x66\x29\x2b\xdf\xc8\x6c\x03\x17\xfb\x41\xf3\xd8\x55\x96\x43\xf6\xf8\xf4\xb2\x35\x18\x77\x30\x54\xe7\x05\xd9\xa6\xb8\x77\x30\x65\x79\xee\x7b\xe4\xc9\xf6\xbb\x68\x7f\x90\xd2\x4a\xfc\x83\xa4\xf6\xdc\x65\xce\xde\xc7\xcf\x7d\x62\x94\x97\x08\xd3\xd3\xb7\xcd\x29\xe5\xc9\xc4\xb4\x9d\x4b\x9e\x24\xa7\x78\x9b\x3b\x5a\x92\xd2\x87\x39\xd5\x10\x33\x0f\x95\x72\xb4\xbb\xd8\xc0\x1c\x4c\xdb\x8d\xf5\xfb\x5a\x87\x89\x33\xb4\x45\x7f\x1b\x5a\x72\x5f\x32\x71\x58\x38\x9d\x09\x54\xc0\x85\x41\x55\xb3\x12\x8b\xd3\x25\x93\x6e\xe6\x47\xf8\xa8\xde\xdb\xa8\xde\x35\x53\x10\xdd\xba\x24\x99\xe8\xef\xdc\x94\x4b\x58\x53\xad\x7e\xf6\x65\x34\x25\x5d\xd7\x4a\xa6\x07\xcd\xeb\x64\xe2\xc1\x9a\xc3\x3a\x08\x3c\x98\x91\x20\x80\xb8\xce\x83\x82\xe0\xcd\xf5\x0e\x94\x98\xc6\x15\x6a\xc3\x05\x33\x5c\x0a\xe8\xa4\x4b\xd5\xf1\x9a\x37\x69\x4e\xc8\xfd\xe7\x2d\x20\xb0\xfd\x06\x3a\x40\xbb\x52\x7c\x8d\xca\xcb\xfe\x1e\xe6\x4e\x95\x58\xef\x4d\xfd\x62\x3b\xc2\xfd\x1d\xe9\xa7\x27\x78\x50\x37\x6c\x31\x10\x01\xdf\x5c\x80\x1b\xd9\x30\xb1\x00\x52\x0a\xcb\x73\xcc\x0e\x28\xb9\xf7\x68\x81\x86\x58\x31\x8e\xda\x1d\x1d\xde\xc5\x78\xcd\x9a\x3c\x20\xb8\x4e\x62\x60\x3d\x7e\x37\xef\xe7\x78\x83\xc6\xc4\x10\xfe\x28\xc9\x1b\xa4\xd9\x11\xd1\x36\xc2\xee\x62\x13\x62\x3e\xd0\x02\x3f\x08\xba\xe0\x66\xb9\x7a\x29\x4a\xd9\xce\x74\x57\xff\xff\xa7\x59\xf7\x2b\x01\x79\x80\xd1\x3b\x91\xc9\x69\x96\x0f\x1b\x6c\x17\x35\x3d\x98\xad\xfb\x2d\x0b\x7f\xf6\x5e\x69\xe3\x06\x1d\x5f\x6a\x47\x56\x00\xcc\xc9\x73\x08\xc7\xeb\xad\x7f\x6a\x01\x05\x18\x98\xe0\x37\x95\xb5\x74\x5d\x8f\x2d\x11\x98\x43\xdf\x0b\xd6\x8e\xd6\x61\x5d\x1f\x53\xf5\xc5\xd0\x73\xa8\xe1\xda\xd0\x2b\xa8\x93\x5a\xf3\x97\x66\xb8\xda\xfe\xda\x6b\x92\xec\xdb\x07\xc8\x8e\x38\xcd\x72\x78\x7c\xda\xe1\x65\xda\x8e\x38\xd4\xb2\x57\xcc\x86\xf3\x29\x34\x78\x7c\x03\xd2\xee\x2b\x65\xb7\xcd\xdc\x1d\x3f\xaa\x31\xb6\x80\x6e\xae\x7b\xa7\x8e\x8f\xe2\x23\x90\xdc\xb2\xce\x01\x02\x2d\xeb\x62\x3c\x1d\x24\xfe\xd2\xbd\x19\xaa\xa1\x51\xc7\xf8\xf1\xe6\xf6\x84\x6b\x1b\x11\x84\xd7\xf4\x71\xe2\x49\x72\xcb\xba\xc7\xcd\x9b\xd7\x88\x36\x7e\x20\x45\xd3\xf0\xbe\x53\x5c\x98\x3a\x3b\xe0\x59\x76\x5e\xe5\xe9\x14\x36\x79\x72\xbc\x5c\x4f\x6c\x57\x30\xed\xc3\xa8\xe4\xa2\x91\xdf\x51\xb9\xd9\x1b\x73\xf4\xaf\x00\x00\x00\xff\xff\x47\x33\xde\x33\xc2\x0c\x00\x00")

func enumTmplBytes() ([]byte, error) {
	return bindataRead(
		_enumTmpl,
		"enum.tmpl",
	)
}

func enumTmpl() (*asset, error) {
	bytes, err := enumTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "enum.tmpl", size: 3266, mode: os.FileMode(420), modTime: time.Unix(1536555868, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"enum.tmpl": enumTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"enum.tmpl": &bintree{enumTmpl, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

