// Code generated by go-bindata. DO NOT EDIT.
// sources:
// enum.tmpl (7.732kB)

package assets

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _enumTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x19\x4d\x8f\xdb\xb8\xf5\x2c\xfd\x8a\x17\x23\xd9\x95\x5c\x47\x4e\xd1\xa2\x87\x2c\xe6\x10\x64\xd3\x60\x17\xcd\x24\xc0\xa4\x7b\x09\x82\x80\x96\x9e\xc6\xdc\x91\x48\x2d\x49\xd9\x72\x55\xfd\xf7\xe2\x91\x94\x2c\x6b\xe4\x99\x34\x3b\x83\x5c\x0c\x4b\x7c\x7c\xdf\xdf\x6a\xdb\xe7\x90\x61\xce\x05\xc2\x62\x8b\x2c\x43\xb5\xe8\xba\x70\xbd\x86\xd7\x32\x43\xb8\x46\x81\x8a\x19\xcc\x60\x73\x80\x6b\xf9\x1c\x45\x5d\xd2\xe1\xcf\xef\xe1\xf2\xfd\x47\x78\xf3\xf3\x2f\x1f\x9f\x84\x61\xc5\xd2\x1b\x76\x8d\xd0\xb6\x89\xff\xdb\x75\x61\xc8\xcb\x4a\x2a\x03\x51\x08\x00\xb0\xc8\x4b\xb3\x08\xe3\xb0\x6d\x51\x64\xf0\x9c\xce\xc7\x94\x09\x2f\xd1\x4d\xa5\xd0\x74\x85\xce\x9e\xd2\xcb\x4b\x56\x22\xbc\xbc\x80\x84\x1e\x12\xfb\x44\x97\xed\xf9\x8e\x29\x4d\x67\x19\x4f\x0d\x2c\x0a\xa6\x8d\xcc\x73\x8d\x66\x01\x2f\x3c\x10\x28\x26\xae\x11\x9e\xaa\x5f\x44\x86\xcd\x8a\xae\x14\xf5\x08\xdf\x6f\xf4\xa8\xa1\xeb\xc2\xc0\x62\x24\x1c\xef\x2d\x0e\x82\xa9\x8a\x3a\xbd\x39\x45\xec\x68\xfe\x17\x72\xae\xb4\x81\xae\x6b\x5b\x78\x2a\x87\x0b\xba\xde\x78\x12\x0e\x73\x4f\xd8\x13\x00\x9e\x03\xfe\xd1\x43\x58\x59\x16\x5f\x16\x5d\xb7\x5e\xc3\xd5\x0d\xaf\x2a\xcc\xc0\x1e\xb5\x2d\x16\x1a\xed\xfb\xb6\xf5\xd0\x1f\x14\xe6\xbc\xc1\x8c\x6e\x75\x1d\x70\x0d\x8c\x0e\x7b\x15\x75\x1d\xc8\x1c\xcc\xa1\xc2\xe3\x15\xf7\xde\x2a\xbc\x17\x90\xe7\x3d\xf5\xd7\xb2\x2c\x51\x18\x3a\x18\x93\x19\xbd\x26\x78\x77\x95\xec\x77\x8e\x91\xa3\x54\x5e\xd4\x17\x56\x2b\x63\xc6\x2e\x80\x4b\xc3\x1c\xa0\x40\x78\x31\x68\xac\xeb\xe0\x2f\x30\xd2\xe0\xc0\xac\x53\x80\x87\x1f\x1b\x65\x0c\x79\x9b\xc4\x59\x6c\x4f\xbf\x58\xeb\x10\x02\x6b\xbf\x53\x93\xba\x3f\xde\xa9\x9c\xc4\x31\x79\x27\x18\x2c\xab\x82\x19\x84\x85\x36\x8a\x8b\x6b\x54\x0b\x48\xc8\x96\x14\x01\x1f\x98\xd2\xd8\xb6\x47\xbf\xec\x3a\x60\x86\xae\x18\x0d\x46\x42\x2a\xc5\x0e\x95\x01\x06\xee\x32\xbd\x23\x93\x8d\x2f\x84\x79\x2d\xd2\x39\x4c\x91\x20\xe7\x70\x17\x63\x88\x4e\x0f\x57\x80\x4a\x49\x15\x43\x1b\x06\x3c\x87\x66\x05\xf2\x86\xe4\xfb\x72\x0a\x66\x3d\xf0\x13\x21\xfa\xfc\x13\x41\xb4\x61\x10\x28\x34\xb5\x12\x74\x45\xf0\x22\x0c\xba\xb6\xe5\x39\x24\x42\xa6\x4c\x23\x78\x5f\x78\x4d\xff\xb9\xd0\x28\x34\x37\x7c\x87\x50\x11\x7f\x2b\xc8\x88\x7f\x8d\x15\xa3\x7c\x00\x85\x94\x37\x75\x45\x42\x55\x0a\x77\x28\x0c\xd4\x42\x60\x8a\x5a\x33\x75\x80\x54\x6a\x43\x0e\x59\xc8\x3d\xaa\x94\x69\x92\x7f\x50\x04\xcf\x61\x8f\x90\x49\xf1\xa3\x01\x81\x98\x81\x91\xc9\x57\x48\xe2\x6e\xeb\xe4\xa3\xfc\x17\x61\xb5\x2a\x8a\xef\x12\xad\x37\x66\xe0\xa5\x64\x25\x6a\x9b\x17\x7a\xd8\x89\xce\x5f\xc4\x2b\xc8\x4b\x93\xbc\x21\xed\xe6\xd1\xe2\x99\xa6\x30\x13\x92\x6c\xb8\x63\x05\xcf\x60\x6a\x07\xa3\x0e\xf0\xe9\x99\xfe\xbc\x58\x01\x61\x5f\x41\xcf\xe3\xaf\x92\x8b\x68\x22\x05\xfd\xea\x15\x2c\x56\xb0\x88\x63\x1f\x5e\xe4\xe5\x0f\xc8\x91\xe7\x23\x1e\x07\xaf\x4d\xb4\xa4\xf3\xa4\x32\x0a\x7a\x9f\x8b\x9a\xc9\xd5\x18\x3e\x18\x15\xc5\xb0\x9c\xb8\x74\x3b\xf0\xf6\x43\x13\x76\x61\x9f\x4d\x7a\x9c\x25\x53\x7a\xcb\x0a\x70\x25\xe3\x9d\x7b\xfa\x88\x8d\x01\x5e\x56\x05\x52\x2e\xd1\x60\xb6\x08\x86\xde\x79\xe8\x02\x15\x94\x68\xb6\x32\x3b\xcb\xcc\x08\x53\x14\x43\xf4\xe9\xf3\xe6\x60\x70\xec\xf8\x9e\x29\x77\x10\x35\xc9\x95\xd5\x7c\x14\xc7\xce\xfe\x2e\x46\xff\x2d\xca\x7b\x38\xaa\xc5\x79\x9e\x96\x53\xa6\x4e\xd0\x45\xf6\xbe\xa3\x1f\x3b\xc6\x88\x2f\xe1\xeb\x95\xf3\x04\x0b\x14\x87\x81\x29\x2b\xcb\x3c\x9d\x9c\x0b\xf7\xd8\xc6\x00\x01\x3d\xb9\x20\x19\xc6\x5e\x8d\x4a\x85\x41\x17\x06\xcb\x06\x2e\xc0\x94\xd5\x20\xbf\x93\x75\x62\x15\xa9\x20\xd1\x7f\x14\xf6\x47\xd4\x45\xc1\x85\x19\xfe\x6b\xa3\xba\x2e\xdc\x31\x35\x0d\xb2\x37\x4a\x5d\xf2\xe2\x83\x51\x70\xe1\xa4\xd1\xc9\x25\xee\xa3\x85\xab\x98\x95\xe4\xc2\xa0\xb2\xee\xc7\x8b\x45\x0c\xeb\x35\x48\x81\x50\xa1\x72\x55\x27\x97\x0a\xfa\x36\x20\x2d\x98\xde\xa2\xb6\x26\xb8\x4a\x99\x98\x6a\x9e\xde\x09\x42\x46\x28\x73\x96\x62\x72\x5e\xe7\x04\x1b\x39\x1e\x06\xf0\xb6\x8b\x21\x22\x45\x9d\xe4\x41\x07\x74\x71\xd4\x9d\x55\xd6\xad\x88\x1a\x94\x4a\x0a\xb5\x09\xef\x15\xec\x79\x86\xca\xf7\x0a\x32\x07\x4d\xfc\xb1\x4d\x81\x56\x34\x9d\x58\xa8\x4c\xf1\x1d\x2a\x5f\xd7\x77\xae\x6f\x60\xc6\x79\x92\xac\x6c\xf5\xdd\x22\x14\x5c\x1b\xab\x0b\x6c\x2a\xcc\x38\x8a\xf4\x10\x06\x7a\xcf\x4d\xba\x85\x1d\x59\xdf\x15\xd1\x88\x10\x5b\xc6\x53\x97\x6d\xcd\x3f\xfe\xfe\xf2\x0c\xcb\xbb\xd8\x43\x39\x97\x72\x60\xce\x9b\xe6\x9d\x69\x17\xbb\x84\x37\xb2\x3e\xa5\x98\x19\xef\x22\xb9\x28\x87\x51\x86\xb7\x25\x6a\xeb\xb4\x7c\x8d\xca\xab\x93\xe9\x21\x6f\x13\xbc\x53\xf3\x0a\x76\xde\x97\xb5\x51\x54\xe7\x92\x57\x46\xf2\x68\x17\xff\xe4\x0e\x46\x36\x18\xf3\x3a\x65\x93\x15\x3e\x58\x83\x80\x7c\x3b\x38\xb6\x2a\x56\x5c\x17\x5a\xf7\x8b\xeb\x23\x6d\x17\x7f\x27\xb1\x8f\xf4\x1f\x54\xfc\x53\xf0\xc1\x39\x76\x47\x97\xb9\xd7\x61\x96\xb7\x71\x90\x24\x9e\x41\xcb\x9f\x4f\x23\xe7\x72\x41\xe8\x58\xb3\x54\x96\x3d\xe9\xfa\x6b\x68\xd7\x5f\xe7\xd3\x4b\x8f\xeb\x4f\xf0\x35\x41\xbd\x3c\xc1\xed\x58\x78\x0c\xec\x79\x21\x19\xa1\xa7\x4c\xf8\xbb\x96\xa2\x2f\x6e\x1a\x70\x87\xea\x60\xb6\xb6\xe7\x21\x3f\xf2\x90\x94\x99\xb9\xf9\x91\xde\x88\xba\xdc\xa0\xba\x57\x37\x0f\x42\xe2\x51\x34\x5b\x3f\xa6\xd9\xea\x47\xb5\xdb\xf2\x98\x46\xbf\x15\xfd\x5d\xd9\x68\xf9\xbd\xb2\xef\xf2\xe1\xd2\x6f\x17\x06\x43\x83\x11\x9e\xed\x2a\xb4\x6b\x27\xd7\x6b\x70\x35\x71\x52\xe4\x5d\xbd\x74\x67\xb3\xa5\x7e\x5a\xe9\x2d\x24\x35\x7b\xe3\x4a\x3b\xd3\xf2\x1d\x7b\xbd\xd5\xd0\xfe\xb8\x4e\xfa\x7b\x70\x63\x7d\x35\x6a\x46\xbc\x0c\xad\x98\xff\xd3\xb7\xca\x79\xc1\xae\x3d\x8b\x57\x78\xab\x1b\x7d\x2b\x0b\x26\xae\x81\x80\x7c\x8f\x31\x30\x09\xc4\xe3\x5d\x2d\x12\x1a\xb2\xe6\x30\x2e\x0e\xbd\xe8\xee\xce\x9e\x93\x1c\x20\x1c\x8a\xca\xa8\xd1\x74\xbd\xf3\xdb\xbb\x79\x7c\x8b\xc6\x8c\x35\x79\x1f\x93\x6f\x91\x1a\xf9\x51\x0b\x37\xd2\xe1\xb2\xf1\x34\x3f\x52\x27\x39\x21\x7a\xcd\xcd\xb6\xde\x24\xa9\x2c\xd7\xba\xca\xff\xfa\xb7\x75\xf5\x4f\x52\xe4\x44\x47\x77\x50\x26\xa4\x51\xdc\x0f\x9f\x47\xaa\x8b\xc9\xec\x74\xb6\x8f\x9e\x69\xa1\xc9\x8e\xb6\xed\xbd\xac\x8b\x62\x32\x31\x69\xa3\xea\xd4\xb4\x34\x83\x8d\xdf\x4f\x1e\xc3\xe0\x37\x3b\xc0\x51\x8c\x06\x1b\x29\x8b\xb6\x5d\x2f\xe1\x55\x96\x81\x96\x25\x09\x96\x4b\x0a\x7f\x23\x61\xbf\x45\xb3\xa5\x36\x7b\xcb\xb5\xcf\x0b\x7b\xa6\xed\x36\x23\xab\xad\x4c\xc7\x21\x86\x9e\xa4\xb2\x13\xe2\x72\xdd\xf9\xf1\x7e\x34\xa3\x05\x57\x68\x82\x60\x44\x93\x86\x44\x70\x53\xa2\x55\xe0\x25\xee\x6f\x8b\x64\xbd\xeb\xb4\xfb\x6e\x66\x24\xb7\x61\xe1\xb7\x4c\x23\xa2\x4d\x42\xee\x7e\x01\x46\xd5\x78\x24\x18\x34\x49\xdf\xda\xdb\x61\xe2\x40\xb3\xf1\x1e\x81\x5f\x0b\xa9\xd0\x09\x6b\x1d\x79\x05\xdc\xc0\x9e\x17\x05\xfc\x5e\x6b\x03\x1b\x04\x1a\x28\x84\x1b\x7f\x5d\x37\xdd\x9b\xd4\x7b\xd1\xff\x3b\x72\xcc\x49\xf2\x27\xc6\x8e\x26\x99\xae\x09\x9a\xc4\xd9\x7a\x66\x1a\x59\x41\xce\x0a\x8d\x93\xa1\xc4\x25\xec\x29\xa2\xe4\xc8\x54\x4c\xfa\xeb\x91\x46\xc7\xa4\x1f\x8f\x55\xe1\xf3\xce\x69\x21\xfa\xe6\x04\x39\xa7\xa5\x7b\x93\x24\xcf\xe1\x89\x67\x74\x34\xcd\x0a\x5e\xf4\x5b\x9a\xdb\xa3\x15\x4b\x53\xac\x8c\x76\x89\xd5\x8e\x52\xc4\xb9\x1b\xb8\x92\x69\xda\x9d\x68\xe8\x41\x2b\xc2\x63\x09\x3c\x94\xb1\xa9\x75\x67\xaa\x9a\x8b\x95\x3b\x97\x2d\xbf\x5e\xbd\xbf\x84\x54\x2a\x85\xa9\x29\x0e\xa0\x51\x71\x56\xf0\xff\xd0\x74\x3a\x97\x9d\x8c\x04\xba\xd1\x8b\x29\x66\xc5\x1c\xa1\x9e\xdf\xbe\xb8\x35\x3d\xb9\xd5\x95\x5d\x18\x2c\xe8\xef\xc2\x8a\x2f\xbc\x5f\x8e\xc4\xa7\xde\x35\xf1\x38\x23\x31\xb5\xd9\x58\x29\x7e\x9d\xe3\x11\xcf\xef\x72\x26\x02\x67\x78\x9f\xc8\xb9\x92\xe5\x44\xe8\xd9\x98\x3f\xa1\x10\x6d\x66\x76\x3b\xa3\x4c\x16\x06\x3b\xa6\xa0\x19\x67\x07\x17\xb7\x2f\x2f\x9c\xbc\x03\xb6\x68\xb3\x82\x1f\x9a\xe9\x76\x67\x66\xb9\xe3\xa2\x5e\xb8\x30\x6f\xe2\x49\x4d\x3e\x75\x87\x53\xcf\x60\x22\xfb\x86\x4a\x45\xa6\x73\xc5\x8a\x84\xbb\x7d\x7e\x77\x51\xb8\x32\xea\x2b\xeb\x02\x59\x92\x28\x3c\x5e\xc6\x7f\xa8\x00\xb7\x9c\x7e\xb7\x18\x3f\xf6\x8b\xc7\xef\x62\xc3\x87\x87\xe1\xdb\xd8\xcc\x56\x99\x02\xb0\x6d\x7d\x87\xc3\xf3\x83\xfb\xb8\x05\xd4\xd3\xf4\xa9\xc3\x2d\xbf\xbb\x6e\x66\xf1\x67\xf7\xd2\xb6\x36\x09\x56\x0e\xb7\xfd\x57\x8e\x39\x50\x27\x1c\x05\x9b\xdd\x76\xc9\x1c\x2a\xa9\x35\xdf\x14\xfd\x8a\xaa\x5f\x8f\xc9\x7c\x72\xdf\xeb\x7e\x06\x69\x14\xc3\xa7\xcf\xc7\x16\xcd\x94\x15\x05\x52\xc9\x6e\x30\xea\xdf\xaf\xa0\xc0\xf9\xa5\x7a\x4c\xb3\x9d\xac\x0e\x91\x5d\xb3\xce\x42\x0c\x26\x31\x65\x75\xd4\xbb\xfd\x0c\x39\xa3\x92\x77\xac\xb2\x0a\x81\x92\x55\x63\x7d\xba\xf6\xc2\x7f\xc5\x98\x34\x18\xde\x50\x5f\x33\x5b\xf4\x5e\x30\xea\x49\x79\x4e\x0f\x67\xbe\x7f\xbc\x63\xd5\xa7\xe6\xd6\x97\x0e\x6d\xd4\xd8\xd7\xf2\xd2\x24\x57\x95\xe2\xc2\xe4\xd1\xa4\xb5\x8d\x9e\x65\xf1\x62\x05\x4d\x1c\xce\x8b\xeb\xc2\xc7\x0a\x4c\xad\xe4\x48\xe4\xa4\xff\x80\x83\x27\x3e\xfa\xbf\x00\x00\x00\xff\xff\xb6\x40\xc6\xeb\x34\x1e\x00\x00")

func enumTmplBytes() ([]byte, error) {
	return bindataRead(
		_enumTmpl,
		"enum.tmpl",
	)
}

func enumTmpl() (*asset, error) {
	bytes, err := enumTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "enum.tmpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xf1, 0x5f, 0x4a, 0xa1, 0xcc, 0xc9, 0xff, 0x14, 0xd8, 0x9a, 0xf3, 0x9b, 0xd9, 0x76, 0x1f, 0x3a, 0x10, 0x63, 0x99, 0xd, 0x9a, 0x3f, 0x38, 0xec, 0x12, 0xa4, 0x54, 0x8, 0xbe, 0x3a, 0xed, 0x58}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"enum.tmpl": enumTmpl,
}

// AssetDebug is true if the assets were built with the debug flag enabled.
const AssetDebug = false

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"enum.tmpl": {enumTmpl, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
