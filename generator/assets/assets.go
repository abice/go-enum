// Code generated by go-bindata. DO NOT EDIT.
// sources:
// enum.tmpl (5.719kB)

package assets

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _enumTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x58\x5f\x6f\xdb\xba\x15\x7f\xb6\x3e\xc5\xa9\x90\x6e\x52\xe6\xca\x19\x36\xec\xa1\x43\x1e\x86\xde\xbb\xe0\x0e\x6b\x5a\xc0\xd9\x7d\x09\x82\x82\x91\x8e\x1c\x2e\x12\xa9\x4b\x52\x8e\x0c\x4d\xdf\x7d\x38\x24\x25\xcb\x8a\xec\x64\x6b\x8b\xe6\x21\x90\xc5\xf3\xe7\x77\xfe\x1f\xb1\x6d\xdf\x41\x86\x39\x17\x08\xe1\x03\xb2\x0c\x55\xd8\x75\xc1\x6a\x05\x1f\x64\x86\xb0\x41\x81\x8a\x19\xcc\xe0\x7e\x07\x1b\xf9\x0e\x45\x5d\xd2\xe1\x4f\x9f\xe0\xfa\xd3\x0d\xfc\xfc\xd3\x2f\x37\x6f\x82\xa0\x62\xe9\x23\xdb\x20\xb4\x6d\xe2\x1f\xbb\x2e\x08\x78\x59\x49\x65\x20\x0a\x00\x00\xc2\xbc\x34\x61\x10\x07\x6d\x8b\x22\x83\x77\x74\x3e\xd6\x4c\x72\x49\x6f\x2a\x85\x26\x16\x3a\x3b\xa3\x97\xd7\xac\x44\x78\x7f\x09\x09\xfd\x48\xec\x2f\x62\xb6\xe7\x5b\xa6\x34\x9d\x65\x3c\x35\x10\x16\x4c\x1b\x99\xe7\x1a\x4d\x08\x17\x9e\x08\x14\x13\x1b\x84\x33\xf5\x8b\xc8\xb0\x59\x12\x4b\x51\x8f\xe4\xfd\x4a\x3f\x35\x74\x5d\xb0\xb0\x12\x49\xc6\x27\x2b\x83\x68\xaa\xa2\x4e\x1f\x0f\x05\x3b\x9d\xff\x81\x9c\x2b\x6d\xa0\xeb\xda\x16\xce\xe4\xc0\xa0\xeb\x7b\xaf\xc2\x49\xee\x15\x7b\x05\xc0\x73\xc0\xdf\x7a\x0a\x6b\x4b\xf8\x25\xec\xba\xd5\x0a\xd6\x8f\xbc\xaa\x30\x03\x7b\xd4\xb6\x58\x68\xb4\xef\xdb\xd6\x53\x7f\x56\x98\xf3\x06\x33\xe2\xea\x3a\xe0\x1a\x18\x1d\xf6\x2e\xea\x3a\x90\x39\x98\x5d\x85\x7b\x16\xf7\xde\x3a\xbc\x37\x90\xe7\xbd\xf6\x0f\xb2\x2c\x51\x18\x3a\x18\xab\x19\xbd\x26\x7a\xc7\x4a\xf1\x3b\x06\x64\x6f\x95\x37\xf5\xc2\x7a\x65\x0c\xec\x12\xb8\x34\xcc\x11\x0a\x84\x8b\xc1\x63\x5d\x07\x7f\x80\x91\x07\x07\xb0\xce\x01\x9e\x7e\x1c\x94\x31\xe5\x73\x15\x47\xa5\x9d\x7d\xb1\xd1\x21\x01\x36\x7e\x87\x21\x75\x0f\x3e\xa9\x9c\xc5\x31\x65\x27\x18\x2c\xab\x82\x19\x84\x50\x1b\xc5\xc5\x06\x55\x08\x09\xc5\x92\x2a\xe0\x33\x53\x1a\xdb\x76\x9f\x97\x5d\x07\xcc\x10\x8b\xd1\x60\x24\xa4\x52\x6c\x51\x19\x60\xe0\x98\xe9\x1d\x85\x6c\xcc\x10\xe4\xb5\x48\xe7\x24\x45\x82\x92\xc3\x31\xc6\x10\x1d\x1e\x2e\x01\x95\x92\x2a\x86\x36\x58\xf0\x1c\x9a\x25\xc8\x47\xb2\xef\xcb\x21\x99\xcd\xc0\x5b\x12\x74\xf7\x57\xa2\x68\x83\xc5\x42\xa1\xa9\x95\x20\x16\xc1\x8b\x60\xd1\xb5\x2d\xcf\x21\x11\x32\x65\x1a\xc1\xe7\xc2\x07\x7a\xe6\x42\xa3\xd0\xdc\xf0\x2d\x42\x45\xf8\x96\x90\x11\x7e\x8d\x15\xa3\x7e\x00\x85\x94\x8f\x75\x45\x46\x55\x0a\xb7\x28\x0c\xd4\x42\x60\x8a\x5a\x33\xb5\x83\x54\x6a\x43\x09\x59\xc8\x27\x54\x29\xd3\x64\xff\xe0\x08\x9e\xc3\x13\x42\x26\xc5\xef\x0d\x08\xc4\x0c\x8c\x4c\x5e\x61\x89\xe3\xd6\xc9\x8d\xfc\x27\x49\xb5\x2e\x8a\x4f\x99\xd6\x07\x73\xe1\xad\x64\x25\x6a\xdb\x17\x7a\xda\x89\xcf\x2f\xe2\x25\xe4\xa5\x49\x7e\x26\xef\xe6\x51\xf8\x56\x53\x99\x09\x49\x31\xdc\xb2\x82\x67\x30\x8d\x83\x51\x3b\xb8\x7d\xab\xef\xc2\x25\x90\xf4\x25\xf4\x18\xff\x21\xb9\x88\x26\x56\xd0\x7f\xbd\x84\x70\x09\x61\x1c\xfb\xf2\xa2\x2c\xff\x86\x88\x3c\x8e\x78\x5c\xbc\xb6\xd1\x92\xcf\x93\xca\x28\xe8\x73\x2e\x6a\x26\xac\x31\x7c\x36\x2a\x8a\xe1\x7c\x92\xd2\xed\x80\xed\x77\x4d\xd0\x05\x7d\x37\xe9\x65\x96\x4c\xe9\x07\x56\x80\x1b\x19\x1f\xdd\xaf\x1b\x6c\x0c\xf0\xb2\x2a\x90\x7a\x89\x06\xf3\x80\x60\xe8\x9d\xa7\x2e\x50\x41\x89\xe6\x41\x66\x47\xc1\x8c\x24\x45\x31\x44\xb7\x77\xf7\x3b\x83\xe3\xc4\xf7\xa0\xdc\x41\xd4\x24\x6b\xeb\xf9\x28\x8e\x5d\xfc\x5d\x8d\xfe\x4b\x94\x2f\x20\xaa\xc5\x71\x4c\xe7\x53\x50\x07\xe2\x22\xcb\xef\xf4\xc7\x0e\x18\xe1\x12\x7e\x5e\xb9\x4c\xb0\x44\x71\xb0\x30\x65\x65\xc1\xd3\xc9\xb1\x72\x8f\x6d\x0d\x10\xd1\x9b\x4b\xb2\x61\x9c\xd5\xa8\x54\xb0\xe8\x82\xc5\x79\x03\x97\x60\xca\x6a\xb0\xdf\xd9\x3a\x89\x8a\x54\x90\xe8\xdf\x0a\xfb\x4f\xd4\x45\xc1\x85\x19\x9e\xb5\x51\x2e\x56\xeb\x94\x89\xa9\x4b\xe8\x9d\x40\x05\x5c\x18\x54\x39\x4b\x31\x39\xee\x0c\xa2\x8d\xdc\x38\x1d\xc8\xdb\x2e\x86\x88\x2c\x38\x68\x50\x8e\xe8\x72\x6f\x94\xb5\xe2\x59\xaa\x0f\xd6\x92\xa5\xb6\x13\xfd\x0d\x9e\x78\x86\xca\x0f\x71\x99\x83\x26\x7c\xec\xbe\x40\x3b\xe9\x74\x12\x2c\xf4\x13\x37\xe9\x03\x6c\xc9\xb1\x6e\x3e\x45\x74\x64\x55\xdb\xa6\x36\xc1\xfd\xbe\x57\x7f\xbe\xf5\x04\x47\xce\xfb\x63\x2e\xcc\xfb\x23\x90\xb7\xf1\x9e\xe6\x2f\x7f\x7e\x91\xaa\x7e\x8d\xa8\xfa\x75\xb2\xce\x4f\xc8\x3a\x3f\xa0\x3a\x2e\x6c\x44\x77\x0a\xda\x84\xec\x35\xf2\x5c\xee\x3b\x3a\x97\xf6\xf3\x59\xbf\x97\xfc\x5a\x8e\xbd\x0e\x57\x78\x2f\x73\xf8\x3a\xdc\x52\xcb\xed\x82\xc5\x50\x38\xc1\xd1\x6a\xd1\xae\x4d\xae\x56\xe0\x76\xb8\x49\x8d\x64\x8a\x6f\x51\xb9\xb3\xd9\x4a\x99\x16\x8a\xa5\xa4\x26\xe6\x38\xdd\x66\x38\xd3\xca\xf6\x3d\x6c\x39\x94\xb5\x9b\x10\x3f\x02\x8d\x0d\x75\xd4\x8c\xb0\x0c\x2d\xc6\x3f\xf4\x23\x20\x2f\xd8\xc6\x43\x5c\xe3\xb3\x2e\x7b\x25\x0b\x26\x36\x40\x44\x7e\x27\x1e\x40\x02\x61\x3c\xd5\x61\xd0\x50\x83\x19\xd6\xa0\xa1\xc7\x6e\x4f\xf6\xd2\x2d\x2b\xe2\x60\x28\xe2\x51\x03\x75\x33\xe1\xea\x34\xc6\x2b\x34\x66\xec\xc9\x97\x40\x5e\x21\x0d\xa8\x51\x07\x1c\xf9\xf0\xbc\xf1\x3a\x6f\x68\x2f\x9f\x28\xdd\x70\xf3\x50\xdf\x27\xa9\x2c\x57\xba\xca\xff\xf8\xa7\x55\xf5\x77\x72\xe4\xc4\x47\x27\x34\x93\xd0\x28\xee\x97\xaa\xbd\xd6\x70\xb2\x13\x1c\x9d\x0f\x33\xa3\x81\xe2\x68\x3f\x22\xae\xeb\xa2\x98\x6c\x02\xda\xa8\x3a\x35\x2d\xed\x16\x87\x1b\xc2\xe1\x4a\xbb\xf8\xd5\x2e\x26\x0b\xfa\xbb\x97\xd2\x8e\x62\x6b\xc3\x35\x3e\x3d\x97\x6a\x03\x7c\x38\x3f\x9a\x19\xe5\x36\x33\x9b\xa4\x9f\x39\x31\xac\x56\xb0\xa3\x6d\xea\x09\x81\x6f\x84\x54\x08\xe6\x81\x6b\x97\x22\x4b\xe0\x06\x9e\x78\x51\xc0\xbf\x6b\x6d\xe0\x1e\x81\x26\x9d\x70\x0b\x93\x1b\x12\xbd\xb3\x7c\x7c\xfe\xd7\x59\x38\x07\xf0\x2b\xe6\x61\x93\x4c\x17\xcb\x26\x71\x5e\x9c\x19\x93\x4b\xc8\x59\xa1\x71\x32\x2d\x5d\x03\x9c\x0a\x4a\xf6\xa0\x62\xf2\x5f\x2f\xd4\x62\x72\x00\xe2\xb1\x2b\x7c\x45\x8f\x72\xe3\x6b\x5a\xcf\x9c\x97\x5e\x6c\x3f\x3c\x87\x37\x1e\xe8\x68\xff\x11\xbc\xe8\xf7\x7a\xbb\x19\x8c\xb9\x81\xa5\x29\xd2\x47\x97\x6d\x59\x90\x4b\x0b\xc6\x79\x59\x27\xd3\x86\x36\xf1\xd0\x37\xed\xb5\xdf\xcb\xe0\x61\x40\x4c\xa3\x3b\x33\x2f\x44\x06\xbe\xd0\x47\x8f\x3c\x07\x26\xb2\xff\xa3\xe8\xd7\x46\xf9\xba\x27\xa8\xcf\xcf\x4f\x17\xf7\xda\xa8\x57\xd6\xf7\xda\xa8\xef\x5c\xe2\xdf\x2a\xa2\x16\xe9\x0f\x0b\xea\x7e\xf4\xee\xaf\xce\x86\xbb\x89\xe1\xfa\x6c\xe6\xc3\x13\x2e\x69\x2e\xf8\x61\xc1\xf3\x9d\xbb\xff\x02\x1a\x0f\x7d\xd5\xbb\xef\xe3\xae\xdb\x32\x35\x27\x41\xdb\x66\x24\x58\x39\x70\xfb\x8b\x90\x39\x52\x67\x9c\x06\x06\x05\x77\x37\x01\x95\xd4\x9a\xd3\xe6\xee\xe7\x95\x2b\x4f\x3a\x99\xd8\xef\x7c\x3f\x23\x34\x8a\xe1\xf6\x6e\x3f\xed\x4c\x59\xd1\x06\x50\xb2\x47\x8c\xfa\xf7\x4b\x28\x70\xfe\xbb\x9b\xd6\xbf\x54\x56\xbb\xc8\x7e\x89\xcd\x52\x0c\x21\xa1\xef\xab\xc1\xef\xf6\xa6\x72\xc6\x25\x1f\x59\x65\x1d\x02\x25\xab\xc6\xfe\x74\xf3\xc4\x5f\x74\x4c\x26\x8a\x0f\xd4\x6b\xd6\xb4\x3e\x0b\x46\xe3\x9d\xe7\xf4\xe3\xc8\x15\xc9\x47\x56\xdd\x36\xcf\x2e\x43\xb4\x51\xe3\x5c\xcb\x4b\x93\xac\x2b\xc5\x85\xc9\xa3\xc9\x96\x10\xbd\xcd\xe2\x70\x09\x4d\x1c\xcc\x9b\xeb\xca\xc7\x1a\x4c\x9f\xcc\x23\x93\x93\xfe\x8e\x07\x0f\x72\xf4\xbf\x01\x00\x00\xff\xff\xaf\xdc\xc1\xf6\x57\x16\x00\x00")

func enumTmplBytes() ([]byte, error) {
	return bindataRead(
		_enumTmpl,
		"enum.tmpl",
	)
}

func enumTmpl() (*asset, error) {
	bytes, err := enumTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "enum.tmpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xf6, 0xfd, 0xb4, 0x15, 0x36, 0xa, 0x12, 0x4f, 0x45, 0x22, 0x59, 0x39, 0x74, 0x56, 0x3d, 0x76, 0x7f, 0x54, 0x7f, 0x7b, 0x59, 0x92, 0x56, 0xa8, 0x88, 0xa2, 0x53, 0x61, 0xfc, 0x36, 0x5c, 0xfb}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"enum.tmpl": enumTmpl,
}

// AssetDebug is true if the assets were built with the debug flag enabled.
const AssetDebug = false

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"enum.tmpl": {enumTmpl, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
