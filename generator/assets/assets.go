// Code generated by go-bindata. DO NOT EDIT.
// sources:
// enum.tmpl (5.514kB)

package assets

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _enumTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x58\x5f\x6f\xdb\x38\x12\x7f\xb6\x3e\xc5\x54\x48\xef\xa4\x9c\x2b\xe7\x70\x87\x7b\xe8\x21\x0f\x87\xb6\x17\x74\xb1\x4d\x0b\x24\xdb\x97\x20\x28\x18\x69\xe4\x70\x23\x91\x2a\x49\x39\x36\xb4\xfa\xee\x8b\x21\x29\x59\x96\x65\x27\xdb\xed\x62\x37\x0f\x81\x25\xce\x9f\xdf\xfc\x1f\xaa\x69\x5e\x41\x86\x39\x17\x08\xe1\x3d\xb2\x0c\x55\xd8\xb6\xc1\x62\x01\x6f\x64\x86\xb0\x44\x81\x8a\x19\xcc\xe0\x6e\x03\x4b\xf9\x0a\x45\x5d\xd2\xe1\xdb\x8f\x70\xf9\xf1\x1a\xde\xbd\x7d\x7f\xfd\x22\x08\x2a\x96\x3e\xb0\x25\x42\xd3\x24\xfe\x67\xdb\x06\x01\x2f\x2b\xa9\x0c\x44\x01\x00\x40\x98\x97\x26\x0c\xe2\xa0\x69\x50\x64\xf0\x8a\xce\x87\x9a\x49\x2e\xe9\x4d\xa5\xd0\xc4\x42\x67\x27\xf4\xf2\x92\x95\x08\xaf\xcf\x21\xa1\x87\xc4\x3e\x11\xb3\x3d\x5f\x31\xa5\xe9\x2c\xe3\xa9\x81\xb0\x60\xda\xc8\x3c\xd7\x68\x42\x38\xf3\x44\xa0\x98\x58\x22\x9c\xa8\xf7\x22\xc3\xf5\x9c\x58\x8a\x7a\x20\xef\x33\x3d\x6a\x68\xdb\x60\x66\x25\x92\x8c\x8f\x56\x06\xd1\x54\x45\x9d\x3e\xec\x0a\x76\x3a\x7f\x81\x9c\x2b\x6d\xa0\x6d\x9b\x06\x4e\x64\xcf\xa0\xeb\x3b\xaf\xc2\x49\xee\x14\x7b\x05\xc0\x73\xc0\xaf\x1d\x85\xb5\x25\xfc\x12\xb6\xed\x62\x01\x57\x0f\xbc\xaa\x30\x03\x7b\xd4\x34\x58\x68\xb4\xef\x9b\xc6\x53\x7f\x52\x98\xf3\x35\x66\xc4\xd5\xb6\xc0\x35\x30\x3a\xec\x5c\xd4\xb6\x20\x73\x30\x9b\x0a\xb7\x2c\xee\xbd\x75\x78\x67\x20\xcf\x3b\xed\x6f\x64\x59\xa2\x30\x74\x30\x54\x33\x78\x4d\xf4\x8e\x95\xe2\x77\x08\xc8\xd6\x2a\x6f\xea\x99\xf5\xca\x10\xd8\x39\x70\x69\x98\x23\x14\x08\x67\xbd\xc7\xda\x16\xfe\x01\x03\x0f\xf6\x60\x9d\x03\x3c\xfd\x30\x28\x43\xca\x7d\x15\x07\xa5\x9d\x7c\xb1\xd1\x21\x01\x36\x7e\xbb\x21\x75\x3f\x7c\x52\x39\x8b\x63\xca\x4e\x30\x58\x56\x05\x33\x08\xa1\x36\x8a\x8b\x25\xaa\x10\x12\x8a\x25\x55\xc0\x27\xa6\x34\x36\xcd\x36\x2f\xdb\x16\x98\x21\x16\xa3\xc1\x48\x48\xa5\x58\xa1\x32\xc0\xc0\x31\xd3\x3b\x0a\xd9\x90\x21\xc8\x6b\x91\x4e\x49\x8a\x04\x25\x87\x63\x8c\x21\xda\x3d\x9c\x03\x2a\x25\x55\x0c\x4d\x30\xe3\x39\xac\xe7\x20\x1f\xc8\xbe\x2f\xbb\x64\x36\x03\x6f\x48\xd0\xed\x7f\x89\xa2\x09\x66\x33\x85\xa6\x56\x82\x58\x04\x2f\x82\x59\xdb\x34\x3c\x87\x44\xc8\x94\x69\x04\x9f\x0b\x6f\xe8\x37\x17\x1a\x85\xe6\x86\xaf\x10\x2a\xc2\x37\x87\x8c\xf0\x6b\xac\x18\xf5\x03\x28\xa4\x7c\xa8\x2b\x32\xaa\x52\xb8\x42\x61\xa0\x16\x02\x53\xd4\x9a\xa9\x0d\xa4\x52\x1b\x4a\xc8\x42\x3e\xa2\x4a\x99\x26\xfb\x7b\x47\xf0\x1c\x1e\x11\x32\x29\xfe\x6e\x40\x20\x66\x60\x64\xf2\x0c\x4b\x1c\xb7\x4e\xae\xe5\x8f\x24\xd5\xba\x28\x3e\x66\x5a\x17\xcc\x99\xb7\x92\x95\xa8\x6d\x5f\xe8\x68\x47\x3e\x3f\x8b\xe7\x90\x97\x26\x79\x47\xde\xcd\xa3\xf0\xa5\xa6\x32\x13\x92\x62\xb8\x62\x05\xcf\x60\x1c\x07\xa3\x36\x70\xf3\x52\xdf\x86\x73\x20\xe9\x73\xe8\x30\xfe\x20\xb9\x88\x46\x56\xd0\x7f\x3d\x87\x70\x0e\x61\x1c\xfb\xf2\xa2\x2c\xff\x8e\x88\x3c\x8e\x78\x58\xbc\xb6\xd1\x92\xcf\x93\xca\x28\xe8\x72\x2e\x5a\x8f\x58\x63\xf8\x64\x54\x14\xc3\xe9\x28\xa5\x9b\x1e\xdb\xdf\xd6\x41\x1b\x74\xdd\xa4\x93\x59\x32\xa5\xef\x59\x01\x6e\x64\x7c\x70\x4f\xd7\xb8\x36\xc0\xcb\xaa\x40\xea\x25\x1a\xcc\x3d\x82\xa1\x77\x9e\xba\x40\x05\x25\x9a\x7b\x99\x1d\x04\x33\x90\x14\xc5\x10\xdd\xdc\xde\x6d\x0c\x0e\x13\xdf\x83\x72\x07\xd1\x3a\xb9\xb2\x9e\x8f\xe2\xd8\xc5\xdf\xd5\xe8\x4f\xa2\x7c\x02\x51\x2d\x0e\x63\x3a\x1d\x83\xda\x11\x17\x59\x7e\xa7\x3f\x76\xc0\x08\x97\xf0\xf3\xca\x65\x82\x25\x8a\x83\x99\x29\x2b\x0b\x9e\x4e\x0e\x95\x7b\x6c\x6b\x80\x88\x5e\x9c\x93\x0d\xc3\xac\x46\xa5\x82\x59\x1b\xcc\x4e\xd7\x70\x0e\xa6\xac\x7a\xfb\x9d\xad\xe3\xa8\xe8\xaf\x5d\x44\xae\x52\x26\xc6\x86\xd3\x3b\x81\x0a\xb8\x30\xa8\x72\x96\x62\x72\xd8\x64\xa2\x8d\xdc\xd0\xec\xc9\x9b\x36\x86\x88\x70\xee\xb4\x21\x47\x74\xbe\x85\x6e\xb1\xee\x25\x74\x6f\x13\xd9\x63\xfb\xcd\xff\xe0\x91\x67\xa8\xfc\xa8\x96\x39\x68\xc2\xc7\xee\x0a\xb4\xf3\x4c\x27\xc1\x4c\x3f\x72\x93\xde\xc3\x8a\xdc\xe7\xa6\x50\x44\x47\x56\xb5\x6d\x5d\x23\xdc\xaf\x3b\xf5\xa7\x2b\x4f\x70\xe0\xbc\x3b\xe6\xc2\xbc\x3e\x00\x79\x15\x6f\x69\xfe\xf3\xef\x27\xa9\xea\xe7\x88\xaa\x9f\x27\xeb\xf4\x88\xac\xd3\x1d\xaa\xc3\xc2\x06\x74\xc7\xa0\x8d\xc8\x9e\x23\xcf\x65\xb8\xa3\x73\xc9\x3d\x9d\xdb\x5b\xc9\xcf\xe5\xd8\xea\x70\xe5\xf5\x34\x87\xaf\xb6\x15\x35\xd6\x36\x98\xf5\xe5\xe1\xfb\x80\x5b\xc6\x46\x65\x90\x29\xbe\x42\xe5\xce\x26\x8b\x61\x5c\x0b\x96\x92\xba\x91\xe3\x74\x2b\xde\x44\x4f\xda\x36\xa3\xf9\x81\xfa\xcc\x0b\xb6\xec\x0a\x14\xf7\x1a\xd3\x85\x2c\x98\x58\x02\x11\xf9\x35\xb2\x07\x07\x84\xed\x58\xb9\xa2\xa1\x6a\xed\x37\x87\xbe\x2d\xad\x8e\xb6\x9f\x15\x2b\xe2\xa0\xaf\x88\x41\xcf\x71\xee\xbb\x38\x8e\xf1\x02\x8d\x19\x7a\xf0\x29\x90\x17\x48\x3d\x7d\xd0\x4e\x06\xbe\x3b\x5d\x7b\x9d\xd7\xb4\xca\x8e\x94\x2e\xb9\xb9\xaf\xef\x92\x54\x96\x0b\x5d\xe5\xff\xfc\xd7\xa2\xfa\x3f\x39\x72\xe4\xa3\x23\x9a\x49\x68\x14\x77\x7b\xc8\x56\x6b\x38\x1a\xa3\xfb\x21\x93\xca\x76\x55\x51\x17\x05\x17\xa6\xff\xad\xdd\x48\xb5\x7b\xf7\x65\x5d\x14\xa3\xe1\xa9\x8d\xaa\x53\xd3\xd0\x38\xde\x1d\xaa\xbb\x5b\xe0\xec\xb3\x9d\xe5\x33\xfa\xbb\x93\xd2\x4e\x2f\x6b\xc3\x25\x3e\xee\x4b\xb5\x01\xde\x6d\xc6\xeb\x09\xe5\x36\x23\xd7\x49\xd7\xc0\x63\x58\x2c\x60\x43\x0b\xc8\x23\x02\x5f\x0a\xa9\x10\xcc\x3d\xd7\x2e\x45\xe6\xc0\x0d\x3c\xf2\xa2\x80\x9f\x6b\x6d\xe0\x0e\x81\xc6\x86\x70\x3b\x86\xeb\xb8\x9d\xb3\x7c\x7c\x7e\xeb\x60\x99\x02\xf8\x3b\x86\xcb\x3a\x19\xef\x62\xeb\xc4\x79\x71\x62\xe6\xcc\x21\x67\x85\xc6\xd1\xe8\x71\xdd\x64\x2c\x28\xd9\x82\x8a\xc9\x7f\x9d\x50\x8b\xc9\x01\x88\x87\xae\xd8\x4e\xdc\x2e\x37\x5c\x5d\x7f\x5b\xcb\x99\xf2\xd2\x93\x6d\x87\xe7\xf0\xc2\x03\x1d\xac\x0c\x82\x17\xdd\x2a\x6c\xc7\xec\x90\x1b\x58\x9a\x22\xdd\x53\x6c\xab\x87\x5c\x5a\x30\xce\xcb\xba\x8f\xb4\x3b\x8d\xc6\x1e\x1a\x74\x35\xb7\xc0\xfe\x15\x0d\xee\x5b\xf1\x38\xba\x7b\x9d\x99\xd6\x64\xf0\x85\x3e\xf8\xc9\x73\x60\x22\xfb\x86\xa2\xbf\x32\xca\xd7\x3d\x41\xdd\x3f\x3f\x5e\xdc\x57\x46\x3d\xb3\xbe\xaf\x8c\xfa\x83\x4b\xfc\x7b\x45\xd4\x22\xfd\xd3\x82\xea\xdb\xf8\xce\xd7\xa6\xfe\x3a\xdf\x7f\x71\x9a\xb8\xab\xc1\x39\xcd\x05\x3f\x2c\x78\xbe\x71\x9f\x8c\x80\xc6\x43\x57\xf5\xee\x4a\xd9\xb6\x2b\xa6\xa6\x24\x68\xdb\x8c\x04\x2b\x7b\x6e\xff\xed\x60\x8a\xd4\x19\xa7\x81\x41\xc1\xdd\xe5\xb9\x92\x5a\x73\x5a\x83\xfd\xbc\x72\xe5\x49\x27\x23\xfb\x9d\xef\x27\x84\x46\x31\xdc\xdc\x6e\xa7\x9d\x29\x2b\xda\x00\x4a\xf6\x80\x51\xf7\x7e\x0e\x05\x4e\x5f\x55\x69\x97\x4a\x65\xb5\x89\xec\xe5\x65\x92\xa2\x0f\x09\x5d\x49\x7a\xbf\xdb\x8f\x7b\x13\x2e\xf9\xc0\x2a\xeb\x10\x28\x59\x35\xf4\xa7\x9b\x27\xfe\xdb\xc0\x68\xa2\xf8\x40\x3d\x67\x3d\xeb\xb2\x60\x30\xde\x79\x4e\x0f\x07\xbe\x2a\x7c\x60\xd5\xcd\x7a\xef\xfb\x81\x36\x6a\x98\x6b\x74\xfb\xbe\xaa\x14\x17\x26\x8f\x46\x5b\x42\xf4\x32\x8b\xc3\x39\xac\xe3\x60\xda\x5c\x57\x3e\xd6\x60\xba\x65\x0e\x4c\x4e\xba\xcf\x22\xb8\x93\xa3\xbf\x06\x00\x00\xff\xff\x44\xb7\x4b\x51\x8a\x15\x00\x00")

func enumTmplBytes() ([]byte, error) {
	return bindataRead(
		_enumTmpl,
		"enum.tmpl",
	)
}

func enumTmpl() (*asset, error) {
	bytes, err := enumTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "enum.tmpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x91, 0x83, 0x59, 0xf5, 0x9, 0xb5, 0x90, 0x75, 0xa5, 0xa6, 0xbc, 0x1e, 0xdd, 0x5c, 0x4a, 0x97, 0x11, 0x7f, 0xb2, 0x14, 0xb0, 0xd7, 0x7c, 0x98, 0xd3, 0xdb, 0xe9, 0x6, 0x47, 0xec, 0xb, 0x74}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"enum.tmpl": enumTmpl,
}

// AssetDebug is true if the assets were built with the debug flag enabled.
const AssetDebug = false

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"enum.tmpl": {enumTmpl, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
