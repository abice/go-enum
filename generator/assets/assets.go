// Code generated by go-bindata. DO NOT EDIT.
// sources:
// enum.tmpl (3.539kB)

package assets

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _enumTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x57\x5f\x6f\xdb\x36\x10\x7f\xb6\x3e\xc5\x55\x48\x31\x29\x53\xe4\x0c\x7b\xeb\xe0\xa7\xb4\x0b\x3a\x2c\x4d\x81\x64\x7b\x09\x82\x80\x91\x4e\x36\x61\x89\x54\x49\x5a\xb1\xa1\xe9\xbb\x0f\x47\x52\xb2\xac\xd8\x69\x1f\xb6\x97\xc0\xe2\xfd\xff\xdd\xef\xc8\x4b\xdb\x5e\x40\x8e\x05\x17\x08\xe1\x0a\x59\x8e\x2a\xec\xba\x60\x3e\x87\x2b\x99\x23\x2c\x51\xa0\x62\x06\x73\x78\xde\xc1\x52\x5e\xa0\xd8\x54\x24\xfc\x78\x0b\x5f\x6e\xef\xe1\xd3\xc7\xcf\xf7\xef\x82\xa0\x66\xd9\x9a\x2d\x11\xda\x36\xf5\x3f\xbb\x2e\x08\x78\x55\x4b\x65\x20\x0a\x00\x00\xc2\xa2\x32\x61\x10\x07\x6d\x8b\x22\x87\x0b\x92\x8f\x23\x93\x5f\x8a\x9b\x49\xa1\xc9\x84\x64\x67\x74\xf8\x85\x55\x08\x1f\x16\x90\xd2\x47\x6a\xbf\xc8\xd8\xca\x1b\xa6\x34\xc9\x72\x9e\x19\x08\x4b\xa6\x8d\x2c\x0a\x8d\x26\x84\x4b\xaf\x04\x8a\x89\x25\xc2\x99\xfa\x2c\x72\xdc\x26\x64\x52\x6e\x46\xfe\xfe\xa6\x4f\x0d\x5d\x17\xcc\xac\x47\xf2\x71\x6b\x7d\x90\x4e\x5d\x6e\xb2\xf5\xa1\x63\x17\xf3\x1f\x28\xb8\xd2\x06\xba\xae\x6d\xe1\x4c\x0e\x06\x7a\xf3\xec\x43\x38\xcf\x7d\x60\x1f\x00\x78\x01\xf8\xad\xd7\xb0\xb5\x84\x4f\x61\xd7\xcd\xe7\x70\xb7\xe6\x75\x8d\x39\x58\x51\xdb\x62\xa9\xd1\x9e\xb7\xad\xd7\xfe\xaa\xb0\xe0\x5b\xcc\xc9\xaa\xeb\x80\x6b\x60\x24\xec\x21\xea\x3a\x90\x05\x98\x5d\x8d\x7b\x13\x77\x6e\x01\xef\x0b\xe4\x45\x1f\xfd\x4a\x56\x15\x0a\x43\x82\x71\x98\xd1\x31\xe9\x3b\x53\xea\xdf\xa9\x44\xf6\x55\xf9\x52\x2f\x2d\x2a\xe3\xc4\x16\xc0\xa5\x61\x4e\x51\x20\x5c\x0e\x88\x75\x1d\xfc\x0c\x23\x04\x87\x64\x1d\x00\x5e\x7f\xdc\x94\xb1\xe6\xeb\x10\x27\xbd\x9d\x3d\xd9\xee\x90\x03\xdb\xbf\xc3\x96\xba\x1f\x9e\x54\xae\xe2\x98\xd8\x09\x06\xab\xba\x64\x06\x21\xd4\x46\x71\xb1\x44\x15\x42\x4a\xbd\xa4\x09\xf8\xca\x94\xc6\xb6\xdd\xf3\xb2\xeb\x80\x19\x32\x31\x1a\x8c\x84\x4c\x8a\x06\x95\x01\x06\xce\x98\xce\xa8\x65\x63\x83\xa0\xd8\x88\xec\x98\xa7\x48\x10\x39\x9c\x61\x0c\xd1\xa1\x30\x01\x54\x4a\xaa\x18\xda\x60\xc6\x0b\xd8\x26\x20\xd7\x54\xdf\xd3\xa1\x9a\x65\xe0\x03\x39\x7a\xfc\x8d\x34\xda\x60\x36\x53\x68\x36\x4a\x90\x89\xe0\x65\x30\xeb\xda\x96\x17\x90\x0a\x99\x31\x8d\xe0\xb9\x70\x45\xbf\xb9\xd0\x28\x34\x37\xbc\x41\xa8\x29\xbf\x04\x72\xca\x5f\x63\xcd\xe8\x3e\x80\x52\xca\xf5\xa6\xa6\xa2\x6a\x85\x0d\x0a\x03\x1b\x21\x30\x43\xad\x99\xda\x41\x26\xb5\x21\x42\x96\xf2\x05\x55\xc6\x34\xd5\x3f\x00\xc1\x0b\x78\x41\xc8\xa5\xf8\xc9\x80\x40\xcc\xc1\xc8\xf4\x07\x2a\x71\xd6\x3a\xbd\x97\x7f\x92\x57\x0b\x51\xfc\x56\x69\x7d\x33\x67\xbe\x4a\x56\xa1\xb6\xf7\x42\xaf\x3b\xc1\xfc\x32\x4e\xa0\xa8\x4c\xfa\x89\xd0\x2d\xa2\xf0\xbd\xa6\x31\x13\x92\x7a\xd8\xb0\x92\xe7\x30\xed\x83\x51\x3b\x78\x78\xaf\x1f\xc3\x04\xc8\x7b\x02\x7d\x8e\x7f\x48\x2e\xa2\x49\x15\xf4\x57\x27\x10\x26\x10\xc6\xb1\x1f\x2f\x62\xf9\x7f\x98\x91\xcf\x23\x1e\x0f\xaf\xbd\x68\x09\xf3\xb4\x62\x4a\xaf\x58\x09\xee\x7a\xbf\x71\x5f\xf7\xb8\x35\xc0\xab\xba\x44\x9a\x7b\x0d\x66\x85\x60\xe8\xcc\x6b\x97\xa8\xa0\x42\xb3\x92\xb9\x23\x6b\xb4\x9d\xc4\x8c\xc7\x9e\xa2\x18\xa2\x87\xc7\xe7\x9d\xc1\x31\x49\x7d\x71\x4e\x10\x6d\xd3\x3b\x8b\x52\x14\xc7\xae\x57\x6e\x9e\xfe\x12\xd5\x77\x32\xda\x88\xd3\x39\x9d\x4f\x93\x3a\x70\x17\x59\x7b\x17\x3f\x76\x89\x51\x5e\xc2\xbf\x2d\xae\x6b\x56\x29\x0e\x66\xa6\xaa\x6d\xf2\x24\x39\x35\x9a\xb1\xe5\x2b\x29\xbd\x5b\x50\x0d\x63\x06\xa2\x52\xc1\xac\x0b\x66\xe7\x5b\x58\x80\xa9\xea\xa1\x7e\x57\x6b\x7f\x1f\xf7\x5d\xd1\xdf\xfa\x8e\xdc\x65\x4c\x4c\x0b\xa7\x33\x81\x0a\xb8\x30\xa8\x0a\x96\x61\x7a\xba\x64\xd2\x8d\xdc\x03\x37\xa8\xb7\xdd\xa8\xde\x86\x29\x18\x5d\x2c\x41\x30\xd3\x2f\xdc\x64\x2b\x68\xa8\x56\x77\xbd\x47\xf4\x86\xd8\xae\xd9\x3b\xc1\x69\x7e\x08\x66\x0e\xac\x05\x34\x5e\xe0\xc0\x1c\x09\x3c\x88\x4d\xec\x15\x04\x2f\x49\x6a\x51\x78\x45\xeb\x3d\x5a\x6e\x58\x83\xff\x1d\x76\x02\xd8\xbd\xc9\x13\x84\x73\xc5\x1b\x54\x4e\x76\x14\xe7\x29\xcc\x56\x93\x88\xee\x2c\xdd\x4b\x7f\x84\xee\x7b\x9e\x27\x27\x5a\x5f\x94\x6c\xd9\xf7\x1e\x5f\x71\xfe\x5a\x96\x4c\x2c\x81\x94\xfc\x36\x31\x24\x07\x94\xdb\x5b\x4c\x40\x43\x44\x18\x1e\x90\x3d\x03\xde\x84\xb8\x61\x65\xec\x01\x6c\x82\x31\xae\x0e\xbe\xeb\xb7\x73\xbc\x46\x63\xc6\x08\x7e\x2f\xc9\x6b\xa4\xeb\x62\xc4\xd4\x11\x76\xe7\x5b\x1f\xf3\x9e\x36\x9a\x49\xd0\x25\x37\xab\xcd\x73\x9a\xc9\x6a\xae\xeb\xe2\x97\x5f\xe7\xf5\xef\x04\xe4\x04\xa3\x37\x22\x93\xd3\x28\xee\x9f\xa3\x7d\xd4\x70\x72\x9b\x1e\xb6\xcc\xff\x38\x58\x5b\x87\xbd\x60\x58\x5d\x8f\x5c\xfa\xb0\x20\xcf\x3e\x1c\x2f\x76\x6e\xf7\x04\x0a\xd0\x33\xc1\xbd\x4d\x5d\x47\x13\x7a\xec\xd9\xb0\x33\x24\x58\x35\x58\xfb\x25\xe4\x98\xaa\x2b\x86\xf6\xc3\x92\xbb\x57\xb8\x96\x5a\xf3\xe7\xb2\x9f\x66\x37\xe9\x9a\x24\x87\xf6\x1e\xb2\x23\x4e\xa3\x18\x1e\x1e\xf7\x78\x99\xaa\x26\x0e\x55\x6c\x8d\x51\x7f\x9e\x40\x89\xc7\xdf\x3c\x7a\xed\x32\x59\xef\x22\x3b\xe2\x47\x35\x86\x16\xd0\xe0\xda\xc5\x7d\xf8\x2f\xe1\x08\x24\x37\xac\xb6\x80\x40\xc5\xea\x31\x9e\x16\x92\x3b\xbf\x64\x4c\xee\x51\xdf\xa8\x1f\x19\xf0\x7e\x6c\x47\x04\xe1\x05\x7d\x9c\x58\x4f\x6e\x58\xfd\xb0\x7d\xb5\x88\x68\xe3\xee\x23\xff\x49\xcf\xf8\x5d\xad\xb8\x30\x45\x34\xe1\x59\xf4\x3e\x8f\xc3\x04\xb6\x71\x70\xbc\x5c\x47\x6c\x5b\x30\x3d\x81\xa3\x92\xd3\x7e\xbf\xb2\xcb\xdb\xc0\xd1\x7f\x03\x00\x00\xff\xff\xdb\xbd\x05\x76\xd3\x0d\x00\x00")

func enumTmplBytes() ([]byte, error) {
	return bindataRead(
		_enumTmpl,
		"enum.tmpl",
	)
}

func enumTmpl() (*asset, error) {
	bytes, err := enumTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "enum.tmpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xbf, 0x4e, 0xba, 0x1b, 0x70, 0xaf, 0x58, 0x5f, 0x7f, 0x98, 0xb7, 0x5, 0xb3, 0x1f, 0xbf, 0xaa, 0xb8, 0xe4, 0xdf, 0xe, 0xe9, 0xcf, 0xea, 0x6f, 0x78, 0x61, 0x54, 0x6b, 0xbe, 0x82, 0xe6, 0x3d}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"enum.tmpl": enumTmpl,
}

// AssetDebug is true if the assets were built with the debug flag enabled.
const AssetDebug = false

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"enum.tmpl": {enumTmpl, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
