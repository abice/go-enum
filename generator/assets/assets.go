// Code generated by go-bindata. DO NOT EDIT.
// sources:
// enum.tmpl (3.575kB)

package assets

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _enumTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x57\x5f\x6f\xdb\x36\x10\x7f\xb6\x3e\xc5\x55\x48\x31\xa9\x53\xe5\x0c\x7b\xeb\xe0\xa7\xb6\x0b\x3a\xac\x4d\x81\x78\x7b\x09\x82\x80\x96\x4e\x36\x61\x89\x54\x49\x5a\xb1\xa1\xe9\xbb\x0f\x47\x52\xb2\xac\xd8\x69\x1f\xb6\x97\xc0\xe2\xfd\xff\xdd\xef\x78\x4c\xdb\xbe\x85\x1c\x0b\x2e\x10\xc2\x0d\xb2\x1c\x55\xd8\x75\xc1\x7c\x0e\xef\x65\x8e\xb0\x46\x81\x8a\x19\xcc\x61\x75\x80\xb5\x7c\x8b\x62\x57\x91\xf0\xc3\x2d\x7c\xb9\x5d\xc2\xc7\x0f\x9f\x96\xaf\x82\xa0\x66\xd9\x96\xad\x11\xda\x36\xf5\x3f\xbb\x2e\x08\x78\x55\x4b\x65\x20\x0a\x00\x00\xc2\xa2\x32\x61\x10\x07\x6d\x8b\x22\x87\xb7\x24\x1f\x47\x26\xbf\x14\x37\x93\x42\x93\x09\xc9\xae\xe8\xf0\x0b\xab\x10\xde\x2d\x20\xa5\x8f\xd4\x7e\x91\xb1\x95\x37\x4c\x69\x92\xe5\x3c\x33\x10\x96\x4c\x1b\x59\x14\x1a\x4d\x08\xd7\x5e\x09\x14\x13\x6b\x84\x2b\xf5\x49\xe4\xb8\x4f\xc8\xa4\xdc\x8d\xfc\xfd\x4d\x9f\x1a\xba\x2e\x98\x59\x8f\xe4\xe3\xd6\xfa\x20\x9d\xba\xdc\x65\xdb\x53\xc7\x2e\xe6\x3f\x50\x70\xa5\x0d\x74\x5d\xdb\xc2\x95\x1c\x0c\xf4\x6e\xe5\x43\x38\xcf\x7d\x60\x1f\x00\x78\x01\xf8\xad\xd7\xb0\xb5\x84\x8f\x61\xd7\xcd\xe7\x70\xb7\xe5\x75\x8d\x39\x58\x51\xdb\x62\xa9\xd1\x9e\xb7\xad\xd7\xfe\xaa\xb0\xe0\x7b\xcc\xc9\xaa\xeb\x80\x6b\x60\x24\xec\x21\xea\x3a\x90\x05\x98\x43\x8d\x47\x13\x77\x6e\x01\xef\x0b\xe4\x45\x1f\xfd\xbd\xac\x2a\x14\x86\x04\xe3\x30\xa3\x63\xd2\x77\xa6\xd4\xbf\x4b\x89\x1c\xab\xf2\xa5\x5e\x5b\x54\xc6\x89\x2d\x80\x4b\xc3\x9c\xa2\x40\xb8\x1e\x10\xeb\x3a\xf8\x19\x46\x08\x0e\xc9\x3a\x00\xbc\xfe\xb8\x29\x63\xcd\xe7\x21\x2e\x7a\xbb\x7a\xb4\xdd\x21\x07\xb6\x7f\xa7\x2d\x75\x3f\x3c\xa9\x5c\xc5\x31\xb1\x13\x0c\x56\x75\xc9\x0c\x42\xa8\x8d\xe2\x62\x8d\x2a\x84\x94\x7a\x49\x13\xf0\x95\x29\x8d\x6d\x7b\xe4\x65\xd7\x01\x33\x64\x62\x34\x18\x09\x99\x14\x0d\x2a\x03\x0c\x9c\x31\x9d\x51\xcb\xc6\x06\x41\xb1\x13\xd9\x39\x4f\x91\x20\x72\x38\xc3\x18\xa2\x53\x61\x02\xa8\x94\x54\x31\xb4\xc1\x8c\x17\xb0\x4f\x40\x6e\xa9\xbe\xc7\x53\x35\xcb\xc0\x7b\x72\xf4\xf0\x1b\x69\xb4\xc1\x6c\xa6\xd0\xec\x94\x20\x13\xc1\xcb\x60\xd6\xb5\x2d\x2f\x20\x15\x32\x63\x1a\xc1\x73\xe1\x3d\xfd\xfe\x24\x1a\xa6\x38\x13\xc6\x65\x07\x28\xd8\xaa\xc4\x3c\x81\x9c\xaa\xd0\x58\x33\xba\x15\xa0\x94\x72\xbb\xab\x53\x6b\xb7\xdc\x70\xed\x78\x39\x11\x53\xe5\x0a\x2b\xd9\x20\xec\x84\xc0\x0c\xb5\x66\xea\x00\x99\xd4\x86\x48\x5b\xca\x27\x54\x19\xd3\x84\xd1\x00\x16\x2f\xe0\x09\x21\x97\xe2\x27\x03\x02\x31\x07\x23\xd3\x1f\xa8\xd6\x59\xeb\x74\x29\xff\x24\xaf\x16\xc6\xf8\xa5\xf2\xfb\x86\xcf\x3c\x12\xac\x42\x6d\xef\x8e\x5e\x77\xd2\x97\xeb\x38\x81\xa2\x32\xe9\x47\xea\x40\x11\x85\xaf\x6d\xc9\x42\x52\x9f\x1b\x56\xf2\x1c\xa6\xbd\x32\xea\x00\xf7\xaf\xf5\x43\x98\x00\x79\x4f\xa0\xcf\xf1\x0f\xc9\x45\x34\xa9\x82\xfe\xea\x04\xc2\x04\xc2\x38\xf6\x23\x48\x93\xf0\x1f\x66\xe4\xf3\x88\xc7\x03\x6e\x2f\x63\xc2\x3c\xad\x98\xd2\x1b\x56\x82\x5b\x01\x9f\xdd\xd7\x12\xf7\x06\x78\x55\x97\x48\x77\x83\x06\xb3\x41\x30\x74\xe6\xb5\x4b\x54\x50\xa1\xd9\xc8\xdc\x11\x3a\xda\x4f\x62\xc6\x63\x4f\x51\x0c\xd1\xfd\xc3\xea\x60\x70\x4c\x64\x5f\x9c\x13\x44\xfb\xf4\xce\xa2\x14\xc5\xb1\xeb\x95\x9b\xb9\xbf\x44\xf5\x9d\x8c\x76\xe2\x72\x4e\x6f\xa6\x49\x9d\xb8\x8b\xac\xbd\x8b\x1f\xbb\xc4\x28\x2f\xe1\xf7\x8f\xeb\x9a\x55\x8a\x83\x99\xa9\x6a\x9b\x3c\x49\x2e\x8d\x6f\x6c\xf9\x4a\x4a\xaf\x16\x54\xc3\x98\x81\xa8\x54\x30\xeb\x82\xd9\x9b\x3d\x2c\xc0\x54\xf5\x50\xbf\xab\xb5\xbf\xb3\xfb\xae\xe8\x6f\x7d\x47\xee\x32\x26\xa6\x85\xd3\x99\x40\x05\x5c\x18\x54\x05\xcb\x30\xbd\x5c\x32\xe9\x46\x6e\x09\x0e\xea\x6d\x37\xaa\xb7\x61\x0a\x46\x97\x4f\x10\xcc\xf4\x13\x37\xd9\x06\x1a\xaa\xd5\xad\x80\x88\xf6\x8c\xed\x9a\xbd\x37\x9c\xe6\xbb\x60\xe6\xc0\x5a\x40\xe3\x05\x0e\xcc\x91\xc0\x83\xd8\xc4\x5e\x41\xf0\x92\xa4\x16\x85\x67\xb4\x3e\xa2\xe5\x86\x35\xf8\xdf\x61\x27\x80\xdd\xde\x9e\x20\x9c\x2b\xde\xa0\x72\xb2\xb3\x38\x4f\x61\xb6\x9a\x44\x74\x67\xe9\x5e\x03\x67\xe8\x7e\xe4\x79\x72\xa1\xf5\x45\xc9\xd6\x7d\xef\xf1\x19\xe7\x6f\x64\xc9\xc4\x1a\x48\xc9\xbf\x38\x86\xe4\x80\x72\x7b\x89\x09\x68\x88\x08\xc3\x92\x39\x32\xe0\x45\x88\x1b\x56\xc6\x1e\xc0\x26\x18\xe3\xea\xe0\xbb\x79\x39\xc7\x1b\x34\x66\x8c\xe0\xf7\x92\xbc\x41\xba\x2e\x46\x4c\x1d\x61\xf7\x66\xef\x63\x2e\xe9\xd5\x33\x09\xba\xe6\x66\xb3\x5b\xa5\x99\xac\xe6\xba\x2e\x7e\xf9\x75\x5e\xff\x4e\x40\x4e\x30\x7a\x21\x32\x39\x8d\xe2\x7e\x1d\x1d\xa3\x86\x93\xdb\xf4\xb4\x65\xfe\xc7\xc9\xd3\x76\x78\x3b\x0c\xcf\xdb\x33\x97\x3e\x2c\xc8\xb3\x0f\xc7\x8b\x83\x7b\x9f\x02\x05\xe8\x99\xe0\x76\x53\xd7\xd1\x84\x9e\x5b\x1b\x76\x86\x04\xab\x06\x6b\xff\x50\x39\xa7\xea\x8a\xa1\x5d\x5d\x72\xb7\x85\x6b\xa9\x35\x5f\x95\xfd\x34\xbb\x49\xd7\x24\x39\xb5\xf7\x90\x9d\x71\x1a\xc5\x70\xff\x70\xc4\xcb\x54\x35\x71\xa8\x62\x5b\x8c\xfa\xf3\x04\x4a\x3c\xbf\xf3\x68\xdb\x65\xb2\x3e\x44\x76\xc4\xcf\x6a\x0c\x2d\xa0\xc1\xb5\x8f\xfb\xe1\x3f\x89\x33\x90\x7c\x66\xb5\x05\x04\x2a\x56\x8f\xf1\xb4\x90\xdc\xf9\x47\xc6\xe4\x1e\xf5\x8d\xfa\x91\x01\xef\xc7\x76\x44\x10\x5e\xd0\xc7\x85\xe7\xc9\x67\x56\xdf\xef\x9f\x3d\x44\xb4\x71\xf7\x91\xff\xa4\x35\x7e\x57\x2b\x2e\x4c\x11\x4d\x78\x16\xbd\xce\xe3\x30\x81\x7d\x1c\x9c\x2f\xd7\x11\xdb\x16\x4c\x2b\x70\x54\x72\xda\xbf\xaf\xec\x03\x6f\xe0\xe8\xbf\x01\x00\x00\xff\xff\xfb\x28\xb0\xc2\xf7\x0d\x00\x00")

func enumTmplBytes() ([]byte, error) {
	return bindataRead(
		_enumTmpl,
		"enum.tmpl",
	)
}

func enumTmpl() (*asset, error) {
	bytes, err := enumTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "enum.tmpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xa6, 0x47, 0x65, 0xcd, 0x71, 0x59, 0x7d, 0x63, 0x89, 0x4, 0xcb, 0x37, 0xff, 0xc3, 0xf, 0x89, 0x78, 0x9f, 0x37, 0x16, 0xcd, 0xb9, 0xc4, 0x34, 0x1d, 0x91, 0xc9, 0x68, 0x67, 0x61, 0x7d, 0xf2}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"enum.tmpl": enumTmpl,
}

// AssetDebug is true if the assets were built with the debug flag enabled.
const AssetDebug = false

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"enum.tmpl": {enumTmpl, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
