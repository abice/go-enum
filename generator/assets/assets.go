// Code generated by go-bindata. DO NOT EDIT.
// sources:
// enum.tmpl (8.354kB)

package assets

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _enumTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xe4\x59\xdf\x8f\xdb\xb8\xf1\x7f\xb6\xfe\x8a\x89\x91\xdc\x49\xfe\x3a\x72\xbe\x68\xd1\x87\x1c\xf6\x21\x4d\xd2\xe0\x0e\xcd\x26\xe8\xa6\x79\x59\x04\x01\x2d\x8d\xd6\xbc\x95\x48\x1d\x49\xd9\x72\x55\xfd\xef\xc5\x90\x94\x2c\x6b\xe5\xdd\x6d\xba\x7b\x41\xd1\x17\xc3\x12\x87\xc3\xf9\xcc\xef\xa1\x9a\xe6\x39\xa4\x98\x71\x81\x30\xdf\x20\x4b\x51\xcd\xdb\x36\x58\xad\xe0\xb5\x4c\x11\xae\x50\xa0\x62\x06\x53\x58\xef\xe1\x4a\x3e\x47\x51\x15\xb4\xf8\x19\x95\xe6\x52\xbc\x84\xa6\x81\x78\xeb\x1e\xc0\xed\xfb\x1b\x6e\xf9\x61\x4d\xf9\x27\xbf\xf8\xe7\x8a\xe7\x29\xbc\x61\x06\xdd\xf2\x9a\x9e\xe9\xd1\xaf\xbf\xf9\x00\xe7\x1f\x3e\xc1\xdb\x37\x3f\x7f\x7a\x12\x04\x25\x4b\xae\xd9\x15\x42\xd3\xc4\xfe\x6f\xdb\x06\x01\x2f\x4a\xa9\x0c\x84\x01\x00\xc0\x3c\x2b\xcc\x3c\x88\x82\xa6\x41\x91\xc2\x73\x5a\x1f\x22\x22\x79\x09\x4f\x22\x85\xa6\x2d\xb4\xf6\x94\x5e\x9e\xb3\x02\xe1\xe5\x19\xc4\xf4\x10\xdb\x27\xda\x6c\xd7\xb7\x4c\x69\x5a\x4b\x79\x62\x60\x9e\x33\x6d\x64\x96\x69\x34\x73\x78\xe1\x89\x40\x31\x71\x85\xf0\x54\xfd\x2c\x52\xac\x97\xb4\x25\xaf\x06\xfc\x3e\xd3\xa3\x26\x4c\x33\xcb\x91\x78\x7c\xb0\x3c\x88\xa6\xcc\xab\xe4\xfa\x98\xb1\x3b\xf3\x9f\x90\x71\xa5\x0d\xb4\x6d\xd3\xc0\x53\xd9\x6f\xd0\xd5\xda\x1f\xe1\x38\x77\x07\xfb\x03\x80\x67\x80\xbf\x75\x14\x16\xcb\xfc\xeb\xbc\x6d\x57\x2b\xb8\xb8\xe6\x65\x89\x29\xb8\xa5\xa6\xc1\x5c\xa3\x5d\x68\x1a\x4f\xfe\x51\x61\xc6\x6b\x4c\x69\x5b\xdb\x02\xd7\xc0\x68\xb1\xd3\x51\xdb\x82\xcc\xc0\xec\x4b\x3c\x6c\x71\xef\x63\xab\xf2\x0e\x22\xcf\xba\xf3\x5f\xcb\xa2\x40\x61\x68\x61\x78\xce\xe0\x35\xd1\xbb\xad\x64\xc1\x53\x92\x1c\x70\x79\xb0\x2f\xac\x5e\x86\x92\x9d\x01\x97\x86\x39\x42\x81\xf0\xa2\xd7\x59\xdb\xc2\xff\xc1\x40\x87\xb4\xd1\x9e\xe8\x34\xe0\xe9\x87\x66\x19\x52\xde\x3c\xe2\x24\xb7\xa7\x5f\xad\x7d\x88\x81\xb5\xe0\xb1\x51\xdd\x1f\xef\x56\x0e\x71\x44\xfe\x09\x06\x8b\x32\x27\xaf\x9f\x6b\xa3\xb8\xb8\x42\x35\x87\x98\xac\x49\x31\xf0\x91\x29\x8d\x4d\x73\xf0\xcc\xb6\x05\x66\x68\x8b\xd1\x60\x24\x24\x52\x6c\x51\x19\x60\xe0\x36\xd3\x3b\xb2\xd9\x70\x43\x90\x55\x22\x99\xe2\x14\x0a\x72\x0f\xb7\x31\x82\xf0\x78\x71\x09\xa8\x94\x54\x11\x34\xc1\x8c\x67\x50\x2f\x41\x5e\x13\xbe\xaf\xc7\x64\xd6\x07\x2f\x89\xd1\x97\x9f\x88\xa2\x09\x66\x33\x85\xa6\x52\x82\xb6\x08\x9e\x07\xb3\xb6\x69\x78\x06\xb1\x90\x09\xd3\x36\xb6\xc9\x17\x5e\xd3\x7f\x2e\x34\x0a\xcd\x0d\xdf\x22\x94\x24\xdf\x12\x52\x92\x5f\x63\xc9\x28\xd3\x40\x2e\xe5\x75\x55\x12\xa8\x52\xe1\x16\x85\x81\x4a\x08\x4c\x50\x6b\xa6\xf6\x90\x48\x6d\xc8\x23\x73\xb9\x43\x95\x30\x4d\xf8\x7b\x45\xf0\x0c\x76\x08\xa9\x14\x3f\x1a\x10\x88\x29\x18\x19\xdf\x03\x89\xdb\xad\xe3\x4f\xf2\xaf\xc4\xd5\xaa\x28\xba\x0d\x5a\x67\xcc\x99\x47\xc9\x0a\xd4\x36\x33\x74\xb4\x23\x9d\xbf\x88\x96\x90\x15\x26\x7e\x4b\xda\xcd\xc2\xf9\x33\x4d\x71\x26\x24\xd9\x70\xcb\x72\x9e\xc2\xd8\x0e\x46\xed\xe1\xf2\x99\xfe\x32\x5f\x02\x71\x5f\x42\x27\xe3\x2f\x92\x8b\x70\x84\x82\x7e\xf5\x12\xe6\x4b\x98\x47\x91\x0f\x2f\xf2\xf2\x07\x94\xc8\xcb\x11\x0d\x83\xd7\xa6\x5a\xd2\x79\x5c\x1a\x05\x9d\xcf\x85\xf5\x68\x6b\x04\x1f\x8d\x0a\x23\x58\x8c\x5c\xba\xe9\x65\xfb\xa1\x0e\xda\xa0\xcb\x26\x1d\xcf\x82\x29\xbd\x61\xb9\xaf\x0b\xef\xdd\xd3\x27\xac\x0d\xf0\xa2\xcc\x91\x72\x89\x06\xb3\x41\x30\xf4\xce\x53\xe7\xa8\xa0\x40\xb3\x91\xe9\x49\x61\x06\x9c\xc2\x08\xc2\xcb\x2f\xeb\xbd\xc1\xa1\xe3\x7b\xa1\xdc\x42\x58\xc7\x17\x56\xf3\x61\x14\x39\xfb\xbb\x18\xfd\xbb\x28\xee\x90\xa8\x12\xa7\x65\x5a\x8c\x85\x3a\x62\x17\xda\xfd\xee\xfc\xc8\x09\x46\x72\x09\x5f\xb1\x9c\x27\x58\xa2\x28\x98\x99\xa2\xb4\xc2\xd3\xca\xa9\x70\x8f\x6c\x0c\x10\xd1\x93\x33\xc2\x30\xf4\x6a\x54\x2a\x98\xb5\xc1\x6c\x51\xc3\x19\x98\xa2\xec\xf1\x3b\xac\x23\xab\x48\x05\xb1\xfe\x2d\xb7\x3f\xa2\xca\x73\x2e\x4c\xff\x5f\x1b\xd5\xb6\xc1\x96\xa9\x71\x90\xbd\x55\xea\x9c\xe7\x1f\x8d\x82\x33\x87\x46\xc7\xe7\xb8\x0b\xe7\xae\x66\x96\x92\x0b\x83\xca\xba\x1f\xcf\xe7\x11\xac\x56\x20\x05\x42\x89\xca\x95\x9d\x4c\x2a\xe8\x1a\x81\x24\x67\x7a\x83\xda\x9a\xe0\x22\x61\x62\xac\x79\x7a\x27\x88\x19\xb1\xcc\x58\x82\xf1\x69\x9d\x13\x6d\xe8\x64\xe8\xc9\x9b\x36\x82\x90\x14\x75\x94\x07\x1d\xd1\xd9\x41\x77\x56\x59\x37\x22\xaa\x57\x2a\x29\xd4\x26\xbc\x57\xb0\xe3\x29\x2a\xdf\x2d\xc8\x0c\x34\xc9\xc7\xd6\x39\x5a\x68\x3a\xb6\x54\xa9\xe2\x5b\x54\xbe\xb2\x6f\x5d\xe7\xc0\x8c\xf3\x24\x59\xda\xf2\xbb\x41\xc8\xb9\x36\x56\x17\x58\x97\x98\x72\x14\xc9\x3e\x98\xe9\x1d\x37\xc9\x06\xb6\x64\x7d\x57\x44\x43\x62\x6c\x05\x4f\x5c\xb6\x35\x7f\xfa\xe3\xcb\x13\x22\x6f\x23\x4f\xe5\x5c\xca\x91\x39\x6f\x9a\x76\xa6\x6d\xe4\x12\xde\xc0\xfa\x94\x62\x26\xbc\x8b\x70\x51\x0e\xa3\x0c\x6f\x4b\xd4\xc6\x69\xf9\x0a\x95\x57\x27\xd3\x7d\xde\x26\x7a\xa7\xe6\x25\x6c\xbd\x2f\x6b\xa3\xa8\xce\xc5\xaf\x8c\xe4\xe1\x36\xfa\xc9\x2d\x0c\x6c\x30\x94\x75\x2c\x26\xcb\x7d\xb0\xce\x66\xe4\xdb\xb3\xb6\x6f\x55\x2c\x5c\x17\x5a\x77\xc3\xf5\x91\xb6\x8d\xbe\x13\xec\xc3\xf9\x0f\x0a\xff\x98\xbc\x77\x8e\xed\xc1\x65\xee\x74\x98\xc5\x4d\x1e\x84\xc4\x0b\x68\xe5\xf3\x69\xe4\x54\x2e\x08\x9c\x68\xf6\x94\x45\x77\x74\x75\x9f\xb3\xab\xfb\xf9\xf4\xc2\xf3\xfa\x0f\xe4\x1a\xb1\x5e\x1c\xf1\x76\x22\x3c\x06\xf7\x2c\x97\x8c\xd8\x53\x26\xfc\x55\x4b\xd1\x15\x37\x0d\xb8\x45\xb5\x37\x1b\xdb\xf3\x90\x1f\x79\x4a\xca\xcc\xdc\xfc\x48\x6f\x44\x55\xac\x51\xdd\xa9\x9b\x07\x39\xe2\x51\x34\x5b\x3d\xa6\xd9\xaa\x47\xb5\xdb\xe2\x90\x46\xbf\x95\xfd\x6d\xd9\x68\xf1\xbd\xb2\xef\xe2\xe1\xd2\x6f\x1b\xcc\xfa\x06\x23\x38\xd9\x55\x68\xd7\x4e\xae\x56\xe0\x6a\xe2\xa8\xc8\xbb\x7a\xe9\xd6\x26\x4b\xfd\xb8\xd2\x5b\x4a\x6a\xf6\x86\x95\x76\xa2\xe5\x3b\xf4\x7a\xcb\xbe\xfd\x71\x9d\xf4\xf7\x90\xc6\xfa\x6a\x58\x0f\x64\xe9\x5b\x31\xff\xa7\x6b\x95\xb3\x9c\x5d\x79\x11\x2f\xf0\x46\x37\xfa\x4e\xe6\x4c\x5c\x01\x11\xf9\x1e\xa3\x17\x12\x48\xc6\xdb\x5a\x24\x34\x64\xcd\x7e\x5c\xec\x7b\xd1\xed\xad\x3d\x27\x39\x40\xd0\x17\x95\x41\xa3\xe9\x7a\xe7\x77\xb7\xcb\xf8\x0e\x8d\x19\x6a\xf2\x2e\x21\xdf\x21\x35\xf2\x83\x16\x6e\xa0\xc3\x45\xed\xcf\xfc\x44\x9d\xe4\xe8\xd0\x2b\x6e\x36\xd5\x3a\x4e\x64\xb1\xd2\x65\xf6\xff\x7f\x58\x95\x7f\x21\x45\x8e\x74\x74\xcb\xc9\xc4\x34\x8c\xba\xe1\xf3\x70\xea\x7c\x34\x3b\x9d\xec\xa3\x27\x5a\x68\xb2\xa3\x6d\x7b\xcf\xab\x3c\x1f\x4d\x4c\xda\xa8\x2a\x31\x0d\xcd\x60\xc3\xf7\xa3\xc7\x60\xf6\xd9\x0e\x70\x14\xa3\xb3\xb5\x94\x79\xd3\xac\x16\xf0\x2a\x4d\x41\xcb\x82\x80\x65\x92\xc2\xdf\x48\xd8\x6d\xd0\x6c\xa8\xcd\xde\x70\xed\xf3\xc2\x8e\x69\x7b\x9b\x91\x56\x16\xd3\x61\x88\xa1\x27\xa9\xec\x84\xb8\x58\xb5\x7e\xbc\x1f\xcc\x68\xb3\x0b\x34\xb3\xd9\xe0\x4c\x1a\x12\xc1\x4d\x89\x56\x81\xe7\xb8\xbb\x09\xc9\x7a\xd7\x71\xf7\x5d\x4f\x20\xb7\x61\x51\xc7\x5d\xc7\x6e\x67\x84\x3d\x8d\xbc\x3b\x04\x7e\x25\xa4\x42\x87\xc1\xfa\xe7\x12\xb8\x81\x1d\xcf\x73\xf8\xb5\xd2\x06\xd6\x08\x34\x27\x08\x37\xd5\xba\x26\xb9\xb3\x94\x77\x8e\x7f\x77\x92\x98\x12\xf0\x9e\xd3\x84\xbf\x2a\x1b\x68\xae\x8e\x29\x66\xcf\xc0\xa8\x0a\x0f\x5a\x9b\x1c\x3b\xea\x78\x7c\x4d\x50\xc7\xce\xd6\x13\xd3\xc8\x12\x32\x96\x6b\x1c\x0d\x25\x2e\x61\x8f\x19\xc5\x07\xe9\x23\x52\x74\xc7\x34\x3c\x24\xfd\x68\xa8\x33\x9f\x77\x8e\x0b\xd1\x37\x27\xc8\x29\x75\xde\x99\x24\x79\x06\x4f\xbc\xa0\x83\x69\x56\xf0\xbc\xbb\xa5\xb9\x39\x5a\xb1\x24\xc1\xd2\x68\x97\x58\xed\x28\x45\x92\xbb\x81\x2b\x1e\xa7\xdd\x91\x86\x1e\xb4\x22\x3c\x16\xe0\xbe\x8c\x8d\xad\x3b\x51\xd5\x9c\x9b\xdd\x7a\xd9\xf2\xcb\xc5\x87\x73\x48\xa4\x52\x98\x98\x7c\x0f\x1a\x15\x67\x39\xff\x07\x4d\xa7\x53\xd9\xc9\x48\xa0\x1d\x1d\x4c\x31\x09\x73\xc0\x7a\xfa\xf6\xc5\x5d\xd4\x93\x5b\x5d\xd8\x0b\x83\x39\xfd\x9d\x5b\xf8\xc2\xfb\xe5\x00\x3e\xf5\xae\xb1\xe7\x19\x8a\xb1\xcd\x86\x4a\xf1\xd7\x39\x9e\xf1\xf4\x5d\xce\x08\x70\x8a\x77\x41\xce\x94\x2c\x46\xa0\x27\x93\xc3\xd1\x09\xe1\x7a\xe2\x6e\x67\x90\x04\x82\xd9\x96\x29\xa8\x87\x69\xc4\xc5\xed\xcb\x33\x87\xb7\xe7\x16\xae\x97\xf0\x43\x3d\xbe\xdd\x99\xb8\xdc\x71\x51\x2f\x5c\x98\xd7\xd1\xa8\x26\x1f\xbb\xc3\xb1\x67\x30\x91\x7e\x43\xa5\x22\xd3\xb9\x62\x45\xe0\x6e\xae\xdf\x5e\x14\x2e\x8c\xba\x67\x5d\x20\x4b\x3e\x6e\x69\x78\xa8\x00\xb7\x92\xfe\xce\x31\xfe\x3b\x06\xb6\x85\xf7\xbf\x18\xdb\x16\xf8\x7f\x4b\x78\x1f\x45\xf7\x61\x86\x38\x7c\x2d\xed\x3f\x46\xf5\x5f\x4c\x27\xbe\x34\x90\xe1\x9a\xc6\x77\xbd\x3c\xdb\xbb\x4f\x9e\x40\x7d\x6e\xe7\x75\xee\x83\x48\xdb\x4e\x5c\x06\xdb\x6f\x15\xb6\x5f\x11\xac\xe8\x77\xfb\x2f\x5f\x53\xa4\x0e\x0b\x19\xc9\xde\x80\xca\x0c\x4a\xa9\x35\x5f\xe7\xdd\xb5\x65\x77\x65\x2a\xb3\xd1\x7e\x6f\xb8\x09\xa6\x61\x04\x97\x5f\x0e\x6d\xbb\x29\x4a\xd2\x7e\xc1\xae\x31\xec\xde\x2f\x21\xc7\xe9\x0f\x2d\x11\xcd\xfb\xb2\xdc\x87\xf6\xea\x7d\x92\xa2\xb7\x80\x29\xca\x83\x05\xec\xc7\xe9\x09\x95\xbc\x67\xa5\x55\x08\x14\xac\x1c\xea\xd3\xf5\xa6\xfe\xcb\xd6\xa8\x3b\xf5\x86\xba\xcf\xbc\xd9\x65\x86\xc1\x9c\xc2\x33\x7a\x38\xf1\x4d\xec\x3d\x2b\x2f\xeb\x1b\x5f\xbf\xb4\x51\xc3\x90\xcb\x0a\x13\x5f\x94\x8a\x0b\x93\x85\xa3\x71\x27\x7c\x96\x46\xf3\x25\xd4\x51\x30\x0d\xd7\xa5\x54\x0b\x98\xc6\x8b\x01\xe4\xb8\xfb\xa8\x87\x47\x3e\xfa\xaf\x00\x00\x00\xff\xff\x03\x2f\xac\x8d\xa2\x20\x00\x00")

func enumTmplBytes() ([]byte, error) {
	return bindataRead(
		_enumTmpl,
		"enum.tmpl",
	)
}

func enumTmpl() (*asset, error) {
	bytes, err := enumTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "enum.tmpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x7a, 0x85, 0x1, 0x7f, 0x8a, 0xb9, 0x0, 0xfb, 0x6, 0xce, 0xa8, 0xb4, 0xc9, 0xc5, 0xcb, 0x69, 0xad, 0x6d, 0xbd, 0x9c, 0xe4, 0x51, 0xf6, 0x29, 0x5e, 0xa6, 0x99, 0x7c, 0x4e, 0x68, 0xc4, 0x46}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"enum.tmpl": enumTmpl,
}

// AssetDebug is true if the assets were built with the debug flag enabled.
const AssetDebug = false

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"enum.tmpl": {enumTmpl, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
