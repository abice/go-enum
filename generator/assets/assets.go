// Code generated by go-bindata.
// sources:
// enum.tmpl
// DO NOT EDIT!

package assets

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _enumTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x56\xcd\x6e\xe3\x36\x10\x3e\x5b\x4f\x31\x2b\x24\x80\x98\x3a\x72\x8a\xde\x5a\xf8\xb4\xbb\x0d\xb6\x40\x36\x0b\x38\xed\x25\x08\x02\xc6\x1a\x3a\x44\x24\x52\x25\x69\xd7\x86\xca\x77\x2f\x86\xa4\x14\xd9\xb1\xd3\x16\xd8\x8b\x21\x72\x7e\xbf\x99\x6f\x86\xee\xba\x4b\xa8\x50\x48\x85\x90\x3f\x23\xaf\xd0\xe4\xde\x67\xb3\x19\x7c\xd4\x15\xc2\x0a\x15\x1a\xee\xb0\x82\xa7\x1d\xac\xf4\x25\xaa\x75\x43\xc2\x4f\xb7\xf0\xf5\xf6\x0e\x3e\x7f\xfa\x72\xf7\x21\xcb\x5a\xbe\x7c\xe1\x2b\x84\xae\x2b\xd3\xa7\xf7\x59\x26\x9b\x56\x1b\x07\x45\x06\x00\x90\x8b\xc6\xe5\x19\xcb\xba\x0e\x55\x05\x97\x24\x1f\x47\x26\xbf\x14\x77\xa9\x95\x25\x13\x92\x9d\xd1\xe5\x57\xde\x20\xfc\x3c\x87\x92\x0e\x65\x38\x91\x71\x90\x6f\xb8\xb1\x24\xab\xe4\xd2\x41\x5e\x73\xeb\xb4\x10\x16\x5d\x0e\x57\x49\x09\x0c\x57\x2b\x84\x33\xf3\x45\x55\xb8\x9d\x92\x49\xbd\x1e\xf9\xfb\x83\x8e\x16\xbc\xcf\x26\xc1\x23\xf9\xb8\x0d\x3e\x48\xa7\xad\xd7\xcb\x97\x7d\xc7\x31\xe6\xdf\x20\xa4\xb1\x0e\xbc\xef\x3a\x38\xd3\x83\x81\x5d\x3f\xa5\x10\xd1\x73\x1f\x38\x05\x00\x29\x00\xff\xec\x35\x02\x96\xfc\x31\xf7\x7e\x36\x83\xc5\x8b\x6c\x5b\xac\x20\x88\xba\x0e\x6b\x8b\xe1\xbe\xeb\x92\xf6\x37\x83\x42\x6e\xb1\x22\x2b\xef\x41\x5a\xe0\x24\xec\x4b\xe4\x3d\x68\x01\x6e\xd7\xe2\xab\x49\xbc\x0f\x05\xef\x01\x4a\xd1\x47\xff\xa8\x9b\x06\x95\x23\xc1\x38\xcc\xe8\x9a\xf4\xa3\x29\xf5\xef\x54\x22\xaf\xa8\x12\xd4\xab\x50\x95\x71\x62\x73\x90\xda\xf1\xa8\xa8\x10\xae\x86\x8a\x79\x0f\x3f\xc0\xa8\x82\x43\xb2\xb1\x00\x49\x7f\xdc\x94\xb1\xe6\xdb\x10\x27\xbd\x9d\x3d\x86\xee\x90\x83\xd0\xbf\xfd\x96\xc6\x8f\x44\xaa\x88\x98\x11\x3b\xc1\x61\xd3\xd6\xdc\x21\xe4\xd6\x19\xa9\x56\x68\x72\x28\xa9\x97\x34\x01\xdf\xb8\xb1\xd8\x75\xaf\xbc\xf4\x1e\xb8\x23\x13\x67\xc1\x69\x58\x6a\xb5\x41\xe3\x80\x43\x34\xa6\x3b\x6a\xd9\xd8\x20\x13\x6b\xb5\x3c\xe6\xa9\x50\x44\x8e\x68\xc8\xa0\xd8\x17\x4e\x01\x8d\xd1\x86\x41\x97\x4d\xa4\x80\xed\x14\xf4\x0b\xe1\x7b\xdc\x57\x0b\x0c\xbc\x27\x47\x0f\xbf\x90\x46\x97\x4d\x26\x06\xdd\xda\x28\x32\x51\xb2\xce\x26\xa1\xcb\x52\x40\x49\x5a\x36\xcc\x4c\xaf\x72\x90\xcf\x15\x9b\x82\x68\x5c\xf9\x99\x22\x8b\x22\x3f\xb7\x44\x41\xa5\x09\xdf\x86\xd7\xb2\x82\xc3\x1c\x9d\xd9\xc1\xfd\xb9\x7d\xc8\xa7\x40\xde\xa7\x09\x8d\x2d\x7f\xd3\x52\x15\x07\xb9\xd2\xaf\x9d\x42\x3e\x85\x9c\xb1\x44\x3d\x62\xc0\x77\xcc\x28\xe5\xc1\xc6\xc4\x0e\x4b\x88\x68\x56\x36\xdc\xd8\x67\x5e\x43\x5c\x7d\x37\xf1\x74\x87\x5b\x07\xb2\x69\x6b\xa4\x99\xb0\xe0\x9e\x11\x1c\xdd\x25\xed\x1a\x0d\x34\xe8\x9e\x75\x15\x1b\x59\x6c\xe1\x62\x3f\x28\x1b\xbb\x2a\x18\x14\xf7\x0f\x4f\x3b\x87\xe3\x0e\x26\x74\x51\x50\x6c\xcb\x45\x28\x53\xc1\x58\xec\x51\x24\xdb\xef\xaa\xf9\x97\x94\xd6\xea\x7f\x24\xb5\xe7\xae\x08\xf6\x31\x3e\x8b\x89\x51\x5e\x2a\x2d\xde\xd8\xb6\xa0\xc4\xb2\x89\x6b\xda\x90\x3c\x49\x4e\xf1\x96\x05\x5a\x92\xd2\x87\x39\x61\x18\x33\x0f\x8d\x09\xb4\xbb\xd8\xc2\x1c\x5c\xd3\x0e\xf8\x23\xd6\x7e\x59\xf5\x6d\x11\x35\x5f\xa5\x9e\x2c\xf0\x0d\xf0\x6b\x5d\x73\xb5\x02\x52\x4a\xfb\x56\x2a\x87\x46\xf0\x25\x02\x61\x2f\x4f\x57\x60\x81\xae\xd8\xf0\x7a\x18\xb1\x01\xf6\xe6\x5d\x78\x1b\x5e\xb3\x94\xfc\x26\x1b\x63\x8a\x6d\xba\x7e\x3f\xc7\x6b\x74\x0e\xcd\x7f\x4f\xf2\x1a\x89\x33\x83\x7a\xe7\x47\x7c\xb9\xd8\xa6\x98\x77\xb4\xf3\x0f\x82\xae\xa4\x7b\x5e\x3f\x95\x4b\xdd\xcc\x6c\x2b\x7e\xfc\x69\xd6\xfe\x4a\x85\x3c\xa8\xd1\x3b\x91\xc9\x69\xc1\xfa\xcd\xf5\x1a\x35\x3f\x98\xa9\xfd\x96\xa5\x8f\xbd\x87\x7d\xd8\x9c\xc3\xe3\x7e\x64\xf4\x61\x4e\x9e\x53\x38\x29\x76\xf1\x75\x06\x0a\xd0\x33\x21\x6e\x28\xef\x37\xdc\x1c\xf3\x60\x61\x0e\x5d\xa7\x78\x33\x58\xa7\x35\x7d\x4c\x35\x82\xa1\x17\xb4\x96\xd6\xd1\xc3\xd9\x6a\x6b\xe5\x53\xdd\xaf\xdc\xf8\x0c\x5b\x92\xec\xdb\xa7\x92\x1d\x71\x5a\x30\xb8\x7f\x78\xad\x97\x6b\x5a\xe2\x50\xc3\x5f\xb0\xe8\xef\xa7\x50\xe3\xf1\xcd\x47\x3b\x6f\xa9\xdb\x5d\x11\xc6\xeb\xa8\xc6\xd0\x02\x1a\x9a\xf0\xd7\x66\xf8\x1f\x75\xa4\x24\x37\xbc\x0d\x05\x81\x86\xb7\xe3\x7a\x86\x92\xc4\x0d\x73\xc8\x99\x45\x6a\xd4\x31\x7e\xbc\x99\x9e\xb4\xa3\x46\x04\x91\x82\x0e\x27\x9e\xa2\x1b\xde\xde\x6f\xdf\xbc\x42\xd6\xc5\x5d\x90\x8e\xb4\xcc\x17\xad\x91\xca\x89\xe2\x80\x67\xc5\x79\xc5\xf2\x29\x6c\x59\x76\x1c\x6e\x24\x76\x00\x4c\x7b\x70\x04\xb9\xac\xf5\x5f\x68\x96\xdc\x22\x8c\x39\xfa\x4f\x00\x00\x00\xff\xff\xf0\x8e\x3b\xff\xf5\x0a\x00\x00")

func enumTmplBytes() ([]byte, error) {
	return bindataRead(
		_enumTmpl,
		"enum.tmpl",
	)
}

func enumTmpl() (*asset, error) {
	bytes, err := enumTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "enum.tmpl", size: 2805, mode: os.FileMode(420), modTime: time.Unix(1536380832, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"enum.tmpl": enumTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"enum.tmpl": &bintree{enumTmpl, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

