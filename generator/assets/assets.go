// Code generated by go-bindata. DO NOT EDIT.
// sources:
// enum.tmpl

package assets

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _enumTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x56\x51\x6f\xe3\x36\x0c\x7e\x8e\x7f\x05\xcf\xe8\x01\x76\xe7\x3a\x1d\xf6\xb6\x21\x4f\xbb\x5b\x71\x03\x7a\x3d\x20\xdd\x5e\x8a\xa2\x50\x6d\x3a\x15\x6a\x4b\x9e\xa4\x64\x0e\x3c\xfd\xf7\x81\x92\xec\x38\xa9\xd3\x6d\xc0\x5e\x02\x4b\x22\x3f\xf2\x23\x3f\x51\xe9\xfb\x2b\x28\xb1\xe2\x02\x21\x7e\x41\x56\xa2\x8a\xad\x8d\x96\x4b\xf8\x59\x96\x08\x1b\x14\xa8\x98\xc1\x12\x9e\xf7\xb0\x91\x57\x28\xb6\x0d\x1d\x7e\xba\x83\xaf\x77\xf7\xf0\xf9\xd3\x97\xfb\x0f\x51\xd4\xb2\xe2\x95\x6d\x10\xfa\x3e\x0f\x9f\xd6\x46\x11\x6f\x5a\xa9\x0c\x24\x11\x00\x40\x5c\x35\x26\x8e\xd2\xa8\xef\x51\x94\x70\x45\xe7\xd3\xc8\x84\x4b\x71\x0b\x29\x34\xb9\xd0\xd9\x05\x6d\x7e\x65\x0d\xc2\x8f\x2b\xc8\x69\x91\xbb\x15\x39\xbb\xf3\x1d\x53\x9a\xce\x4a\x5e\x18\x88\x6b\xa6\x8d\xac\x2a\x8d\x26\x86\xeb\x60\x04\x8a\x89\x0d\xc2\x85\xfa\x22\x4a\xec\x32\x72\xa9\xb7\x13\xbc\xdf\x69\xa9\xc1\xda\x68\xe1\x10\x09\xe3\xce\x61\x90\x4d\x5b\x6f\x8b\xd7\x63\x60\x1f\xf3\x2f\xa8\xb8\xd2\x06\xac\xed\x7b\xb8\x90\xa3\x83\xde\x3e\x87\x10\x1e\x79\x08\x1c\x02\x00\xaf\x00\xff\x18\x2c\x1c\x97\xf8\x29\xb6\x76\xb9\x84\xf5\x2b\x6f\x5b\x2c\xc1\x1d\xf5\x3d\xd6\x1a\xdd\x7e\xdf\x07\xeb\x6f\x0a\x2b\xde\x61\x49\x5e\xd6\x02\xd7\xc0\xe8\x70\x28\x91\xb5\x20\x2b\x30\xfb\x16\x0f\x2e\x7e\xdf\x15\xdc\x5a\xd7\x84\x73\x68\x87\xd4\x42\xbe\xd7\x8e\xda\x14\x7d\x05\x5c\x1a\xe6\x0d\x05\xc2\xf5\x48\xdb\x5a\xf8\x0e\x26\x65\x18\x23\x7a\x16\xc1\x7e\x5a\xd9\xa9\xe5\xdb\x10\x67\xd1\x2e\x9e\x5c\x89\x09\xc0\x35\xe1\xb8\x2f\xfe\x23\x28\xc3\x33\x4e\x49\x62\x60\xb0\x69\x6b\x66\x10\x62\x6d\x14\x17\x1b\x54\x31\xe4\xd4\x10\x92\xf1\x37\xa6\x34\xf6\xfd\x41\x5c\xd6\x02\x33\xe4\x62\x34\x18\x09\x85\x14\x3b\x54\x06\x18\x78\x67\xda\xa3\xba\x4f\x1d\xa2\x6a\x2b\x8a\x39\xa4\x44\x50\x87\xbd\x63\x0a\xc9\xf1\x61\x06\xa8\x94\x54\x29\xf4\xd1\x82\x57\xd0\x65\x20\x5f\x89\xdf\xd3\xb1\x99\x93\xd1\x03\x01\x3d\xfe\x44\x16\x7d\xb4\x58\x28\x34\x5b\x25\xc8\x45\xf0\x3a\x5a\x38\x69\xf1\x0a\x72\xb2\xd2\x4e\xf8\x83\xc9\x49\x3e\xd7\x69\x06\x55\x63\xf2\xcf\x14\xb9\x4a\xe2\x8f\x9a\x74\x24\x24\xf1\xdb\xb1\x9a\x97\x70\x9a\xa3\x51\x7b\x78\xf8\xa8\x1f\xe3\x0c\x08\x3d\x0b\x6c\x74\xfe\xab\xe4\x22\x39\xc9\x95\x7e\x75\x06\x71\x06\x71\x9a\xfa\x0b\xe5\x14\xf0\x3f\x66\x14\xf2\x18\xd0\x5d\x9b\xdd\x24\x21\x99\xe5\x0d\x53\xfa\x85\xd5\xe0\xe7\xd7\xad\x5f\xdd\x63\x67\x80\x37\x6d\x8d\x0d\x0a\xea\xea\x0b\x82\xa1\xbd\x60\x5d\xa3\x82\x06\xcd\x8b\x2c\x7d\x23\x93\x0e\x2e\x8f\x83\xa6\x53\xa8\x24\x85\xe4\xe1\xf1\x79\x6f\x70\xda\xc1\xc0\xce\x1f\x24\x5d\xbe\x76\x65\x4a\xd2\xd4\xf7\xc8\x8b\xed\x37\xd1\xfc\x43\x4a\x5b\xf1\x1f\x92\x3a\x82\x4b\x9c\xbf\x8f\x9f\xfa\xc4\x28\x2f\x11\xa6\xa7\x6f\x9b\x33\x4a\xa3\x85\x69\x5a\x97\x3c\x9d\x9c\xd3\x6d\xea\x64\x49\x46\x1f\x56\xc4\x61\xaa\x3c\x54\xca\xc9\xee\xb2\x83\x15\x98\xa6\x1d\xf9\x7b\xae\xc3\xc4\x19\xda\x52\xd5\x6c\x13\x7a\xb2\xc6\x37\xc4\x6f\x64\xcd\xc4\x06\xc8\x28\x0c\x4d\x2e\x0c\xaa\x8a\x15\x08\xc4\x3d\x3f\x5f\x81\x35\x9a\x64\xc7\xea\xf1\x8a\x8d\xb4\x77\xef\xd2\xdb\xb1\x3a\x0d\xc9\xef\xa2\x29\x27\xdf\xa6\x9b\xf7\x73\xbc\x41\x63\x50\xfd\xfb\x24\x6f\x90\x34\x33\x9a\xf7\x76\xa2\x97\xcb\x2e\xc4\xbc\xa7\xc1\x7d\x12\x74\xc3\xcd\xcb\xf6\x39\x2f\x64\xb3\xd4\x6d\xf5\xfd\x0f\xcb\xf6\x17\x2a\xe4\x49\x8d\xde\x89\x4c\xa0\x49\x3a\x4c\xae\x43\xd4\xf8\xe4\x4e\x1d\xb7\x2c\x7c\x1c\xbd\xce\xe3\xe4\x1c\x5f\xe8\x99\xab\x0f\x2b\x42\x0e\xe1\x78\xb5\xf7\x4f\x2c\x50\x80\x41\x09\x7e\x42\x59\xbb\x63\x6a\x0e\x41\xc3\x0a\xfa\x5e\xb0\x66\xf4\x0e\x63\x7a\xce\xd4\x93\xa1\x67\xb0\xe6\xda\xd0\xeb\xd7\x4a\xad\xf9\x73\x3d\x8c\x5c\xff\x96\x6a\x3a\x39\xf6\x0f\x25\x9b\x01\x4d\x52\x78\x78\x3c\xd4\xcb\x34\x2d\x69\xa8\x61\xaf\x98\x0c\xfb\x19\xd4\x38\x3f\xf9\x68\xe6\x15\xb2\xdd\x27\xee\x7a\xcd\x5a\x8c\x2d\xa0\x4b\xe3\xfe\x9f\x8c\x7f\x86\x66\x4a\x72\xcb\x5a\x57\x10\x68\x58\x3b\xad\xa7\x2b\x89\x9f\x30\xa7\x9a\x59\x87\x46\xcd\xe9\xe3\xcd\xed\x09\x33\x6a\x22\x10\x5e\xd1\xe2\xcc\x53\x74\xcb\xda\x87\xee\xcd\x2b\xa4\x8d\x9f\x05\x61\x49\xc3\x7c\xdd\x2a\x2e\x4c\x95\x9c\xe8\x2c\xf9\x58\xa6\x71\x06\x5d\x1a\xcd\xd3\xf5\xc2\x76\x84\x69\x0e\x4e\x28\xe7\xb5\xfc\x13\x55\xc1\x34\xc2\x54\xa3\x7f\x07\x00\x00\xff\xff\xac\x11\xca\x4d\xba\x0a\x00\x00")

func enumTmplBytes() ([]byte, error) {
	return bindataRead(
		_enumTmpl,
		"enum.tmpl",
	)
}

func enumTmpl() (*asset, error) {
	bytes, err := enumTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "enum.tmpl", size: 2746, mode: os.FileMode(420), modTime: time.Unix(1534276961, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xab, 0x24, 0xe2, 0x5, 0x2e, 0xf4, 0xce, 0xde, 0x3f, 0x9, 0x68, 0x84, 0x29, 0x4f, 0x20, 0x86, 0x59, 0x1a, 0xee, 0x5a, 0x2d, 0xc, 0xd4, 0xc, 0xdf, 0x6c, 0x1d, 0xd4, 0x1c, 0x4f, 0x24, 0xf}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"enum.tmpl": enumTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"enum.tmpl": &bintree{enumTmpl, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
