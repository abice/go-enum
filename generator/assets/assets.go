package assets

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
)

func bindata_read(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	return buf.Bytes(), nil
}

var _enum_tmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x57\x5f\x6f\xdb\x36\x10\x7f\xb6\x3e\xc5\x55\x48\x00\x29\x73\xe4\x0c\x7b\xeb\xe0\xa7\xb6\x0b\x5a\x20\x49\x81\x64\x7b\x09\x82\x80\x91\x4e\x36\x17\x89\x54\x49\xda\xb5\xa1\xe9\xbb\x0f\x47\x52\x32\xed\xc8\x69\x0b\x74\xc0\x5e\x0c\x91\xf7\xff\xee\x77\xc7\x73\xdb\x9e\x43\x81\x25\x17\x08\xf1\x12\x59\x81\x2a\xee\xba\x68\x36\x83\x77\xb2\x40\x58\xa0\x40\xc5\x0c\x16\xf0\xb4\x85\x85\x3c\x47\xb1\xaa\x89\xf8\xfe\x06\xae\x6f\xee\xe0\xc3\xfb\x8f\x77\x6f\xa2\xa8\x61\xf9\x33\x5b\x20\xb4\x6d\xe6\x3f\xbb\x2e\x8a\x78\xdd\x48\x65\x20\x89\x00\x00\xe2\xb2\x36\x71\x94\x46\x6d\x8b\xa2\x80\x73\xa2\x87\x96\x49\x2f\xd9\xcd\xa5\xd0\x24\x42\xb4\x13\xba\xbc\x66\x35\xc2\xdb\x39\x64\x74\xc8\xec\x89\x84\x2d\x7d\xcd\x94\x26\x5a\xc1\x73\x03\x71\xc5\xb4\x91\x65\xa9\xd1\xc4\x70\xe1\x99\x40\x31\xb1\x40\x38\x51\x1f\x45\x81\x9b\x29\x89\x54\xab\x40\xdf\x5f\x74\xd4\xd0\x75\xd1\xc4\x6a\x24\x1d\x37\x56\x07\xf1\x34\xd5\x2a\x7f\xde\x57\xec\x6c\xfe\x03\x25\x57\xda\x40\xd7\xb5\x2d\x9c\xc8\x41\x40\xaf\x9e\xbc\x09\xa7\xb9\x37\xec\x0d\x00\x2f\x01\xbf\xf4\x1c\x36\x96\xf8\x31\xee\xba\xd9\x0c\x6e\x9f\x79\xd3\x60\x01\x96\xd4\xb6\x58\x69\xb4\xf7\x6d\xeb\xb9\x3f\x2b\x2c\xf9\x06\x0b\x92\xea\x3a\xe0\x1a\x18\x11\xfb\x14\x75\x1d\xc8\x12\xcc\xb6\xc1\x9d\x88\xbb\xb7\x09\xef\x03\xe4\x65\x6f\xfd\x9d\xac\x6b\x14\x86\x08\xa1\x99\xe0\x9a\xf8\x9d\x28\xd5\xef\x98\x23\xbb\xa8\x7c\xa8\x17\x36\x2b\xa1\x63\x73\xe0\xd2\x30\xc7\x28\x10\x2e\x86\x8c\x75\x1d\xfc\x02\x41\x06\x07\x67\x5d\x02\x3c\x7f\x58\x94\x90\xf3\xa5\x89\xa3\xda\x4e\x1e\x6d\x75\x48\x81\xad\xdf\x7e\x49\xdd\x87\x07\x95\x8b\x38\x25\x74\x82\xc1\xba\xa9\x98\x41\x88\xb5\x51\x5c\x2c\x50\xc5\x90\x51\x2d\xa9\x03\x3e\x33\xa5\xb1\x6d\x77\xb8\xec\x3a\x60\x86\x44\x8c\x06\x23\x21\x97\x62\x8d\xca\x00\x03\x27\x4c\x77\x54\xb2\x50\x20\x2a\x57\x22\x1f\xd3\x94\x08\x02\x87\x13\x4c\x21\xd9\x27\x4e\x01\x95\x92\x2a\x85\x36\x9a\xf0\x12\x36\x53\x90\xcf\x14\xdf\xe3\x3e\x9b\x45\xe0\x3d\x29\x7a\xf8\x9d\x38\xda\x68\x32\x51\x68\x56\x4a\x90\x88\xe0\x55\x34\xb1\x55\xe6\x25\x64\xc4\xa5\x6d\xcf\xf4\x2c\x07\xfe\x5c\xa4\x53\x28\x6b\x93\x7d\x20\xcb\x65\x12\x9f\x6a\x82\xa0\x90\x14\xdf\x9a\x55\xbc\x80\x43\x1f\x8d\xda\xc2\xfd\xa9\x7e\x88\xa7\x40\xda\xa7\x3e\x1a\x9d\x7d\x92\x5c\x24\x07\xbe\xd2\xaf\x9e\x42\x3c\x85\x38\x4d\x3d\xf4\x08\x01\x3f\xd1\x23\xef\x47\x1a\x02\xdb\x0e\x21\x82\x59\x56\x33\xa5\x97\xac\x02\x37\xfa\xae\xdc\xe9\x0e\x37\x06\x78\xdd\x54\x48\x3d\xa1\xc1\x2c\x11\x0c\xdd\x79\xee\x0a\x15\xd4\x68\x96\xb2\x70\x85\x4c\x36\x70\xb6\x6f\x34\x0d\x55\x25\x29\x24\xf7\x0f\x4f\x5b\x83\x61\x05\x7d\x74\x8e\x90\x6c\xb2\x5b\x9b\xa6\x24\x4d\x5d\x8d\x1c\xd8\xfe\x14\xf5\x37\x5c\x5a\x89\x1f\x70\x6a\x4f\x5d\x62\xe5\x9d\xfd\xd4\x39\x46\x7e\x09\x3f\x78\x5d\xd9\x2c\x53\x1a\x4d\x4c\xdd\x58\xe7\x89\x72\x0c\xb7\xa9\x85\x25\x31\xbd\x99\x53\x0c\x21\xf2\x50\x29\x0b\xbb\xb3\x0d\xcc\xc1\xd4\xcd\x10\xbf\x8b\xb5\x1f\x56\x7d\x59\xf4\x97\xbe\x24\xb7\x39\x13\x87\x81\xd3\x9d\x40\x05\x5c\x18\x54\x25\xcb\x31\x3b\x1e\x32\xf1\x26\x6e\xfa\x0f\xec\x6d\x17\xc4\xbb\x66\x0a\x82\xae\x8b\xa2\x89\xfe\xca\x4d\xbe\x84\x35\xc5\xea\x66\x5f\x42\x03\xd6\x56\x2d\x67\xba\xe7\x7c\x1b\x4d\x5c\xb2\xe6\xb0\xf6\x04\x97\xcc\x80\xe0\x93\xb8\x4e\x3d\x83\xe0\x15\x51\x6d\x16\x5e\xe0\x7a\x97\x2d\xdf\xa4\xff\x79\xda\x29\xc1\xee\xc1\x3a\xc8\x70\xa1\xf8\x1a\x95\xa3\x8d\xe6\xf9\x30\xcd\x96\x93\x80\xee\x24\xdd\x33\x38\x02\xf7\x1d\xce\xa7\x47\x4a\xff\xb7\x96\x62\xbf\x1d\x3f\xdd\xde\x5c\x1f\x3a\x48\x5c\x99\xa7\x7f\x7f\x37\x92\xa6\x9f\xd1\x8d\x47\x3d\x1a\x38\x7e\xa4\x19\xad\x57\xff\xe3\x66\x2c\x2b\xb6\xe8\xbb\x11\x5f\x4c\xa1\x4b\x59\x31\xb1\x00\x62\xf2\xcb\xcf\x00\x17\xa0\xd8\x5f\xeb\x4d\x34\xd4\x9a\xc3\x7b\xb7\xeb\xc9\x57\xc3\x5b\xb3\x2a\xf5\xce\xaf\xa3\x30\x26\x57\xa5\xcb\xd7\x7d\xbc\x44\x63\x42\x4c\x7f\xcb\xc9\x4b\xa4\x01\x1e\xcc\x8e\x00\x2e\x67\x1b\x6f\xf3\x8e\x16\xb0\x03\xa3\x0b\x6e\x96\xab\xa7\x2c\x97\xf5\x4c\x37\xe5\xaf\xbf\xcd\x9a\x3f\x28\x91\x07\x39\x7a\xc5\x32\x29\x4d\xd2\x7e\x8d\xd8\x59\x8d\x0f\x1e\xb8\xfd\x92\xf9\x8f\xbd\x2d\x7b\x58\x63\x86\x4d\x7b\xe4\x1d\x86\x39\x69\xf6\xe6\x78\xb9\x75\xab\x32\x90\x81\x1e\x09\x6e\x5d\xe8\x3a\x9a\x99\x63\x2f\xb9\x9d\x6a\x82\xd5\x83\xb4\xdf\x99\xc6\x58\x5d\x30\xb4\xce\x56\x5c\x1b\xda\x62\x1b\xa9\x35\x7f\xaa\xfa\xf9\xea\x66\xaf\x26\xca\xbe\xbc\x4f\xd9\x88\xd2\x24\x85\xfb\x87\x5d\xbe\x4c\xdd\x10\x86\x6a\xf6\x8c\x49\x7f\x3f\x85\x0a\xc7\xd7\x10\x5a\x40\x72\xd9\x6c\x13\xdb\x5e\xa3\x1c\x43\x09\xa8\x69\xec\xff\x8c\xe1\x4f\xcd\x48\x4a\xae\x58\x63\x13\x02\x35\x6b\xc2\x7c\xda\x94\xb8\x01\xf3\xe2\x65\xf3\x85\xfa\x9e\x91\xdb\x8f\xa8\x00\x20\xbc\xa4\xc3\x91\xbd\xf0\x8a\x35\xf7\x9b\x17\x2b\xa1\x36\x6e\x16\xf8\x23\x6d\x56\xb7\x8d\xe2\xc2\x94\xc9\x01\xce\x92\xd3\x22\x8d\xa7\xb0\x49\xa3\xf1\x70\x1d\xb0\x6d\xc0\xb4\x94\x04\x21\x67\x95\xfc\x8a\xca\x3e\x80\x21\x46\xff\x0d\x00\x00\xff\xff\x5d\xb6\x8e\x9a\x82\x0e\x00\x00")

func enum_tmpl() ([]byte, error) {
	return bindata_read(
		_enum_tmpl,
		"enum.tmpl",
	)
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		return f()
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() ([]byte, error){
	"enum.tmpl": enum_tmpl,
}
// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for name := range node.Children {
		rv = append(rv, name)
	}
	return rv, nil
}

type _bintree_t struct {
	Func func() ([]byte, error)
	Children map[string]*_bintree_t
}
var _bintree = &_bintree_t{nil, map[string]*_bintree_t{
	"enum.tmpl": &_bintree_t{enum_tmpl, map[string]*_bintree_t{
	}},
}}
