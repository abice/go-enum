// Code generated by go-bindata. DO NOT EDIT.
// sources:
// enum.tmpl (8.264kB)

package assets

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _enumTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xe4\x19\x4d\x8f\xdb\xb8\xf5\x6c\xfd\x8a\x17\x21\xd9\x95\x5c\x47\x4e\xd1\xa2\x87\x2c\xe6\x10\x64\xd3\x60\x17\xcd\x24\xc0\xa4\x7b\x09\x82\x80\x96\x9e\xc6\xdc\x91\x48\x2d\x49\x79\xe4\xaa\xfa\xef\xc5\x23\x29\x59\xd6\xc8\x33\xd3\x74\x66\x83\x62\x2f\x86\x45\x3e\xbe\xef\x4f\xb2\x6d\x9f\x43\x86\x39\x17\x08\xe1\x16\x59\x86\x2a\xec\xba\x60\xbd\x86\xd7\x32\x43\xb8\x44\x81\x8a\x19\xcc\x60\xb3\x87\x4b\xf9\x1c\x45\x5d\xd2\xe6\x8f\xef\xe1\xfc\xfd\x47\x78\xf3\xe3\x4f\x1f\x9f\x04\x41\xc5\xd2\x2b\x76\x89\xd0\xb6\x89\xff\xdb\x75\x41\xc0\xcb\x4a\x2a\x03\x51\x00\x00\x10\xe6\xa5\x09\x83\x38\x68\x5b\x14\x19\x3c\xa7\xfd\x31\x65\xc2\x4b\x74\x53\x29\x34\x1d\xa1\xbd\xa7\xb4\x78\xce\x4a\x84\x97\x67\x90\xd0\x47\x62\xbf\xe8\xb0\xdd\xdf\x31\xa5\x69\x2f\xe3\xa9\x81\xb0\x60\xda\xc8\x3c\xd7\x68\x42\x78\xe1\x81\x40\x31\x71\x89\xf0\x54\xfd\x24\x32\x6c\x56\x74\xa4\xa8\x47\xf8\x7e\xa1\x4f\x0d\x5d\x17\x2c\x2c\x46\xc2\xf1\xde\xe2\x20\x98\xaa\xa8\xd3\xab\x63\xc4\x8e\xe6\xbf\x21\xe7\x4a\x1b\xe8\xba\xb6\x85\xa7\x72\x38\xa0\xeb\x8d\x27\xe1\x30\xf7\x84\x3d\x01\xe0\x39\xe0\x6f\x3d\x84\x95\x25\xfc\x12\x76\xdd\x7a\x0d\x17\x57\xbc\xaa\x30\x03\xbb\xd5\xb6\x58\x68\xb4\xeb\x6d\xeb\xa1\x3f\x28\xcc\x79\x83\x19\x9d\xea\x3a\xe0\x1a\x18\x6d\xf6\x2a\xea\x3a\x90\x39\x98\x7d\x85\x87\x23\x6e\xdd\x2a\xbc\x17\x90\xe7\x3d\xf5\xd7\xb2\x2c\x51\x18\xda\x18\x93\x19\x2d\x13\xbc\x3b\x4a\xf6\x3b\xc5\xc8\x41\x2a\x2f\xea\x0b\xab\x95\x31\x63\x67\xc0\xa5\x61\x0e\x50\x20\xbc\x18\x34\xd6\x75\xf0\x27\x18\x69\x70\x60\xd6\x29\xc0\xc3\x8f\x8d\x32\x86\xbc\x49\xe2\x24\xb6\xa7\x5f\xac\x75\x08\x81\xb5\xdf\xb1\x49\xdd\x1f\xef\x54\x4e\xe2\x98\xbc\x13\x0c\x96\x55\xc1\x0c\x42\xa8\x8d\xe2\xe2\x12\x55\x08\x09\xd9\x92\x22\xe0\x03\x53\x1a\xdb\xf6\xe0\x97\x5d\x07\xcc\xd0\x11\xa3\xc1\x48\x48\xa5\xd8\xa1\x32\xc0\xc0\x1d\xa6\x35\x32\xd9\xf8\x40\x90\xd7\x22\x9d\xc3\x14\x09\x72\x0e\x77\x30\x86\xe8\x78\x73\x05\xa8\x94\x54\x31\xb4\xc1\x82\xe7\xd0\xac\x40\x5e\x91\x7c\x5f\x8e\xc1\xac\x07\x7e\x22\x44\x9f\x7f\x20\x88\x36\x58\x2c\x14\x9a\x5a\x09\x3a\x22\x78\x11\x2c\xba\xb6\xe5\x39\x24\x42\xa6\x4c\x23\x78\x5f\x78\x4d\xff\xb9\xd0\x28\x34\x37\x7c\x87\x50\x11\x7f\x2b\xc8\x88\x7f\x8d\x15\xa3\x7c\x00\x85\x94\x57\x75\x45\x42\x55\x0a\x77\x28\x0c\xd4\x42\x60\x8a\x5a\x33\xb5\x87\x54\x6a\x43\x0e\x59\xc8\x6b\x54\x29\xd3\x24\xff\xa0\x08\x9e\xc3\x35\x42\x26\xc5\xf7\x06\x04\x62\x06\x46\x26\xf7\x90\xc4\x9d\xd6\xc9\x47\xf9\x0f\xc2\x6a\x55\x14\xdf\x26\x5a\x6f\xcc\x85\x97\x92\x95\xa8\x6d\x5e\xe8\x61\x27\x3a\x7f\x11\xaf\x20\x2f\x4d\xf2\x86\xb4\x9b\x47\xe1\x33\x4d\x61\x26\x24\xd9\x70\xc7\x0a\x9e\xc1\xd4\x0e\x46\xed\xe1\xd3\x33\xfd\x39\x5c\x01\x61\x5f\x41\xcf\xe3\xcf\x92\x8b\x68\x22\x05\xfd\xea\x15\x84\x2b\x08\xe3\xd8\x87\x17\x79\xf9\x03\x72\xe4\xf9\x88\xc7\xc1\x6b\x13\x2d\xe9\x3c\xa9\x8c\x82\xde\xe7\xa2\x66\x72\x34\x86\x0f\x46\x45\x31\x2c\x27\x2e\xdd\x0e\xbc\x7d\xd7\x04\x5d\xd0\x67\x93\x1e\x67\xc9\x94\xde\xb2\x02\x5c\xc9\x78\xe7\xbe\x3e\x62\x63\x80\x97\x55\x81\x94\x4b\x34\x98\x2d\x82\xa1\x35\x0f\x5d\xa0\x82\x12\xcd\x56\x66\x27\x99\x19\x61\x8a\x62\x88\x3e\x7d\xde\xec\x0d\x8e\x1d\xdf\x33\xe5\x36\xa2\x26\xb9\xb0\x9a\x8f\xe2\xd8\xd9\xdf\xc5\xe8\x3f\x45\x79\x07\x47\xb5\x38\xcd\xd3\x72\xca\xd4\x11\xba\xc8\x9e\x77\xf4\x63\xc7\x18\xf1\x25\x7c\xbd\x72\x9e\x60\x81\xe2\x60\x61\xca\xca\x32\x4f\x3b\xa7\xc2\x3d\xb6\x31\x40\x40\x4f\xce\x48\x86\xb1\x57\xa3\x52\xc1\xa2\x0b\x16\xcb\x06\xce\xc0\x94\xd5\x20\xbf\x93\x75\x62\x15\xa9\x20\xd1\xbf\x15\xf6\x47\xd4\x45\xc1\x85\x19\xfe\x6b\xa3\xba\x2e\xd8\x31\x35\x0d\xb2\x37\x4a\x9d\xf3\xe2\x83\x51\x70\xe6\xa4\xd1\xc9\x39\x5e\x47\xa1\xab\x98\x95\xe4\xc2\xa0\xb2\xee\xc7\x8b\x30\x86\xf5\x1a\xa4\x40\xa8\x50\xb9\xaa\x93\x4b\x05\x7d\x1b\x90\x16\x4c\x6f\x51\x5b\x13\x5c\xa4\x4c\x4c\x35\x4f\x6b\x82\x90\x11\xca\x9c\xa5\x98\x9c\xd6\x39\xc1\x46\x8e\x87\x01\xbc\xed\x62\x88\x48\x51\x47\x79\xd0\x01\x9d\x1d\x74\x67\x95\x75\x23\xa2\x06\xa5\x92\x42\x6d\xc2\x7b\x05\xd7\x3c\x43\xe5\x7b\x05\x99\x83\x26\xfe\xd8\xa6\x40\x2b\x9a\x4e\x2c\x54\xa6\xf8\x0e\x95\xaf\xeb\x3b\xd7\x37\x30\xe3\x3c\x49\x56\xb6\xfa\x6e\x11\x0a\xae\x8d\xd5\x05\x36\x15\x66\x1c\x45\xba\x0f\x16\xfa\x9a\x9b\x74\x0b\x3b\xb2\xbe\x2b\xa2\x11\x21\xb6\x8c\xa7\x2e\xdb\x9a\xbf\xfd\xf5\xe5\x09\x96\x77\xb1\x87\x72\x2e\xe5\xc0\x9c\x37\xcd\x3b\xd3\x2e\x76\x09\x6f\x64\x7d\x4a\x31\x33\xde\x45\x72\x51\x0e\xa3\x0c\x6f\x4b\xd4\xd6\x69\xf9\x12\x95\x57\x27\xd3\x43\xde\x26\x78\xa7\xe6\x15\xec\xbc\x2f\x6b\xa3\xa8\xce\x25\xaf\x8c\xe4\xd1\x2e\xfe\xc1\x6d\x8c\x6c\x30\xe6\x75\xca\x26\x2b\x7c\xb0\x2e\x16\xe4\xdb\x8b\x43\xab\x62\xc5\x75\xa1\x75\xb7\xb8\x3e\xd2\x76\xf1\x37\x12\xfb\x40\xff\x41\xc5\x3f\x06\x1f\x9c\x63\x77\x70\x99\x3b\x1d\x66\x79\x13\x07\x49\xe2\x19\xb4\xfc\xf9\x34\x72\x2a\x17\x04\x8e\x35\x4b\x65\xd9\x93\xae\xef\x43\xbb\xbe\x9f\x4f\x2f\x3d\xae\xff\x81\xaf\x09\xea\xe5\x11\x6e\xc7\xc2\x63\x60\xcf\x0b\xc9\x08\x3d\x65\xc2\x5f\xb5\x14\x7d\x71\xd3\x80\x3b\x54\x7b\xb3\xb5\x3d\x0f\xf9\x91\x87\xa4\xcc\xcc\xcd\xf7\xb4\x22\xea\x72\x83\xea\x4e\xdd\x3c\x08\x89\x47\xd1\x6c\xfd\x98\x66\xab\x1f\xd5\x6e\xcb\x43\x1a\xfd\x5a\xf4\xb7\x65\xa3\xe5\xb7\xca\xbe\xcb\x87\x4b\xbf\x5d\xb0\x18\x1a\x8c\xe0\x64\x57\xa1\x5d\x3b\xb9\x5e\x83\xab\x89\x93\x22\xef\xea\xa5\xdb\x9b\x2d\xf5\xd3\x4a\x6f\x21\xa9\xd9\x1b\x57\xda\x99\x96\xef\xd0\xeb\xad\x86\xf6\xc7\x75\xd2\xdf\x82\x1b\xeb\xab\x51\x33\xe2\x65\x68\xc5\xfc\x9f\xbe\x55\xce\x0b\x76\xe9\x59\xbc\xc0\x1b\xdd\xe8\x5b\x59\x30\x71\x09\x04\xe4\x7b\x8c\x81\x49\x20\x1e\x6f\x6b\x91\xd0\x90\x35\x87\x71\x71\xe8\x45\x77\xb7\xf6\x9c\xe4\x00\xc1\x50\x54\x46\x8d\xa6\xeb\x9d\xdf\xde\xce\xe3\x5b\x34\x66\xac\xc9\xbb\x98\x7c\x8b\xd4\xc8\x8f\x5a\xb8\x91\x0e\x97\x8d\xa7\xf9\x91\x3a\xc9\x09\xd1\x4b\x6e\xb6\xf5\x26\x49\x65\xb9\xd6\x55\xfe\xe7\xbf\xac\xab\xbf\x93\x22\x27\x3a\xba\x85\x32\x21\x8d\xe2\x7e\xf8\x3c\x50\x0d\x27\xb3\xd3\xc9\x3e\x7a\xa6\x85\x26\x3b\xda\xb6\xf7\xbc\x2e\x8a\xc9\xc4\xa4\x8d\xaa\x53\xd3\xd2\x0c\x36\x5e\x9f\x7c\x06\x8b\x5f\xec\x00\x47\x31\xba\xd8\x48\x59\xb4\xed\x7a\x09\xaf\xb2\x0c\xb4\x2c\x49\xb0\x5c\x52\xf8\x1b\x09\xd7\x5b\x34\x5b\x6a\xb3\xb7\x5c\xfb\xbc\x70\xcd\xb4\xbd\xcd\xc8\x6a\x2b\xd3\x61\x88\xa1\x2f\xa9\xec\x84\xb8\x5c\x77\x7e\xbc\x1f\xcd\x68\x8b\x0b\x34\x8b\xc5\x88\x26\x0d\x89\xe0\xa6\x44\xab\xc0\x73\xbc\xbe\x29\x92\xf5\xae\xe3\xee\xbb\x99\x91\xdc\x86\x45\x93\xf4\x1d\xbb\x9d\x11\xf6\x34\xf2\x5e\x23\xf0\x4b\x21\x15\x3a\x19\xac\x7f\xae\x80\x1b\xb8\xe6\x45\x01\xbf\xd6\xda\xc0\x06\x81\xe6\x04\xe1\xa6\x5a\xd7\x24\xf7\x96\xf2\xce\xf1\xdf\x4e\x12\x73\x0c\xde\x73\x9a\xf0\x57\x65\x23\xcd\x35\x09\xc5\xec\x19\x18\x55\xe3\x41\x6b\xb3\x63\x47\x93\x4c\xaf\x09\x9a\xc4\xd9\x7a\x66\x1a\x59\x41\xce\x0a\x8d\x93\xa1\xc4\x25\xec\x29\xa2\xe4\xc0\x7d\x4c\x8a\xee\x91\x46\x87\xa4\x1f\x8f\x75\xe6\xf3\xce\x71\x21\xfa\xea\x04\x39\xa7\xce\x3b\x93\x24\xcf\xe1\x89\x67\x74\x34\xcd\x0a\x5e\xf4\xb7\x34\x37\x47\x2b\x96\xa6\x58\x19\xed\x12\xab\x1d\xa5\x88\x73\x37\x70\x25\xd3\xb4\x3b\xd1\xd0\x83\x56\x84\xc7\x12\x78\x28\x63\x53\xeb\xce\x54\x35\xe7\x66\xb7\x5e\xb6\xfc\x7c\xf1\xfe\x1c\x52\xa9\x14\xa6\xa6\xd8\x83\x46\xc5\x59\xc1\xff\x45\xd3\xe9\x5c\x76\x32\x12\xe8\x44\x2f\xa6\x98\x15\x73\x84\x7a\xfe\xf6\xc5\x5d\xd3\x93\x5b\x5d\xd8\x0b\x83\x90\xfe\x86\x56\x7c\xe1\xfd\x72\x24\x3e\xf5\xae\x89\xc7\x19\x89\xa9\xcd\xc6\x4a\xf1\xd7\x39\x1e\xf1\xfc\x5d\xce\x44\xe0\x0c\xef\x12\x39\x57\xb2\x9c\x08\x3d\x9b\x1c\x8e\x28\x44\x9b\x99\xbb\x9d\x51\x12\x08\x16\x3b\xa6\xa0\x19\xa7\x11\x17\xb7\x2f\xcf\x9c\xbc\x03\xb6\x68\xb3\x82\xef\x9a\xe9\xed\xce\xcc\xe5\x8e\x8b\x7a\xe1\xc2\xbc\x89\x27\x35\xf9\xd8\x1d\x8e\x3d\x83\x89\xec\x2b\x2a\x15\x99\xce\x15\x2b\x12\xee\xe6\xfe\xed\x45\xe1\xc2\xa8\x7b\xd6\x05\xb2\xe4\xe3\x96\x86\x87\x0a\x70\xcb\xe9\xef\x1c\xe3\xbf\x63\x60\x5b\xf1\xfe\x88\xb1\x6d\x05\xff\x7f\x09\xef\xa3\xe8\x3e\xcc\x10\x87\xb7\xd2\xe1\x31\x6a\x78\x2f\x9d\x79\x69\x20\xc3\xb5\xad\xef\x7a\x79\xbe\x77\x0f\x9e\x40\x7d\x6e\xef\x75\xee\x41\xa4\xeb\x66\x2e\x83\xed\x5b\x85\xed\x57\x04\x2b\x87\xd3\xfe\xe5\x6b\x0e\xd4\xc9\x42\x46\xb2\x37\xa0\x32\x87\x4a\x6a\xcd\x37\x45\x7f\x6d\xd9\x5f\x99\xca\x7c\x72\xde\x1b\x6e\x06\x69\x14\xc3\xa7\xcf\x87\xb6\xdd\x94\x15\x69\xbf\x64\x57\x18\xf5\xeb\x2b\x28\x70\xfe\xa1\x25\xa6\x79\x5f\x56\xfb\xc8\x5e\xbd\xcf\x42\x0c\x16\x30\x65\x75\xb0\x80\x7d\x9a\x9e\x51\xc9\x3b\x56\x59\x85\x40\xc9\xaa\xb1\x3e\x5d\x6f\xea\x5f\xb6\x26\xdd\xa9\x37\xd4\x7d\xe6\xcd\x3e\x33\x8c\xe6\x14\x9e\xd3\xc7\x89\x37\xb1\x77\xac\xfa\xd4\xdc\x78\xfd\xd2\x46\x8d\x43\x2e\x2f\x4d\x72\x51\x29\x2e\x4c\x1e\x4d\xc6\x9d\xe8\x59\x16\x87\x2b\x68\xe2\x60\x5e\x5c\x97\x52\xad\xc0\x34\x5e\x8c\x44\x4e\xfa\x47\x3d\x3c\xf2\xd1\xff\x04\x00\x00\xff\xff\x09\x72\x1e\x70\x48\x20\x00\x00")

func enumTmplBytes() ([]byte, error) {
	return bindataRead(
		_enumTmpl,
		"enum.tmpl",
	)
}

func enumTmpl() (*asset, error) {
	bytes, err := enumTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "enum.tmpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x72, 0xf2, 0x56, 0x22, 0x7, 0x4d, 0x99, 0x2a, 0xf1, 0x72, 0x1f, 0x73, 0x29, 0xc1, 0xd7, 0xcc, 0xba, 0xa7, 0x1, 0xba, 0x1, 0x7a, 0x2e, 0xad, 0xe6, 0xf7, 0x65, 0xbb, 0x63, 0x7a, 0x1d, 0x7f}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"enum.tmpl": enumTmpl,
}

// AssetDebug is true if the assets were built with the debug flag enabled.
const AssetDebug = false

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"enum.tmpl": {enumTmpl, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
