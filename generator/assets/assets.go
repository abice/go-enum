// Code generated by go-bindata.
// sources:
// enum.tmpl
// DO NOT EDIT!

package assets

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _enumTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x54\x4d\x4f\xeb\x3a\x10\x5d\xd7\xbf\xe2\x10\x81\x94\xf0\x4a\xca\xfa\x3d\x75\xf5\x60\xc1\x82\x0f\x09\xee\xdd\x20\x84\x4c\x33\x29\x16\x8d\x93\xeb\xb8\xbd\xa9\x2c\xff\xf7\xab\xb1\x93\x36\xed\xa5\x3b\xdb\x33\xe7\x78\xce\xcc\xb1\x9d\xbb\x42\x41\xa5\xd2\x84\xe4\x93\x64\x41\x26\xf1\x5e\xcc\x66\xf8\xbf\x2e\x08\x4b\xd2\x64\xa4\xa5\x02\x1f\x5b\x2c\xeb\x2b\xd2\xeb\x8a\x83\x37\x8f\x78\x78\x7c\xc1\xed\xcd\xdd\xcb\x99\x10\x8d\x5c\x7c\xc9\x25\xc1\xb9\xbc\x5f\x7a\x2f\x84\xaa\x9a\xda\x58\xa4\x02\x00\x92\xb2\xb2\x89\xc8\x84\x73\xa4\x0b\x5c\x71\x7c\x7c\x33\xf3\xf2\xbd\x8b\x5a\xb7\x0c\xe1\xd8\x39\x1f\x3e\xc8\x8a\xf0\xef\x1c\x39\x6f\xf2\xb0\x63\xb0\x73\x30\x52\x2f\x09\xe7\xe6\x4e\x17\xd4\x4d\x71\xbe\x91\xab\xf5\x28\xf5\x27\x6f\x5b\x78\x2f\x26\xce\x41\x95\xa0\x5f\x7d\x4e\x64\x49\xde\x13\xef\x67\x33\x3c\x7f\xa9\xa6\xa1\x02\x21\xe4\x1c\xad\x5a\x0a\xe7\xce\xf5\xd9\x4f\x86\x4a\xd5\x51\xc1\x28\xef\xa1\x5a\x48\x0e\x0e\xc5\x79\x8f\xba\x84\xdd\x36\xb4\x87\xc4\xf3\x20\xd5\xfb\x20\xff\x14\xdb\xbe\xb4\xa8\x03\xd7\x60\xe0\x98\x7d\x0e\x55\x5b\xd9\x93\xf5\x00\xbd\x13\x3e\x68\x0a\x72\x4f\x60\xf1\x0f\x9c\x6b\xd7\x1f\x87\xb9\x03\xc1\xbe\x50\x6e\x7a\x5c\x65\x3c\x1d\x58\xaa\x9a\x95\xb4\x84\xa4\xb5\x46\xe9\x25\x99\x04\x39\x77\x94\x1d\xf0\x24\x4d\x4b\xce\xed\xe7\xe2\x3d\xa4\x65\x88\x6d\x61\x6b\x2c\x6a\xbd\x21\x63\x21\x11\xc1\x7c\xc6\x8d\x1b\x03\x44\xb9\xd6\x8b\xef\x98\x52\xcd\x23\x8a\xc0\x0c\xe9\x61\x70\x0a\x32\xa6\x36\x19\x9c\x98\xa8\x12\xdd\x14\xf5\x17\xcf\xfd\xfd\x30\x2d\xa8\x7c\x65\xa2\xb7\xff\x38\xc3\x89\xc9\xc4\x90\x5d\x1b\x7d\x54\x45\xda\x65\x53\x68\xb5\x12\x13\x2f\x4e\x64\x5c\x67\x53\x94\x95\xcd\x6f\xf9\xe2\x32\x4d\x2e\x5a\xf6\x81\xae\x59\xde\x46\xae\x54\x71\x04\x48\xa6\xe0\x8b\x33\x11\x6c\xce\x13\xcb\x2b\x69\xda\x4f\xb9\xc2\xa0\x3a\xed\x70\x79\x08\xca\x70\x1f\x73\x5e\xa8\xb3\x69\x86\xf4\xf5\xed\x63\x6b\x69\x2c\xb7\xaf\x2e\x06\xd2\x2e\x7f\x0e\x1d\x4a\xb3\x5e\x80\x17\xa7\xb9\x7f\xe8\x6a\xc4\x6e\xa9\xb3\x3d\x4d\x16\xf9\x99\x5e\xf7\x8f\x2d\x36\x3e\x24\x65\x62\x62\xab\x26\xd4\xc0\x91\x53\xb3\xca\xc2\x28\x38\xe9\x6c\xce\xa5\x8c\xbb\x4d\xc6\x84\xd6\x5e\x76\x98\xc3\x56\xcd\x4e\x46\x2c\x79\x70\xdf\x7e\x71\xf0\x33\xec\xac\xb7\xfb\x1d\x8e\xe6\x1c\x5e\xf3\x1c\x89\x73\x7d\xdd\xaa\xdc\xc6\x3f\x00\xde\x27\x42\x6c\xa4\x39\x86\xdc\xcb\x06\x73\x7e\x4a\x95\x6c\xc6\xd9\x62\xe8\x9f\xc2\x71\xfb\x86\x4e\x0f\x6e\x8e\xde\x6b\xad\x39\xe1\xbe\x7b\xd9\xbc\xaa\xbf\x8c\xd7\x5a\x33\x76\x19\x5b\xea\xb9\x31\x4a\xdb\x32\x4d\x8e\xba\x7a\x51\x64\xc9\x14\x2a\x58\xe8\x1b\x09\xf1\x0d\x07\x11\x6b\x7d\x20\x23\x5f\xd5\xbf\xc9\x2c\x64\x4b\x18\x75\xf5\x4f\x00\x00\x00\xff\xff\xa9\x82\xa0\x81\xe7\x05\x00\x00")

func enumTmplBytes() ([]byte, error) {
	return bindataRead(
		_enumTmpl,
		"enum.tmpl",
	)
}

func enumTmpl() (*asset, error) {
	bytes, err := enumTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "enum.tmpl", size: 1511, mode: os.FileMode(420), modTime: time.Unix(1502999707, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"enum.tmpl": enumTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"enum.tmpl": &bintree{enumTmpl, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

