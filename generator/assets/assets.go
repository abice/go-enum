// Code generated by go-bindata. DO NOT EDIT.
// sources:
// enum.tmpl (8.705kB)

package assets

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _enumTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xe4\x59\x5f\x8f\xdb\xb8\x11\x7f\xb6\x3e\xc5\x9c\x90\xbb\x93\x5c\x47\x4e\xd1\xa2\x0f\x39\xec\xc3\xe5\x4f\x83\x3b\xf4\x36\x41\x37\xcd\x4b\x10\x04\x5c\x69\xb4\xe6\xad\x44\xea\x48\xca\x2b\x57\xd5\x77\x2f\x86\xa4\x64\x59\x96\x77\xb7\xe9\xee\x05\x45\x5f\x0c\x53\x1c\x0e\xe7\x37\x33\x9c\x3f\x64\xdb\x3e\x85\x0c\x73\x2e\x10\xc2\x0d\xb2\x0c\x55\xd8\x75\xc1\x7a\x0d\x2f\x65\x86\x70\x85\x02\x15\x33\x98\xc1\xe5\x0e\xae\xe4\x53\x14\x75\x09\xaf\xde\xc2\xf9\xdb\xf7\xf0\xfa\xd5\x4f\xef\x13\xa2\xfc\x80\x4a\x73\x29\x9e\x43\xdb\x42\xb2\x75\x03\x70\x4c\xfe\x8e\x5b\xbe\x9f\x53\x7e\xe4\x27\x5f\xd4\xbc\xc8\xe0\x15\x33\xe8\xa6\x2f\x69\x4c\xc3\xd1\xbc\x81\x17\xbb\xfd\xac\x79\xb1\xa3\xb9\xa0\x62\xe9\x35\xbb\x42\x68\xdb\xc4\xff\xa5\xaf\xbc\xac\xa4\x32\x10\x05\x00\x00\x61\x5e\x9a\x30\x88\x83\xb6\x45\x91\xc1\x53\x9a\x1f\x43\x25\x20\x04\x34\x95\x42\xd3\x12\x9a\x7b\x42\x1f\xcf\x59\x89\xf0\xfc\x0c\x12\x1a\x24\x76\x44\x8b\x87\xf9\xf7\xbb\x6a\x34\x6f\x47\xc3\xfc\x96\x29\x4d\x73\x19\x4f\x0d\x84\x05\xd3\x46\xe6\xb9\x46\x13\x42\xf8\x2c\xf4\x64\xa0\x98\xb8\x42\x78\xa2\x7e\x12\x19\x36\x2b\x5a\x54\xd4\x23\x8e\x1f\x68\xa8\x09\xe5\xc2\xf2\x24\x2e\x6f\x2d\x17\xa2\xa9\x8a\x3a\xbd\x3e\x64\xed\x76\xfd\x17\xe4\x5c\x69\x03\x5d\xd7\xb6\xf0\x44\x0e\x0b\xfc\x3f\xbf\xdd\x08\x82\xdf\xd7\xed\x03\x3c\x07\xfc\xcd\x7f\x73\xa0\xc3\xcf\x61\xd7\xad\xd7\x70\x71\xcd\xab\x0a\x33\x70\x53\x6d\x8b\x85\x46\x3b\xd1\xb6\x9e\xfc\x9d\xc2\x9c\x37\x98\xd1\xb2\xae\x03\xae\x81\xd1\x64\xaf\xcc\xae\x03\x99\x83\xa1\x3d\x87\x25\xee\x7b\x62\x6d\xd3\x23\xe5\x79\xbf\xff\x4b\x59\x96\x28\x0c\x4d\x8c\xf7\x19\x7d\x26\x7a\xb7\x94\x4c\x7d\x4a\x92\x3d\x2e\x8f\xfe\x99\x55\xcf\x58\xb2\x33\xe0\xd2\x30\x47\x48\x6e\xf1\x2c\x1c\x94\xd7\x75\xf0\x07\x18\x29\x93\x96\xda\x3d\x9d\x0e\xfc\x8a\xb1\x7d\xc6\x94\xc7\x9b\x9c\xe4\xf6\xe4\x33\x19\xca\x32\xb0\xa6\x3c\xb4\xae\xfb\xe3\x3d\xcc\x61\x8e\xc9\x95\xc1\x60\x59\x15\x74\x58\x42\x6d\x14\x17\x57\xa8\x42\x48\xec\xe9\xd8\x32\x05\x9f\xdb\x76\xef\xc1\x5d\xf7\x0b\xab\xe0\x8c\xf6\x2f\x59\xc5\xf3\x9d\xf3\x35\x4b\x4c\x26\xb6\xeb\x81\x97\x55\x81\xa4\x61\x0d\x66\x83\xfe\x2b\x2a\xe0\xc2\xa0\xca\x59\x8a\x49\x90\xd7\x22\x85\xa8\x81\x43\xe6\xb1\xa7\x8d\x62\x70\xa2\x40\x1b\x2c\x78\x4e\x83\x15\xc8\x6b\x42\x77\x2c\xce\xc7\xe6\xd3\x0f\x34\xd9\x06\x8b\x85\x42\x53\x2b\x41\xf4\xc1\xa2\x0b\xfa\x61\x5e\x9a\xe4\xa2\x52\x5c\x98\x3c\x0a\x0f\xd7\x47\xdf\x66\x71\xb8\x82\x26\x0e\xe6\xe1\xda\x43\xe4\x00\xd7\xe2\x00\x72\x52\xc8\x1b\x54\x29\xd3\xd8\xa3\x7f\xc7\x94\xc6\xc3\xe5\xc0\x0c\x69\x97\x14\x21\x21\x95\x62\x8b\xca\x00\xeb\xc1\x19\x69\x1d\x7c\xbc\xc0\x6b\x66\x86\x55\x24\xe8\x30\xb9\x95\x31\x44\x87\x93\x2b\x40\xa5\xa4\x8a\xbd\xbe\x9a\x13\xda\xb2\x68\x3e\x12\xa3\x23\x95\x35\x2b\x10\xbc\x08\x16\x5d\xdb\xf2\x1c\x12\x21\x7b\x64\x74\x72\x5e\xd2\x7f\x2e\x34\x0a\xcd\x0d\xdf\x22\x54\x24\xdf\x0a\x32\x02\xa0\xb1\x62\x14\xd9\xa1\x90\xf2\xba\xae\x08\x55\xa5\x70\x8b\xc2\x40\x2d\x04\xa6\xa8\x35\x53\x3b\x48\xa5\x36\x74\x7e\x7b\xb5\x91\x02\x06\x4d\xf0\x1c\x6e\x10\x32\x29\xbe\x37\x20\x10\x33\x30\x32\xb9\x07\x12\xb7\x5a\x27\xef\xe5\xdf\x88\xab\x55\x51\x7c\x1b\xb4\xde\xf1\x17\x1e\x25\x2b\x51\xdb\x70\xda\xd3\x4e\x74\xfe\x2c\x5e\x59\xef\x79\x4d\xda\xcd\xa3\xf0\x5b\x4d\x51\x49\x48\x32\xe2\x96\x15\x3c\x83\xa9\x1d\x8c\xda\xc1\xc7\x6f\xf5\xa7\x70\x05\xc4\x7d\x05\xbd\x8c\x3f\x4b\x2e\xa2\x09\x0a\xfa\xd5\x2b\x08\x57\x10\xc6\xb1\x0f\x46\x14\x11\x1e\x50\x22\x2f\x47\x3c\x0e\x75\x36\x83\x91\xce\x93\xb2\xd6\xc6\xda\xd2\x27\xca\x5f\x6a\x6d\xe6\xdc\xd8\xbb\xae\xbe\xd5\x77\x57\xc0\x44\x06\x15\x13\x3c\xd5\xc4\xdd\xcb\x65\xa5\xf2\x7e\x7d\x82\xff\xa1\x6f\x4f\xf6\x6e\x83\xc5\x96\x15\xd6\xc3\xc9\x11\x4e\x2d\x8f\xad\xbf\x10\xd1\x37\x67\x64\x6f\xeb\x01\x56\x98\x08\x95\x8a\xc7\xf1\x60\xcb\x8a\xa0\x0b\xfa\x9c\xd1\xeb\xa2\x32\x8a\xb4\x70\x2a\x32\xbd\x33\x2a\x8a\x61\x79\x2c\x9c\x67\xfa\x5d\x33\xc3\xb3\x64\x4a\x6f\x58\xd1\x6b\xd7\x8d\xde\x63\x63\xa6\x31\xd2\xd0\x37\x4f\x5d\xa0\x82\x12\xcd\x46\x66\xa7\xe3\xe4\x88\x55\x14\x43\xf4\xf1\xd3\xe5\xce\xe0\x38\x0a\x78\xa9\xdc\x44\xd4\x24\x7d\x60\x8d\xdd\x61\x70\x11\xeb\x1f\xa2\xbc\x43\xa4\x5a\xdc\x22\xd4\x72\x2a\xd5\x01\xbf\xc8\x32\x70\x02\xc4\x4e\x32\x12\x4c\xf8\xb2\xc8\x59\xdb\x12\xc5\xc1\xc2\x94\xd5\x97\x59\xd8\xe3\x44\xe5\x22\xfe\xb2\x81\x33\x30\x65\x35\x28\xc0\x81\x9d\xd8\x45\x2a\x48\xf4\x6f\x85\xfd\x11\x75\x51\x70\x61\x86\xff\xda\xa8\xae\x9b\x4b\x05\xaf\x95\x3a\xe7\xc5\x3b\xa3\xe0\xcc\xa1\xd1\xc9\x39\xde\x44\xa1\x2b\x7f\x2a\x69\xb3\x9b\x75\x7a\x5e\x84\x31\xac\xd7\x20\x05\x42\x85\xca\x95\x2c\xb9\x54\xd0\x57\x9b\x69\xc1\xf4\x06\xb5\xcb\x99\x29\x13\x47\x19\x33\x65\x42\xcc\x27\xcc\x23\x9d\x13\x6d\xe4\x64\x18\xc8\xdb\x2e\x06\xf2\xfa\xc3\xac\xe0\x88\xce\xf6\xba\xb3\xca\x3a\x8a\x2f\x83\x52\x49\xa1\x36\xfc\xff\x08\x37\x3c\x43\xe5\x0b\x4e\x99\x83\x26\xf9\xd8\x65\x81\x16\x9a\x4e\x2c\x55\xa6\xf8\x16\x95\x2b\x3b\xdd\x5e\x1a\x98\x71\xae\x24\x2b\x5b\xba\x6d\x10\x0a\xae\x8d\xd5\x05\x36\x15\x66\x1c\x45\xba\x0b\x16\xfa\x86\x9b\x74\x03\x5b\xb2\xbe\x2b\xc0\x22\x62\x6c\x05\x4f\x5d\xee\x31\x7f\xf9\xf3\xf3\x13\x22\x6f\x63\x4f\xe5\x5c\xca\x91\x39\x6f\x9a\x77\xa6\x6d\xec\xc2\xff\xc8\xfa\x14\x70\x67\xbc\x8b\x70\x51\x44\xa7\x18\x69\xa3\xde\xc6\x69\x99\xaa\x19\xa7\x4e\xb6\x8f\x89\x44\xef\xd4\xbc\x82\xad\xf7\x65\x6d\x14\xc5\xce\xe4\x47\x23\x79\xb4\x8d\x7f\x70\x13\x23\x1b\x8c\x65\x9d\x8a\xc9\x0a\x7f\x5a\x17\x0b\xf2\xed\x45\x37\x94\xb9\x16\xae\x3b\x5a\x77\xc3\xf5\x27\x6d\x1b\x7f\x25\xd8\xfb\xfd\x1f\x14\xfe\x21\xf9\xe0\x1c\xdb\xbd\xcb\xdc\xe9\x30\xcb\x63\x1e\x84\xc4\x0b\x68\xe5\xf3\x61\xe4\x54\x2c\x08\x9c\x68\x76\x97\x65\xbf\x75\x7d\x9f\xbd\xeb\xfb\xf9\xf4\xd2\xf3\xfa\x2f\xe4\x9a\xb0\x5e\x1e\xf0\x76\x22\x3c\x06\xf7\xbc\x90\x8c\xd8\x53\x24\xfc\x55\x4b\xd1\xa7\x37\x0d\xb8\x45\xb5\x33\x1b\x5b\x01\x92\x1f\x79\x4a\x5b\x33\x98\xef\xe9\x8b\xa8\xcb\x4b\x54\x77\xea\xe6\x41\xb6\x78\x14\xcd\xd6\x8f\x69\xb6\xfa\x51\xed\xb6\xdc\x87\xd1\x2f\x65\x7f\x5b\x34\x5a\x7e\xad\xe8\xbb\x7c\xb8\xf0\xdb\x05\x8b\xa1\xc0\x08\x4e\x56\x15\xda\x15\x94\xeb\x35\xb8\x9c\x38\x49\xf2\x2e\x5f\xba\xb9\x7b\xf5\xc6\x96\x92\xaa\xbd\x71\xa6\x9d\xa9\xf9\xf6\xc5\xde\x6a\x28\x7f\x5c\x5f\xf1\x35\xa4\xb1\xbe\x1a\x35\x23\x59\x86\x52\xcc\xff\xe9\x8b\xe5\xbc\x60\x57\x5e\xc4\x0b\x3c\x2a\x47\xdf\xc8\x82\x89\x2b\x20\x22\x5f\x63\x0c\x42\x02\xc9\x78\x5b\x89\x84\x86\xac\x39\x34\x18\x43\x2d\xba\xbd\xb5\xe6\x24\x07\x08\x86\xa4\x32\x2a\x34\x5d\xf1\xfc\xe6\x76\x19\xdf\xa0\x31\x63\x4d\xde\x25\xe4\x1b\xa4\x4a\x7e\x54\xc2\x8d\x74\xb8\x6c\xfc\x9e\xf6\xc2\x6d\xb2\xe9\x15\x37\x9b\xfa\x32\x49\x65\xb9\xd6\x55\xfe\xc7\x3f\xad\xab\xbf\x92\x22\x27\x3a\xba\x65\x67\x62\x7a\x70\xe3\xe2\x77\x9d\x5c\x95\x84\x27\xeb\xe8\x99\x12\x9a\xec\x68\xcb\xde\xf3\xba\x28\x26\x3d\x93\x36\xaa\x4e\x4d\x4b\x1d\xe9\xf8\xfb\x64\x18\x2c\x3e\xd8\x76\x96\xce\xe8\xe2\x52\xca\xa2\x6d\xd7\x4b\xf8\x31\xcb\x40\xcb\x92\x80\xe5\x92\x8e\xbf\x91\x70\xb3\x41\xb3\xa1\x32\x7b\xc3\xb5\x8f\x0b\x37\x4c\xdb\x7b\xb0\xac\xb6\x98\xf6\x5d\x0c\x8d\xa4\xb2\x7d\xe9\x72\xdd\xf9\xcb\x8e\x51\x97\xb6\xb8\x40\xb3\x58\x8c\xf6\xa4\x96\x19\x5c\xcf\x6c\x15\x78\x8e\x37\xc7\x90\xac\x77\x1d\x56\xdf\xcd\x0c\x72\x7b\x2c\x9a\xa4\xaf\xd8\x6d\x8f\xb0\x43\xbd\x82\x1b\x04\x7e\x25\xa4\x42\x87\xc1\xfa\xe7\x0a\xb8\x81\x1b\x5e\x14\xf0\x6b\xad\x0d\x5c\x22\x50\x9f\x20\x5c\x8f\xef\x8a\xe4\xde\x52\xde\x39\xfe\xd3\x4e\x62\x4e\xc0\x7b\x76\x13\xfe\x9a\x75\xa4\xb9\x26\xa1\x33\x7b\x06\x46\xd5\xb8\xd7\xda\x6c\xdb\xd1\x24\xd3\x7b\x83\x26\x71\xb6\x9e\xe9\x46\x56\x90\xb3\x42\xe3\xa4\x29\x71\x01\x7b\xca\x28\xd9\x4b\x1f\x93\xa2\x7b\xa6\xd1\x3e\xe8\xc7\x63\x9d\xf9\xb8\x73\x98\x88\xbe\x38\x40\xce\xa9\xf3\xce\x20\xc9\x73\xf8\xc6\x0b\x3a\xea\x66\x05\x2f\xfa\x3b\xab\xe3\xd6\x8a\xa5\x29\x56\x46\xbb\xc0\x6a\x5b\x29\x92\xdc\x35\x5c\xc9\x34\xec\x4e\x34\xf4\xa0\x19\xe1\xb1\x00\x0f\x69\x6c\x6a\xdd\x99\xac\xe6\xdc\xec\xd6\xeb\x96\x9f\x2f\xde\x9e\x43\x2a\x95\xc2\xd4\x14\x3b\xd0\xa8\x38\x2b\xf8\x3f\xa9\x3b\x9d\x8b\x4e\x46\x02\xad\xe8\x61\x8a\x59\x98\x23\xd6\xf3\xd7\x2f\xee\x35\x88\xdc\xea\xc2\x5e\x18\x84\xf4\x37\xb4\xf0\x85\xf7\xcb\x11\x7c\xaa\x5d\x13\xcf\x33\x12\x53\x9b\x8d\x95\xe2\xef\x73\x3c\xe3\xf9\xcb\x9c\x09\xe0\x0c\xef\x82\x9c\x2b\x59\x4e\x40\xcf\x06\x87\x83\x1d\xa2\xcb\x99\xbb\x9d\x51\x10\x08\x16\x5b\xa6\xa0\x19\x87\x11\x77\x6e\x9f\x9f\x39\xbc\x03\xb7\xe8\x72\x05\xdf\x35\xd3\xdb\x9d\x99\xcb\x1d\x77\xea\x85\x3b\xe6\x4d\x3c\xc9\xc9\x87\xee\x70\xe8\x19\x4c\x64\x5f\x90\xa9\xc8\x74\x2e\x59\x11\xb8\xe3\xf9\xdb\x93\xc2\x85\x51\xf7\xcc\x0b\x64\xc9\xc7\x4d\x0d\x0f\x75\xc0\xad\xa4\xbf\xf3\x19\xff\x1d\x0f\xb6\x85\xf7\xff\x78\xb6\x2d\xf0\xff\x95\xe3\x7d\x70\xba\xf7\x3d\xc4\xfe\x49\x7e\x78\xc6\x1c\x9e\xe5\x67\xde\x5d\xc8\x70\x6d\xeb\xab\xde\xd1\xb3\x5e\x2e\x55\x8a\xf6\x91\x0a\xa8\xe6\xed\x3d\xd0\x3d\x15\x75\xdd\xcc\xc5\xb0\x7d\xc5\xb1\xb5\x8b\x60\xe5\xc0\xc9\x3f\x0a\xce\x91\x3a\x5c\x64\x30\x7b\x1b\x2a\x73\xa8\xa4\xd6\xfc\xb2\xe8\xaf\x30\xfb\xeb\x53\x99\xcf\x3f\x0f\xce\x30\x8d\x62\xf8\xf8\x69\x5f\xc2\x9b\xb2\x22\x4b\x94\xec\x1a\xa3\xfe\xfb\x0a\x0a\x9c\x7f\x82\x8a\xa9\xf7\x97\xd5\x2e\xb2\xd7\xf0\xb3\x14\x83\x35\x4c\x59\xed\xad\xf1\x74\x6c\x84\x7f\x07\x00\x00\xff\xff\x49\x18\xa5\x7f\x01\x22\x00\x00")

func enumTmplBytes() ([]byte, error) {
	return bindataRead(
		_enumTmpl,
		"enum.tmpl",
	)
}

func enumTmpl() (*asset, error) {
	bytes, err := enumTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "enum.tmpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xfa, 0x4f, 0xe4, 0xcd, 0x99, 0xc, 0x30, 0x87, 0x37, 0xd9, 0xe9, 0x1f, 0x3d, 0xf9, 0xb6, 0xc9, 0x71, 0x22, 0xdd, 0x20, 0xd9, 0x4c, 0x11, 0x45, 0x79, 0xeb, 0xe7, 0xb1, 0x73, 0x2f, 0xb, 0x36}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"enum.tmpl": enumTmpl,
}

// AssetDebug is true if the assets were built with the debug flag enabled.
const AssetDebug = false

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"enum.tmpl": {enumTmpl, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
