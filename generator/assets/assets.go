package assets

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
)

func bindata_read(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	return buf.Bytes(), nil
}

var _enum_tmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x57\xcf\x6e\xdb\x38\x13\x3f\x5b\x4f\x31\x15\xd2\x0f\x52\x3f\x45\xce\x62\x6f\x29\x7c\x6a\xbb\x41\x0b\x24\x29\x90\xec\x5e\x82\x20\x60\xa4\x91\xcd\x8d\x44\xa9\x24\xed\xda\xd0\xea\xdd\x17\x43\x52\x32\xad\xc8\x49\x0b\x74\x2f\x86\xc8\xf9\x3f\xf3\x9b\xe1\xb8\x6d\x4f\x21\xc7\x82\x0b\x84\x70\x85\x2c\x47\x19\x76\x5d\x30\x9f\xc3\x87\x3a\x47\x58\xa2\x40\xc9\x34\xe6\xf0\xb8\x83\x65\x7d\x8a\x62\x5d\x11\xf1\xe3\x35\x5c\x5d\xdf\xc2\xa7\x8f\x9f\x6f\xdf\x04\x41\xc3\xb2\x27\xb6\x44\x68\xdb\xd4\x7d\x76\x5d\x10\xf0\xaa\xa9\xa5\x86\x28\x00\x00\x08\x51\x64\x75\xce\xc5\x72\xfe\xb7\xaa\x45\x68\xef\x8a\x4a\x87\x41\x1c\xb4\x2d\x8a\x1c\x4e\x49\xc6\xf7\x86\x6c\x91\x2f\x59\x2d\x14\xa9\x21\xda\x09\x5d\x5e\xb1\x0a\xe1\x7c\x01\x29\x1d\x52\x73\x22\x61\x43\xdf\x30\xa9\x88\x96\xf3\x4c\x43\x58\x32\xa5\xeb\xa2\x50\xa8\x43\x38\x73\x4c\x20\x99\x58\x22\x9c\xc8\xcf\x22\xc7\x6d\x42\x22\xe5\xda\xd3\xf7\x17\x1d\x15\x74\x5d\x30\x33\x1a\x49\xc7\xb5\xd1\x41\x3c\x4d\xb9\xce\x9e\x0e\x15\x5b\x9b\xff\x40\xc1\xa5\xd2\xd0\x75\x6d\x0b\x27\xf5\x20\xa0\xd6\x8f\xce\x84\xd5\xdc\x1b\x76\x06\x80\x17\x80\xdf\x7a\x0e\x13\x4b\xf8\x10\x76\xdd\x7c\x0e\x37\x4f\xbc\x69\x30\x07\x43\x6a\x5b\x2c\x15\x9a\xfb\xb6\x75\xdc\x5f\x25\x16\x7c\x8b\x39\x49\x75\x1d\x70\x05\x8c\x88\x7d\x8a\xba\x0e\xea\x02\xf4\xae\xc1\xbd\x88\xbd\x37\x09\xef\x03\xe4\x45\x6f\xfd\x43\x5d\x55\x28\x34\x11\x7c\x33\xde\x35\xf1\x5b\x51\xaa\xdf\x31\x47\xf6\x51\xb9\x50\xcf\x4c\x56\x7c\xc7\x16\xc0\x6b\xcd\x2c\xa3\x40\x38\x1b\x32\xd6\x75\xf0\x7f\xf0\x32\x38\x38\x6b\x13\xe0\xf8\xfd\xa2\xf8\x9c\xcf\x4d\x1c\xd5\x76\xf2\x60\xaa\x43\x0a\x4c\xfd\x0e\x4b\x6a\x3f\x1c\xa8\x6c\xc4\x31\xa1\x13\x34\x56\x4d\xc9\x34\x42\xa8\xb4\xe4\x62\x89\x32\x84\x94\x6a\x49\x5d\xf1\x95\x49\x85\x6d\xbb\xc7\x65\xd7\x01\xd3\x24\xa2\x15\xe8\x1a\xb2\x5a\x6c\x50\x6a\x60\x60\x85\xe9\x8e\x4a\xe6\x0b\x04\xc5\x5a\x64\x53\x9a\x22\x41\xe0\xb0\x82\x31\x44\x87\xc4\x04\x50\xca\x5a\xc6\xd0\x06\x33\x5e\xc0\x36\x81\xfa\x89\xe2\x7b\x38\x64\x33\x08\xbc\x23\x45\xf7\xef\x89\xa3\x0d\x66\x33\x89\x7a\x2d\x05\x89\x08\x5e\x06\x33\x53\x65\x5e\x40\x4a\x5c\xca\xf4\x4c\xcf\x32\xf2\xe7\x2c\x4e\xa0\xa8\x74\xfa\x89\x2c\x17\x51\xf8\x56\x11\x04\x45\x4d\xf1\x6d\x58\xc9\x73\x18\xfb\xa8\xe5\x0e\xee\xde\xaa\xfb\x30\x01\xd2\x9e\xb8\x68\x54\xfa\xa5\xe6\x22\x1a\xf9\x4a\xbf\x2a\x81\x30\x81\x30\x8e\x1d\xf4\x08\x01\xbf\xd0\x23\xe7\x47\xec\x03\xdb\x0c\x21\x82\x59\x5a\x31\xa9\x56\xac\x04\x3b\x0e\x2f\xed\xe9\x16\xb7\x1a\x78\xd5\x94\x48\x3d\xa1\x40\xaf\x10\x34\xdd\x39\xee\x12\x25\x54\xa8\x57\x75\x6e\x0b\x19\x6d\xe1\xdd\xa1\xd1\xd8\x57\x15\xc5\x10\xdd\xdd\x3f\xee\x34\xfa\x15\x74\xd1\x59\x42\xb4\x4d\x6f\x4c\x9a\xa2\x38\xb6\x35\xb2\x60\xfb\x53\x54\xaf\xb8\xb4\x16\x3f\xe1\xd4\x81\xba\xc8\xc8\x5b\xfb\xb1\x75\x8c\xfc\x12\x6e\xf0\xda\xb2\x19\xa6\x38\x98\xe9\xaa\x31\xce\x13\xe5\x18\x6e\x63\x03\x4b\x62\x7a\xb3\xa0\x18\x7c\xe4\xa1\x94\x06\x76\xef\xb6\xb0\x00\x5d\x35\x43\xfc\x36\xd6\x7e\x58\xf5\x65\x51\xdf\xfa\x92\xdc\x64\x4c\x8c\x03\xa7\x3b\x81\x12\xb8\xd0\x28\x0b\x96\x61\x7a\x3c\x64\xe2\x8d\xec\xf4\x1f\xd8\xdb\xce\x8b\x77\xc3\x24\x78\x5d\x17\x04\x33\xf5\x9d\xeb\x6c\x05\x1b\x8a\xd5\xce\xbe\x88\x06\xac\xa9\x5a\xc6\x54\xcf\x79\x1e\xcc\x6c\xb2\x16\xb0\x71\x04\x9b\x4c\x8f\xe0\x92\xb8\x89\x1d\x83\xe0\x25\x51\x4d\x16\x9e\xe1\x7a\x9f\x2d\xd7\xa4\xff\x79\xda\x29\xc1\xf6\xc1\x1a\x65\x38\x97\x7c\x83\xd2\xd2\x26\xf3\x3c\x4e\xb3\xe1\x24\xa0\x5b\x49\xfb\x0c\x4e\xc0\x7d\x8f\xf3\xe4\x48\xe9\x69\x75\x38\x6c\xc7\x2f\x37\xd7\x57\x63\x07\x89\x2b\x75\xf4\x1f\xef\x46\xd2\xf4\x62\x37\xfa\x6a\xfd\x9e\x1c\xb7\xe3\x51\x97\x06\x8e\x9f\xe9\x46\xe3\xd6\x74\x37\x12\x3a\x55\x0f\xcd\xbe\xce\xe7\x8b\x91\x31\x23\x9c\xc0\xff\x54\xfc\xfe\x15\x20\xbc\x06\x28\xf5\x0b\x9b\xb8\x28\xd9\xb2\xef\x62\x7c\x36\xbd\x2e\xea\x92\x89\x25\x10\x93\x5b\x9a\x06\x98\x01\xa5\xec\xa5\x9e\x46\x4d\x2d\x3d\xbc\x93\xfb\x6c\xbd\x18\xdb\x86\x95\xb1\x73\x7e\x13\xf8\x31\xd9\xe2\x5e\xbc\xec\xe3\x05\x6a\xed\xf7\xc2\x6b\x4e\x5e\x20\x0d\x7e\x6f\xe6\x78\x30\x7b\xb7\x75\x36\x6f\x69\x71\x1b\x19\x5d\x72\xbd\x5a\x3f\xa6\x59\x5d\xcd\x55\x53\xfc\xf6\xfb\xbc\xf9\x83\x12\x39\xca\xd1\x0b\x96\x49\x69\x14\xf7\xeb\xc7\xde\x6a\x38\x7a\x18\x0f\x4b\xe6\x3e\x0e\xb6\xf3\x61\xfd\x19\x36\xf4\x89\xf7\x1b\x16\xa4\xd9\x99\xe3\xc5\xce\xae\xd8\x40\x06\x7a\x24\xd8\x35\xa3\xeb\x08\xcd\x53\x1b\x80\x99\x86\x82\x55\x83\xb4\xdb\xb5\xa6\x58\x6d\x30\xb4\x06\x97\x5c\x69\xda\x7e\x9b\x5a\x29\xfe\x58\xf6\x73\xd9\xce\x6c\x45\x94\x43\x79\x97\xb2\x09\xa5\x51\x0c\x77\xf7\xfb\x7c\xe9\xaa\x21\x0c\x55\xec\x09\xa3\xfe\x3e\x81\x12\xa7\xd7\x17\x5a\x5c\xb2\xba\xd9\x45\xa6\xb7\x26\x39\x86\x12\x50\xd3\x98\xff\x27\xc3\x9f\xa1\x89\x94\x5c\xb2\xc6\x24\x04\x2a\xd6\xf8\xf9\x34\x29\xb1\x23\xe9\xd9\x8b\xe8\x0a\xf5\x23\xa3\xba\x1f\x6a\x1e\x40\x78\x41\x87\x23\xfb\xe4\x25\x6b\xee\xb6\xcf\x56\x49\xa5\xed\x2c\x70\x47\xda\xc8\x6e\x1a\xc9\x85\x2e\xa2\x11\xce\xa2\xb7\x79\x1c\x26\xb0\x35\x43\x74\x22\x5c\x0b\x6c\x13\x30\x2d\x33\x5e\xc8\x69\x59\x7f\x47\x69\x1e\x4e\x1f\xa3\xff\x06\x00\x00\xff\xff\x09\x01\xea\xfe\xce\x0e\x00\x00")

func enum_tmpl() ([]byte, error) {
	return bindata_read(
		_enum_tmpl,
		"enum.tmpl",
	)
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		return f()
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() ([]byte, error){
	"enum.tmpl": enum_tmpl,
}
// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for name := range node.Children {
		rv = append(rv, name)
	}
	return rv, nil
}

type _bintree_t struct {
	Func func() ([]byte, error)
	Children map[string]*_bintree_t
}
var _bintree = &_bintree_t{nil, map[string]*_bintree_t{
	"enum.tmpl": &_bintree_t{enum_tmpl, map[string]*_bintree_t{
	}},
}}
