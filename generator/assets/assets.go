// Code generated by go-bindata.
// sources:
// enum.tmpl
// DO NOT EDIT!

package assets

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _enumTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x56\x4d\x6f\xe3\x36\x13\x3e\x5b\xbf\x62\x56\x48\x00\x29\xaf\x22\xe7\x45\x6f\x29\x7c\xea\x6e\x83\x2d\x90\xcd\x02\x49\x7b\x09\x82\x80\x91\x46\x36\x11\x89\xd2\x92\xb4\xd7\x86\xca\xff\x5e\x0c\x49\xc9\xb4\x23\x67\x5b\xa0\xbd\x18\x16\xe7\xfb\x99\x87\x33\xec\xfb\x4b\x28\xb1\xe2\x02\x21\x5e\x21\x2b\x51\xc6\xc6\x44\xf3\x39\xfc\xd2\x96\x08\x4b\x14\x28\x99\xc6\x12\x5e\x76\xb0\x6c\x2f\x51\xac\x1b\x12\x7e\xbc\x83\x2f\x77\x0f\xf0\xe9\xe3\xe7\x87\x0f\x51\xd4\xb1\xe2\x95\x2d\x11\xfa\x3e\xf7\x7f\x8d\x89\x22\xde\x74\xad\xd4\x90\x44\x00\x00\x71\xd5\xe8\x38\x4a\xa3\xbe\x47\x51\xc2\x25\xc9\xc3\xc8\xe4\x97\xe2\x16\xad\x50\x64\x42\xb2\x33\x3a\xfc\xc2\x1a\x84\xeb\x05\xe4\xf4\x91\xdb\x2f\x32\xb6\xf2\x0d\x93\x8a\x64\x25\x2f\x34\xc4\x35\x53\xba\xad\x2a\x85\x3a\x86\x2b\xaf\x04\x92\x89\x25\xc2\x99\xfc\x2c\x4a\xdc\x66\x64\x52\xaf\x03\x7f\x7f\xd0\xa7\x02\x63\xa2\x99\xf5\x48\x3e\xee\xac\x0f\xd2\xe9\xea\x75\xf1\x7a\xe8\xd8\xc5\xfc\x13\x2a\x2e\x95\x06\x63\xfa\x1e\xce\xda\xd1\x40\xad\x5f\x7c\x08\xe7\x79\x08\xec\x03\x00\xaf\x00\xbf\x0d\x1a\xb6\x96\xf8\x39\x36\x66\x3e\x87\xfb\x57\xde\x75\x58\x82\x15\xf5\x3d\xd6\x0a\xed\x79\xdf\x7b\xed\xaf\x12\x2b\xbe\xc5\x92\xac\x8c\x01\xae\x80\x91\x70\x80\xc8\x18\x68\x2b\xd0\xbb\x0e\xf7\x26\xee\xdc\x02\x6e\x8c\x6d\xc2\x29\x6f\xfb\xd4\x7c\xbe\x57\xb6\xb4\xd0\xfb\x02\x78\xab\x99\x53\x14\x08\x57\x63\xd9\xc6\xc0\xff\x20\x80\x61\x8c\xe8\xaa\xf0\xfa\x21\xb2\xa1\xe6\xdb\x10\x27\xbd\x9d\x3d\x5b\x88\xc9\x81\x6d\xc2\x61\x5f\xdc\x1f\xcf\x0c\x57\x71\x4a\x14\x03\x8d\x4d\x57\x33\x8d\x10\x2b\x2d\xb9\x58\xa2\x8c\x21\xa7\x86\x10\x8d\xbf\x32\xa9\xb0\xef\xf7\xe4\x32\x06\x98\x26\x13\xad\x40\xb7\x50\xb4\x62\x83\x52\x03\x03\x67\x4c\x67\x84\x7b\x68\x10\x55\x6b\x51\x4c\x79\x4a\x04\x75\xd8\x19\xa6\x90\x1c\x0a\x33\x40\x29\x5b\x99\x42\x1f\xcd\x78\x05\xdb\x0c\xda\x57\xaa\xef\xf9\x50\xcd\xd2\xe8\x91\x1c\x3d\xfd\x4c\x1a\x7d\x34\x9b\x49\xd4\x6b\x29\xc8\x44\xf0\x3a\x9a\x59\x6a\xf1\x0a\x72\xd2\x52\x96\xf8\x83\xca\x51\x3e\x57\x69\x06\x55\xa3\xf3\x4f\x14\xb9\x4a\xe2\x73\x45\x3c\x12\x2d\xd5\xb7\x61\x35\x2f\xe1\x38\x47\x2d\x77\xf0\x78\xae\x9e\xe2\x0c\xc8\x7b\xe6\xab\x51\xf9\x6f\x2d\x17\xc9\x51\xae\xf4\xab\x32\x88\x33\x88\xd3\xd4\x5d\x28\xcb\x80\x7f\x31\x23\x9f\xc7\xe0\xdd\xb6\xd9\x4e\x12\xa2\x59\xde\x30\xa9\x56\xac\x06\x37\xbf\x6e\xdd\xd7\x03\x6e\x35\xf0\xa6\xab\xb1\x41\x41\x5d\x5d\x21\x68\x3a\xf3\xda\x35\x4a\x68\x50\xaf\xda\xd2\x35\x32\xd9\xc2\xc5\x61\xd0\x34\x74\x95\xa4\x90\x3c\x3e\xbd\xec\x34\x86\x1d\xf4\xd5\x39\x41\xb2\xcd\xef\x2d\x4c\x49\x9a\xba\x1e\x39\xb2\xfd\x2e\x9a\x1f\xa4\xb4\x16\xff\x20\xa9\x03\x77\x89\xb5\x77\xf1\x53\x97\x18\xe5\x25\xfc\xf4\x74\x6d\xb3\x4a\x69\x34\xd3\x4d\x67\x93\x27\xc9\x29\xde\xa6\x96\x96\xa4\xf4\x61\x41\x35\x84\xcc\x43\x29\x2d\xed\x2e\xb6\xb0\x00\xdd\x74\x63\xfd\xae\xd6\x61\xe2\x0c\x6d\x51\xdf\x86\x96\xdc\x17\x4c\x1c\x17\x4e\x67\x02\x25\x70\xa1\x51\x56\xac\xc0\xfc\x74\xc9\xa4\x9b\xb8\x11\x3e\xaa\xf7\x26\xa8\x77\xc3\x24\x04\xb7\x2e\x8a\x66\xea\x3b\xd7\xc5\x0a\x36\x54\xab\x9b\x7d\x09\x4d\x49\xdb\xb5\x82\xa9\x41\xf3\x3a\x9a\x39\xb0\x16\xb0\xf1\x02\x07\x66\x20\xf0\x20\x6e\x52\xaf\x20\x78\x7d\xbd\x07\xc5\xdf\xc5\xff\x1c\x5d\xc2\xd1\x2d\x97\x23\x20\x4b\xc9\x37\x28\x9d\x6c\x12\xce\x63\x34\xad\x26\xf1\xd9\x59\xba\x95\x35\xc1\xea\x3d\x9d\xb3\x13\x1d\xae\x6a\xb6\x1c\x5a\x8c\x6f\xa8\x7d\xd3\xd6\x4c\x2c\x81\x94\xfc\x5a\x1c\x93\x03\xca\xed\xbd\x86\xa3\xa6\x7e\x8f\x43\x74\xdf\xe8\x77\x21\xde\xb0\x3a\xf5\x00\x6e\xa2\x10\x57\x07\xdf\xcd\xfb\x39\xde\xa0\xd6\x21\x82\x3f\x4a\xf2\x06\x69\x2a\x04\x84\x0c\xb0\xbb\xd8\xfa\x98\x0f\xb4\x9a\x8f\x82\x2e\xb9\x5e\xad\x5f\xf2\xa2\x6d\xe6\xaa\xab\xfe\xff\xd3\xbc\xfb\x95\x80\x3c\xc2\xe8\x9d\xc8\xe4\x34\x49\x87\xdd\xb4\x8f\x1a\x1f\x4d\xcd\xc3\x96\xf9\x3f\x07\xef\xaf\x71\x37\x8e\x6f\xb0\x89\xe1\x0e\x0b\xf2\xec\xc3\xf1\x6a\xe7\x1e\x51\x40\x01\x06\x26\xb8\x1d\x64\x0c\x5d\xc4\xa9\xf5\x00\x0b\xe8\x7b\xc1\x9a\xd1\xda\x2f\xe2\x29\x55\x57\x0c\x3d\x74\x6a\xae\x34\xbd\x6f\xba\x56\x29\xfe\x52\x0f\x97\xd6\x5d\x68\x45\x92\x43\x7b\x0f\xd9\x84\xd3\x24\x85\xc7\xa7\x3d\x5e\xba\xe9\x88\x43\x0d\x7b\xc5\x64\x38\xcf\xa0\xc6\xe9\xdd\x46\x5b\xad\x68\xbb\x5d\x62\xaf\xf8\xa4\xc6\xd8\x02\xba\xb8\xf6\x05\x3a\x3e\x77\x27\x20\xb9\x65\x9d\x05\x04\x1a\xd6\x85\x78\x5a\x48\xdc\xa5\x7b\x33\x2e\x7d\xa3\xfe\xce\x05\x1f\xae\x6d\x40\x10\x5e\xd1\xc7\x89\xc7\xc6\x2d\xeb\x1e\xb7\x6f\xde\x19\x4a\xbb\x79\xe4\x3f\x69\x5d\xdf\x77\x92\x0b\x5d\x25\x47\x3c\x4b\xce\xcb\x34\xce\x60\x9b\x46\xd3\xe5\x3a\x62\xdb\x82\x69\xd3\x05\x25\xe7\x75\xfb\x1d\xa5\x9d\xaa\x21\x47\xff\x0a\x00\x00\xff\xff\x53\xcf\x2b\x72\x9c\x0c\x00\x00")

func enumTmplBytes() ([]byte, error) {
	return bindataRead(
		_enumTmpl,
		"enum.tmpl",
	)
}

func enumTmpl() (*asset, error) {
	bytes, err := enumTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "enum.tmpl", size: 3228, mode: os.FileMode(420), modTime: time.Unix(1538492677, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"enum.tmpl": enumTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"enum.tmpl": &bintree{enumTmpl, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

