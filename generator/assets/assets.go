// Code generated by go-bindata. DO NOT EDIT.
// sources:
// enum.tmpl (8.266kB)

package assets

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _enumTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xe4\x19\x4d\x8f\xdb\xb8\xf5\x6c\xfd\x8a\x17\x21\xd9\x95\x5c\x47\x4e\xd1\xa2\x87\x2c\xe6\x10\x64\xd3\x60\x17\xcd\x24\xc0\xa4\x7b\x09\x82\x80\x96\x9e\xc6\xdc\x91\x48\x2d\x49\x79\xe4\xaa\xfa\xef\xc5\x23\x29\x59\xd6\xc8\x33\xd3\x74\x66\x83\x62\x2f\x86\x45\x3e\xbe\xef\x4f\xb2\x6d\x9f\x43\x86\x39\x17\x08\xe1\x16\x59\x86\x2a\xec\xba\x60\xbd\x86\xd7\x32\x43\xb8\x44\x81\x8a\x19\xcc\x60\xb3\x87\x4b\xf9\x1c\x45\x5d\xd2\xe6\x8f\xef\xe1\xfc\xfd\x47\x78\xf3\xe3\x4f\x1f\x9f\x04\x41\xc5\xd2\x2b\x76\x89\xd0\xb6\x89\xff\xdb\x75\x41\xc0\xcb\x4a\x2a\x03\x51\x00\x00\x10\xe6\xa5\x09\x83\x38\x68\x5b\x14\x19\x3c\xa7\xfd\x31\x65\xc2\x4b\x74\x53\x29\x34\x1d\xa1\xbd\xa7\xb4\x78\xce\x4a\x84\x97\x67\x90\xd0\x47\x62\xbf\xe8\xb0\xdd\xdf\x31\xa5\x69\x2f\xe3\xa9\x81\xb0\x60\xda\xc8\x3c\xd7\x68\x42\x78\xe1\x81\x40\x31\x71\x89\xf0\x54\xfd\x24\x32\x6c\x56\x74\xa4\xa8\x47\xf8\x7e\xa1\x4f\x0d\x5d\x17\x2c\x2c\x46\xc2\xf1\xde\xe2\x20\x98\xaa\xa8\xd3\xab\x63\xc4\x8e\xe6\xbf\x21\xe7\x4a\x1b\xe8\xba\xb6\x85\xa7\x72\x38\xa0\xeb\x8d\x27\xe1\x30\xf7\x84\x3d\x01\xe0\x39\xe0\x6f\x3d\x84\x95\x25\xfc\x12\x76\xdd\x7a\x0d\x17\x57\xbc\xaa\x30\x03\xb7\xd5\xb6\x58\x68\xb4\x1b\x6d\xeb\xc1\x3f\x28\xcc\x79\x83\x19\x1d\xeb\x3a\xe0\x1a\x18\x6d\xf6\x3a\xea\x3a\x90\x39\x98\x7d\x85\x87\x23\x6e\x3d\xb1\x2a\xef\x45\xe4\x79\x4f\xff\xb5\x2c\x4b\x14\x86\x36\xc6\x74\x46\xcb\x04\xef\x8e\x92\x05\x4f\x71\x72\x90\xcb\x0b\xfb\xc2\xea\x65\xcc\xd9\x19\x70\x69\x98\x03\x14\x08\x2f\x06\x9d\x75\x1d\xfc\x09\x46\x3a\xa4\x83\x96\xa2\xd3\x80\x87\x1f\x9b\x65\x0c\x79\x93\xc4\x49\x6c\x4f\xbf\x58\xfb\x10\x02\x6b\xc1\x63\xa3\xba\x3f\xde\xad\x9c\xc4\x31\xf9\x27\x18\x2c\xab\x82\x19\x84\x50\x1b\xc5\xc5\x25\xaa\x10\x12\xb2\x26\xc5\xc0\x07\xa6\x34\xb6\xed\xc1\x33\xbb\x0e\x98\xa1\x23\x46\x83\x91\x90\x4a\xb1\x43\x65\x80\x81\x3b\x4c\x6b\x64\xb3\xf1\x81\x20\xaf\x45\x3a\x87\x29\x12\xe4\x1e\xee\x60\x0c\xd1\xf1\xe6\x0a\x50\x29\xa9\x62\x68\x83\x05\xcf\xa1\x59\x81\xbc\x22\xf9\xbe\x1c\x83\x59\x1f\xfc\x44\x88\x3e\xff\x40\x10\x6d\xb0\x58\x28\x34\xb5\x12\x74\x44\xf0\x22\x58\x74\x6d\xcb\x73\x48\x84\x4c\x99\x46\xf0\xbe\xf0\x9a\xfe\x73\xa1\x51\x68\x6e\xf8\x0e\xa1\x22\xfe\x56\x90\x11\xff\x1a\x2b\x46\x19\x01\x0a\x29\xaf\xea\x8a\x84\xaa\x14\xee\x50\x18\xa8\x85\xc0\x14\xb5\x66\x6a\x0f\xa9\xd4\x86\x3c\xb2\x90\xd7\xa8\x52\xa6\x49\xfe\x41\x11\x3c\x87\x6b\x84\x4c\x8a\xef\x0d\x08\xc4\x0c\x8c\x4c\xee\x21\x89\x3b\xad\x93\x8f\xf2\x1f\x84\xd5\xaa\x28\xbe\x4d\xb4\xde\x98\x0b\x2f\x25\x2b\x51\xdb\xcc\xd0\xc3\x4e\x74\xfe\x22\x5e\x41\x5e\x9a\xe4\x0d\x69\x37\x8f\xc2\x67\x9a\xe2\x4c\x48\xb2\xe1\x8e\x15\x3c\x83\xa9\x1d\x8c\xda\xc3\xa7\x67\xfa\x73\xb8\x02\xc2\xbe\x82\x9e\xc7\x9f\x25\x17\xd1\x44\x0a\xfa\xd5\x2b\x08\x57\x10\xc6\xb1\x0f\x2f\xf2\xf2\x07\xe4\xc8\xf3\x11\x8f\x83\xd7\xa6\x5a\xd2\x79\x52\x19\x05\xbd\xcf\x45\xcd\xe4\x68\x0c\x1f\x8c\x8a\x62\x58\x4e\x5c\xba\x1d\x78\xfb\xae\x09\xba\xa0\xcf\x26\x3d\xce\x92\x29\xbd\x65\x05\xb8\xa2\xf1\xce\x7d\x7d\xc4\xc6\x00\x2f\xab\x02\x29\x97\x68\x30\x5b\x04\x43\x6b\x1e\xba\x40\x05\x25\x9a\xad\xcc\x4e\x32\x33\xc2\x14\xc5\x10\x7d\xfa\xbc\xd9\x1b\x1c\x3b\xbe\x67\xca\x6d\x44\x4d\x72\x61\x35\x1f\xc5\xb1\xb3\xbf\x8b\xd1\x7f\x8a\xf2\x0e\x8e\x6a\x71\x9a\xa7\xe5\x94\xa9\x23\x74\x91\x3d\xef\xe8\xc7\x8e\x31\xe2\x4b\xf8\x8a\xe5\x3c\xc1\x02\xc5\xc1\xc2\x94\x95\x65\x9e\x76\x4e\x85\x7b\x6c\x63\x80\x80\x9e\x9c\x91\x0c\x63\xaf\x46\xa5\x82\x45\x17\x2c\x96\x0d\x9c\x81\x29\xab\x41\x7e\x27\xeb\xc4\x2a\x52\x41\xa2\x7f\x2b\xec\x8f\xa8\x8b\x82\x0b\x33\xfc\xd7\x46\x75\x5d\xb0\x63\x6a\x1a\x64\x6f\x94\x3a\xe7\xc5\x07\xa3\xe0\xcc\x49\xa3\x93\x73\xbc\x8e\x42\x57\x33\x2b\xc9\x85\x41\x65\xdd\x8f\x17\x61\x0c\xeb\x35\x48\x81\x50\xa1\x72\x65\x27\x97\x0a\xfa\x46\x20\x2d\x98\xde\xa2\xb6\x26\xb8\x48\x99\x98\x6a\x9e\xd6\x04\x21\x23\x94\x39\x4b\x31\x39\xad\x73\x82\x8d\x1c\x0f\x03\x78\xdb\xc5\x10\x91\xa2\x8e\xf2\xa0\x03\x3a\x3b\xe8\xce\x2a\xeb\x46\x44\x0d\x4a\x25\x85\xda\x84\xf7\x0a\xae\x79\x86\xca\x77\x0b\x32\x07\x4d\xfc\xb1\x4d\x81\x56\x34\x9d\x58\xa8\x4c\xf1\x1d\x2a\x5f\xd9\x77\xae\x73\x60\xc6\x79\x92\xac\x6c\xf9\xdd\x22\x14\x5c\x1b\xab\x0b\x6c\x2a\xcc\x38\x8a\x74\x1f\x2c\xf4\x35\x37\xe9\x16\x76\x64\x7d\x57\x44\x23\x42\x6c\x19\x4f\x5d\xb6\x35\x7f\xfb\xeb\xcb\x13\x2c\xef\x62\x0f\xe5\x5c\xca\x81\x39\x6f\x9a\x77\xa6\x5d\xec\x12\xde\xc8\xfa\x94\x62\x66\xbc\x8b\xe4\xa2\x1c\x46\x19\xde\x96\xa8\xad\xd3\xf2\x25\x2a\xaf\x4e\xa6\x87\xbc\x4d\xf0\x4e\xcd\x2b\xd8\x79\x5f\xd6\x46\x51\x9d\x4b\x5e\x19\xc9\xa3\x5d\xfc\x83\xdb\x18\xd9\x60\xcc\xeb\x94\x4d\x56\xf8\x60\x5d\x2c\xc8\xb7\x17\xdd\xd0\xaa\x58\x71\x5d\x68\xdd\x2d\xae\x8f\xb4\x5d\xfc\x8d\xc4\x3e\xd0\x7f\x50\xf1\x8f\xc1\x07\xe7\xd8\x1d\x5c\xe6\x4e\x87\x59\xde\xc4\x41\x92\x78\x06\x2d\x7f\x3e\x8d\x9c\xca\x05\x81\x63\xcd\x52\x59\xf6\xa4\xeb\xfb\xd0\xae\xef\xe7\xd3\x4b\x8f\xeb\x7f\xe0\x6b\x82\x7a\x79\x84\xdb\xb1\xf0\x18\xd8\xf3\x42\x32\x42\x4f\x99\xf0\x57\x2d\x45\x5f\xdc\x34\xe0\x0e\xd5\xde\x6c\x6d\xcf\x43\x7e\xe4\x21\x29\x33\x73\xf3\x3d\xad\x88\xba\xdc\xa0\xba\x53\x37\x0f\x42\xe2\x51\x34\x5b\x3f\xa6\xd9\xea\x47\xb5\xdb\xf2\x90\x46\xbf\x16\xfd\x6d\xd9\x68\xf9\xad\xb2\xef\xf2\xe1\xd2\x6f\x17\x2c\x86\x06\x23\x38\xd9\x55\x68\xd7\x4e\xae\xd7\xe0\x6a\xe2\xa4\xc8\xbb\x7a\xe9\xf6\x66\x4b\xfd\xb4\xd2\x5b\x48\x6a\xf6\xc6\x95\x76\xa6\xe5\x3b\xf4\x7a\xab\xa1\xfd\x71\x9d\xf4\xb7\xe0\xc6\xfa\x6a\xd4\x8c\x78\x19\x5a\x31\xff\xa7\x6f\x95\xf3\x82\x5d\x7a\x16\x2f\xf0\x46\x37\xfa\x56\x16\x4c\x5c\x02\x01\xf9\x1e\x63\x60\x12\x88\xc7\xdb\x5a\x24\x34\x64\xcd\x61\x5c\x1c\x7a\xd1\xdd\xad\x3d\x27\x39\x40\x30\x14\x95\x51\xa3\xe9\x7a\xe7\xb7\xb7\xf3\xf8\x16\x8d\x19\x6b\xf2\x2e\x26\xdf\x22\x35\xf2\xa3\x16\x6e\xa4\xc3\x65\xe3\x69\x7e\xa4\x4e\x72\x42\xf4\x92\x9b\x6d\xbd\x49\x52\x59\xae\x75\x95\xff\xf9\x2f\xeb\xea\xef\xa4\xc8\x89\x8e\x6e\xa1\x4c\x48\xa3\xb8\x1f\x3e\x0f\x54\xc3\xc9\xec\x74\xb2\x8f\x9e\x69\xa1\xc9\x8e\xb6\xed\x3d\xaf\x8b\x62\x32\x31\x69\xa3\xea\xd4\xb4\x34\x83\x8d\xd7\x27\x9f\xc1\xe2\x17\x3b\xc0\x51\x8c\x2e\x36\x52\x16\x6d\xbb\x5e\xc2\xab\x2c\x03\x2d\x4b\x12\x2c\x97\x14\xfe\x46\xc2\xf5\x16\xcd\x96\xda\xec\x2d\xd7\x3e\x2f\x5c\x33\x6d\x6f\x33\xb2\xda\xca\x74\x18\x62\xe8\x4b\x2a\x3b\x21\x2e\xd7\x9d\x1f\xef\x47\x33\xda\xe2\x02\xcd\x62\x31\xa2\x49\x43\x22\xb8\x29\xd1\x2a\xf0\x1c\xaf\x6f\x8a\x64\xbd\xeb\xb8\xfb\x6e\x66\x24\xb7\x61\xd1\x24\x7d\xc7\x6e\x67\x84\x3d\x8d\xbc\xd7\x08\xfc\x52\x48\x85\x4e\x06\xeb\x9f\x2b\xe0\x06\xae\x79\x51\xc0\xaf\xb5\x36\xb0\x41\xa0\x39\x41\xb8\xa9\xd6\x35\xc9\xbd\xa5\xbc\x73\xfc\xb7\x93\xc4\x1c\x83\xf7\x9c\x26\xfc\x55\xd9\x48\x73\x4d\x42\x31\x7b\x06\x46\xd5\x78\xd0\xda\xec\xd8\xd1\x24\xd3\x6b\x82\x26\x71\xb6\x9e\x99\x46\x56\x90\xb3\x42\xe3\x64\x28\x71\x09\x7b\x8a\x28\x39\x70\x1f\x93\xa2\x7b\xa4\xd1\x21\xe9\xc7\x63\x9d\xf9\xbc\x73\x5c\x88\xbe\x3a\x41\xce\xa9\xf3\xce\x24\xc9\x73\x78\xe2\x19\x1d\x4d\xb3\x82\x17\xfd\x2d\xcd\xcd\xd1\x8a\xa5\x29\x56\x46\xbb\xc4\x6a\x47\x29\xe2\xdc\x0d\x5c\xc9\x34\xed\x4e\x34\xf4\xa0\x15\xe1\xb1\x04\x1e\xca\xd8\xd4\xba\x33\x55\xcd\xb9\xd9\xad\x97\x2d\x3f\x5f\xbc\x3f\x87\x54\x2a\x85\xa9\x29\xf6\xa0\x51\x71\x56\xf0\x7f\xd1\x74\x3a\x97\x9d\x8c\x04\x3a\xd1\x8b\x29\x66\xc5\x1c\xa1\x9e\xbf\x7d\x71\x17\xf5\xe4\x56\x17\xf6\xc2\x20\xa4\xbf\xa1\x15\x5f\x78\xbf\x1c\x89\x4f\xbd\x6b\xe2\x71\x46\x62\x6a\xb3\xb1\x52\xfc\x75\x8e\x47\x3c\x7f\x97\x33\x11\x38\xc3\xbb\x44\xce\x95\x2c\x27\x42\xcf\x26\x87\x23\x0a\xd1\x66\xe6\x6e\x67\x94\x04\x82\xc5\x8e\x29\x68\xc6\x69\xc4\xc5\xed\xcb\x33\x27\xef\x80\x2d\xda\xac\xe0\xbb\x66\x7a\xbb\x33\x73\xb9\xe3\xa2\x5e\xb8\x30\x6f\xe2\x49\x4d\x3e\x76\x87\x63\xcf\x60\x22\xfb\x8a\x4a\x45\xa6\x73\xc5\x8a\x84\xbb\xb9\x7f\x7b\x51\xb8\x30\xea\x9e\x75\x81\x2c\xf9\xb8\xa5\xe1\xa1\x02\xdc\x72\xfa\x3b\xc7\xf8\xef\x18\xd8\x56\xbc\x3f\x62\x6c\x5b\xc1\xff\x5f\xc2\xfb\x28\xba\x0f\x33\xc4\xe1\xb5\x74\x78\x8c\x1a\x5e\x4c\x67\x5e\x1a\xc8\x70\x6d\xeb\xbb\x5e\x9e\xef\xdd\x93\x27\x50\x9f\xdb\x7b\x9d\x7b\x10\xe9\xba\x99\xcb\x60\xfb\x56\x61\xfb\x15\xc1\xca\xe1\xb4\x7f\xf9\x9a\x03\x75\xb2\x90\x91\xec\x0d\xa8\xcc\xa1\x92\x5a\xf3\x4d\xd1\x5f\x5b\xf6\x57\xa6\x32\x9f\x9c\xf7\x86\x9b\x41\x1a\xc5\xf0\xe9\xf3\xa1\x6d\x37\x65\x45\xda\x2f\xd9\x15\x46\xfd\xfa\x0a\x0a\x9c\x7f\x68\x89\x69\xde\x97\xd5\x3e\xb2\x57\xef\xb3\x10\x83\x05\x4c\x59\x1d\x2c\x60\x1f\xa7\x67\x54\xf2\x8e\x55\x56\x21\x50\xb2\x6a\xac\x4f\xd7\x9b\xfa\x97\xad\x49\x77\xea\x0d\x75\x9f\x79\xb3\xcf\x0c\xa3\x39\x85\xe7\xf4\x71\xe2\x4d\xec\x1d\xab\x3e\x35\x37\x5e\xbf\xb4\x51\xe3\x90\xcb\x4b\x93\x5c\x54\x8a\x0b\x93\x47\x93\x71\x27\x7a\x96\xc5\xe1\x0a\x9a\x38\x98\x17\xd7\xa5\x54\x2b\x30\x8d\x17\x23\x91\x93\xfe\x51\x0f\x8f\x7c\xf4\x3f\x01\x00\x00\xff\xff\x9f\x4d\x58\xd0\x4a\x20\x00\x00")

func enumTmplBytes() ([]byte, error) {
	return bindataRead(
		_enumTmpl,
		"enum.tmpl",
	)
}

func enumTmpl() (*asset, error) {
	bytes, err := enumTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "enum.tmpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x93, 0xaa, 0xca, 0xe1, 0xd6, 0x4c, 0x4e, 0x87, 0x6b, 0x96, 0x6, 0xa, 0x6b, 0xcb, 0x25, 0xc1, 0xff, 0xb2, 0x79, 0xe3, 0x66, 0x2f, 0xd, 0x43, 0x6b, 0x41, 0xea, 0x4d, 0xb1, 0x67, 0x76, 0xbe}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"enum.tmpl": enumTmpl,
}

// AssetDebug is true if the assets were built with the debug flag enabled.
const AssetDebug = false

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"enum.tmpl": {enumTmpl, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
