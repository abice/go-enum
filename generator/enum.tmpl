{{- define "header"}}
// Code generated by go-enum
// DO NOT EDIT!

package {{.package}}

import (
    "fmt"
)
{{end -}}

{{- define "enum"}}
const (
{{- $enumName := .enum.Name -}}
{{ range $rIndex, $value := .enum.Values }}
	{{ if eq $value.Name "_"}}// Skipped value{{else}}// {{$value.PrefixedName}} is a {{$enumName}} of type {{$value.Name}}{{end}}
    {{$value.PrefixedName}} {{ if eq $rIndex 0 }}{{$enumName}} = iota{{end}} {{ if ne $rIndex $value.Value }}{{$enumName}} = iota + {{sub $value.Value $rIndex }}{{end}}
{{- end}}
)

{{ template "stringer" . }}

// Parse{{.enum.Name}} attempts to convert a string to a {{.enum.Name}}
func Parse{{.enum.Name}}(name string) ({{.enum.Name}}, error) {
	if x, ok := _{{.enum.Name}}Value[name]; ok {
		return {{.enum.Name}}(x), nil
	}
	return {{.enum.Name}}(0), fmt.Errorf("%s is not a valid {{.enum.Name}}", name)
}

{{ if .marshal }}
func (x *{{.enum.Name}}) MarshalText() ([]byte, error) {
	return []byte(x.String()), nil
}

func (x *{{.enum.Name}}) UnmarshalText(text []byte) error {
	name := string(text)
	tmp, err := Parse{{.enum.Name}}(name)
	if err != nil {
		return err
	}
	*x = tmp
	return nil
}
{{end}}

{{end}}


{{- define "stringer"}}
const _{{.enum.Name}}Name = "{{ stringify .enum }}"

var _{{.enum.Name}}Map = {{ mapify .enum }}


func (i {{.enum.Name}}) String() string {
	if str, ok := _{{.enum.Name}}Map[i]; ok {
		return str
	}
	return fmt.Sprintf("{{.enum.Name}}(%d)", i)
}

var _{{.enum.Name}}Value = {{ unmapify .enum .lowercase }}

{{end}}