([]string) (len=3055) {
  (string) (len=41) "// Code generated by go-enum DO NOT EDIT.",
  (string) (len=13) "// Version: -",
  (string) (len=14) "// Revision: -",
  (string) (len=16) "// Build Date: -",
  (string) (len=14) "// Built By: -",
  (string) "",
  (string) (len=17) "package generator",
  (string) "",
  (string) (len=8) "import (",
  (string) (len=22) "\t\"database/sql/driver\"",
  (string) (len=16) "\t\"encoding/json\"",
  (string) (len=6) "\t\"fmt\"",
  (string) (len=10) "\t\"strconv\"",
  (string) (len=10) "\t\"strings\"",
  (string) "",
  (string) (len=24) "\t\"github.com/pkg/errors\"",
  (string) (len=1) ")",
  (string) "",
  (string) (len=7) "const (",
  (string) (len=46) "\t// Custom_prefix_Cat is a Animal of type Cat.",
  (string) (len=32) "\tCustom_prefix_Cat Animal = iota",
  (string) (len=46) "\t// Custom_prefix_Dog is a Animal of type Dog.",
  (string) (len=18) "\tCustom_prefix_Dog",
  (string) (len=48) "\t// Custom_prefix_Fish is a Animal of type Fish.",
  (string) (len=19) "\tCustom_prefix_Fish",
  (string) (len=1) ")",
  (string) "",
  (string) (len=32) "const _AnimalName = \"CatDogFish\"",
  (string) "",
  (string) (len=35) "var _AnimalMap = map[Animal]string{",
  (string) (len=38) "\tCustom_prefix_Cat:  _AnimalName[0:3],",
  (string) (len=38) "\tCustom_prefix_Dog:  _AnimalName[3:6],",
  (string) (len=39) "\tCustom_prefix_Fish: _AnimalName[6:10],",
  (string) (len=1) "}",
  (string) "",
  (string) (len=44) "// String implements the Stringer interface.",
  (string) (len=33) "func (x Animal) String() string {",
  (string) (len=34) "\tif str, ok := _AnimalMap[x]; ok {",
  (string) (len=12) "\t\treturn str",
  (string) (len=2) "\t}",
  (string) (len=36) "\treturn fmt.Sprintf(\"Animal(%d)\", x)",
  (string) (len=1) "}",
  (string) "",
  (string) (len=37) "var _AnimalValue = map[string]Animal{",
  (string) (len=55) "\t_AnimalName[0:3]:                   Custom_prefix_Cat,",
  (string) (len=55) "\tstrings.ToLower(_AnimalName[0:3]):  Custom_prefix_Cat,",
  (string) (len=55) "\t_AnimalName[3:6]:                   Custom_prefix_Dog,",
  (string) (len=55) "\tstrings.ToLower(_AnimalName[3:6]):  Custom_prefix_Dog,",
  (string) (len=56) "\t_AnimalName[6:10]:                  Custom_prefix_Fish,",
  (string) (len=56) "\tstrings.ToLower(_AnimalName[6:10]): Custom_prefix_Fish,",
  (string) (len=1) "}",
  (string) "",
  (string) (len=55) "// ParseAnimal attempts to convert a string to a Animal",
  (string) (len=47) "func ParseAnimal(name string) (Animal, error) {",
  (string) (len=37) "\tif x, ok := _AnimalValue[name]; ok {",
  (string) (len=15) "\t\treturn x, nil",
  (string) (len=2) "\t}",
  (string) (len=63) "\treturn Animal(0), fmt.Errorf(\"%s is not a valid Animal\", name)",
  (string) (len=1) "}",
  (string) "",
  (string) (len=31) "func (x Animal) Ptr() *Animal {",
  (string) (len=10) "\treturn &x",
  (string) (len=1) "}",
  (string) "",
  (string) (len=52) "// MarshalText implements the text marshaller method",
  (string) (len=47) "func (x Animal) MarshalText() ([]byte, error) {",
  (string) (len=31) "\treturn []byte(x.String()), nil",
  (string) (len=1) "}",
  (string) "",
  (string) (len=56) "// UnmarshalText implements the text unmarshaller method",
  (string) (len=51) "func (x *Animal) UnmarshalText(text []byte) error {",
  (string) (len=21) "\tname := string(text)",
  (string) (len=30) "\ttmp, err := ParseAnimal(name)",
  (string) (len=16) "\tif err != nil {",
  (string) (len=12) "\t\treturn err",
  (string) (len=2) "\t}",
  (string) (len=9) "\t*x = tmp",
  (string) (len=11) "\treturn nil",
  (string) (len=1) "}",
  (string) "",
  (string) (len=93) "var _AnimalErrNilPtr = errors.New(\"value pointer is nil\") // one per type for package clashes",
  (string) "",
  (string) (len=41) "// Scan implements the Scanner interface.",
  (string) (len=54) "func (x *Animal) Scan(value interface{}) (err error) {",
  (string) (len=18) "\tif value == nil {",
  (string) (len=16) "\t\t*x = Animal(0)",
  (string) (len=8) "\t\treturn",
  (string) (len=2) "\t}",
  (string) "",
  (string) (len=37) "\t// A wider range of scannable types.",
  (string) (len=61) "\t// driver.Value values at the top of the list for expediency",
  (string) (len=27) "\tswitch v := value.(type) {",
  (string) (len=12) "\tcase int64:",
  (string) (len=16) "\t\t*x = Animal(v)",
  (string) (len=13) "\tcase string:",
  (string) (len=26) "\t\t*x, err = ParseAnimal(v)",
  (string) (len=17) "\t\tif err != nil {",
  (string) (len=47) "\t\t\t// try parsing the integer value as a string",
  (string) (len=49) "\t\t\tif val, verr := strconv.Atoi(v); verr == nil {",
  (string) (len=30) "\t\t\t\t*x, err = Animal(val), nil",
  (string) (len=4) "\t\t\t}",
  (string) (len=3) "\t\t}",
  (string) (len=13) "\tcase []byte:",
  (string) (len=34) "\t\t*x, err = ParseAnimal(string(v))",
  (string) (len=17) "\t\tif err != nil {",
  (string) (len=47) "\t\t\t// try parsing the integer value as a string",
  (string) (len=57) "\t\t\tif val, verr := strconv.Atoi(string(v)); verr == nil {",
  (string) (len=30) "\t\t\t\t*x, err = Animal(val), nil",
  (string) (len=4) "\t\t\t}",
  (string) (len=3) "\t\t}",
  (string) (len=13) "\tcase Animal:",
  (string) (len=8) "\t\t*x = v",
  (string) (len=10) "\tcase int:",
  (string) (len=16) "\t\t*x = Animal(v)",
  (string) (len=14) "\tcase *Animal:",
  (string) (len=15) "\t\tif v == nil {",
  (string) (len=26) "\t\t\treturn _AnimalErrNilPtr",
  (string) (len=3) "\t\t}",
  (string) (len=9) "\t\t*x = *v",
  (string) (len=11) "\tcase uint:",
  (string) (len=16) "\t\t*x = Animal(v)",
  (string) (len=13) "\tcase uint64:",
  (string) (len=16) "\t\t*x = Animal(v)",
  (string) (len=11) "\tcase *int:",
  (string) (len=15) "\t\tif v == nil {",
  (string) (len=26) "\t\t\treturn _AnimalErrNilPtr",
  (string) (len=3) "\t\t}",
  (string) (len=17) "\t\t*x = Animal(*v)",
  (string) (len=13) "\tcase *int64:",
  (string) (len=15) "\t\tif v == nil {",
  (string) (len=26) "\t\t\treturn _AnimalErrNilPtr",
  (string) (len=3) "\t\t}",
  (string) (len=17) "\t\t*x = Animal(*v)",
  (string) (len=72) "\tcase float64: // json marshals everything as a float64 if it's a number",
  (string) (len=16) "\t\t*x = Animal(v)",
  (string) (len=73) "\tcase *float64: // json marshals everything as a float64 if it's a number",
  (string) (len=15) "\t\tif v == nil {",
  (string) (len=26) "\t\t\treturn _AnimalErrNilPtr",
  (string) (len=3) "\t\t}",
  (string) (len=17) "\t\t*x = Animal(*v)",
  (string) (len=12) "\tcase *uint:",
  (string) (len=15) "\t\tif v == nil {",
  (string) (len=26) "\t\t\treturn _AnimalErrNilPtr",
  (string) (len=3) "\t\t}",
  (string) (len=17) "\t\t*x = Animal(*v)",
  (string) (len=14) "\tcase *uint64:",
  (string) (len=15) "\t\tif v == nil {",
  (string) (len=26) "\t\t\treturn _AnimalErrNilPtr",
  (string) (len=3) "\t\t}",
  (string) (len=17) "\t\t*x = Animal(*v)",
  (string) (len=14) "\tcase *string:",
  (string) (len=15) "\t\tif v == nil {",
  (string) (len=26) "\t\t\treturn _AnimalErrNilPtr",
  (string) (len=3) "\t\t}",
  (string) (len=27) "\t\t*x, err = ParseAnimal(*v)",
  (string) (len=17) "\t\tif err != nil {",
  (string) (len=47) "\t\t\t// try parsing the integer value as a string",
  (string) (len=50) "\t\t\tif val, verr := strconv.Atoi(*v); verr == nil {",
  (string) (len=30) "\t\t\t\t*x, err = Animal(val), nil",
  (string) (len=4) "\t\t\t}",
  (string) (len=3) "\t\t}",
  (string) (len=2) "\t}",
  (string) "",
  (string) (len=7) "\treturn",
  (string) (len=1) "}",
  (string) "",
  (string) (len=48) "// Value implements the driver Valuer interface.",
  (string) (len=47) "func (x Animal) Value() (driver.Value, error) {",
  (string) (len=23) "\treturn x.String(), nil",
  (string) (len=1) "}",
  (string) "",
  (string) (len=55) "// Set implements the Golang flag.Value interface func.",
  (string) (len=40) "func (x *Animal) Set(val string) error {",
  (string) (len=27) "\tv, err := ParseAnimal(val)",
  (string) (len=7) "\t*x = v",
  (string) (len=11) "\treturn err",
  (string) (len=1) "}",
  (string) "",
  (string) (len=56) "// Get implements the Golang flag.Getter interface func.",
  (string) (len=36) "func (x *Animal) Get() interface{} {",
  (string) (len=10) "\treturn *x",
  (string) (len=1) "}",
  (string) "",
  (string) (len=62) "// Type implements the github.com/spf13/pFlag Value interface.",
  (string) (len=32) "func (x *Animal) Type() string {",
  (string) (len=16) "\treturn \"Animal\"",
  (string) (len=1) "}",
  (string) "",
  (string) (len=24) "type NullAnimal struct {",
  (string) (len=14) "\tAnimal Animal",
  (string) (len=12) "\tValid  bool",
  (string) (len=12) "\tSet    bool",
  (string) (len=1) "}",
  (string) "",
  (string) (len=52) "func NewNullAnimal(val interface{}) (x NullAnimal) {",
  (string) (len=76) "\tx.Scan(val) // yes, we ignore this error, it will just be an invalid value.",
  (string) (len=7) "\treturn",
  (string) (len=1) "}",
  (string) "",
  (string) (len=41) "// Scan implements the Scanner interface.",
  (string) (len=58) "func (x *NullAnimal) Scan(value interface{}) (err error) {",
  (string) (len=13) "\tx.Set = true",
  (string) (len=18) "\tif value == nil {",
  (string) (len=38) "\t\tx.Animal, x.Valid = Animal(0), false",
  (string) (len=8) "\t\treturn",
  (string) (len=2) "\t}",
  (string) "",
  (string) (len=27) "\terr = x.Animal.Scan(value)",
  (string) (len=23) "\tx.Valid = (err == nil)",
  (string) (len=7) "\treturn",
  (string) (len=1) "}",
  (string) "",
  (string) (len=48) "// Value implements the driver Valuer interface.",
  (string) (len=51) "func (x NullAnimal) Value() (driver.Value, error) {",
  (string) (len=14) "\tif !x.Valid {",
  (string) (len=17) "\t\treturn nil, nil",
  (string) (len=2) "\t}",
  (string) (len=46) "\t// driver.Value accepts int64 for int values.",
  (string) (len=28) "\treturn int64(x.Animal), nil",
  (string) (len=1) "}",
  (string) "",
  (string) (len=57) "// MarshalJSON correctly serializes a NullAnimal to JSON.",
  (string) (len=51) "func (n NullAnimal) MarshalJSON() ([]byte, error) {",
  (string) (len=23) "\tconst nullStr = \"null\"",
  (string) (len=13) "\tif n.Valid {",
  (string) (len=31) "\t\treturn json.Marshal(n.Animal)",
  (string) (len=2) "\t}",
  (string) (len=28) "\treturn []byte(nullStr), nil",
  (string) (len=1) "}",
  (string) "",
  (string) (len=63) "// UnmarshalJSON correctly deserializes a NullAnimal from JSON.",
  (string) (len=52) "func (n *NullAnimal) UnmarshalJSON(b []byte) error {",
  (string) (len=13) "\tn.Set = true",
  (string) (len=18) "\tvar x interface{}",
  (string) (len=29) "\terr := json.Unmarshal(b, &x)",
  (string) (len=16) "\tif err != nil {",
  (string) (len=12) "\t\treturn err",
  (string) (len=2) "\t}",
  (string) (len=16) "\terr = n.Scan(x)",
  (string) (len=11) "\treturn err",
  (string) (len=1) "}",
  (string) "",
  (string) (len=27) "type NullAnimalStr struct {",
  (string) (len=11) "\tNullAnimal",
  (string) (len=1) "}",
  (string) "",
  (string) (len=58) "func NewNullAnimalStr(val interface{}) (x NullAnimalStr) {",
  (string) (len=76) "\tx.Scan(val) // yes, we ignore this error, it will just be an invalid value.",
  (string) (len=7) "\treturn",
  (string) (len=1) "}",
  (string) "",
  (string) (len=48) "// Value implements the driver Valuer interface.",
  (string) (len=54) "func (x NullAnimalStr) Value() (driver.Value, error) {",
  (string) (len=14) "\tif !x.Valid {",
  (string) (len=17) "\t\treturn nil, nil",
  (string) (len=2) "\t}",
  (string) (len=30) "\treturn x.Animal.String(), nil",
  (string) (len=1) "}",
  (string) "",
  (string) (len=57) "// MarshalJSON correctly serializes a NullAnimal to JSON.",
  (string) (len=54) "func (n NullAnimalStr) MarshalJSON() ([]byte, error) {",
  (string) (len=23) "\tconst nullStr = \"null\"",
  (string) (len=13) "\tif n.Valid {",
  (string) (len=31) "\t\treturn json.Marshal(n.Animal)",
  (string) (len=2) "\t}",
  (string) (len=28) "\treturn []byte(nullStr), nil",
  (string) (len=1) "}",
  (string) "",
  (string) (len=63) "// UnmarshalJSON correctly deserializes a NullAnimal from JSON.",
  (string) (len=55) "func (n *NullAnimalStr) UnmarshalJSON(b []byte) error {",
  (string) (len=13) "\tn.Set = true",
  (string) (len=18) "\tvar x interface{}",
  (string) (len=29) "\terr := json.Unmarshal(b, &x)",
  (string) (len=16) "\tif err != nil {",
  (string) (len=12) "\t\treturn err",
  (string) (len=2) "\t}",
  (string) (len=16) "\terr = n.Scan(x)",
  (string) (len=11) "\treturn err",
  (string) (len=1) "}",
  (string) "",
  (string) (len=7) "const (",
  (string) (len=59) "\t// Custom_prefix_Test_lower is a Cases of type Test_lower.",
  (string) (len=38) "\tCustom_prefix_Test_lower Cases = iota",
  (string) (len=63) "\t// Custom_prefix_Test_capital is a Cases of type Test_capital.",
  (string) (len=27) "\tCustom_prefix_Test_capital",
  (string) (len=81) "\t// Custom_prefix_AnotherLowerCaseStart is a Cases of type AnotherLowerCaseStart.",
  (string) (len=36) "\tCustom_prefix_AnotherLowerCaseStart",
  (string) (len=1) ")",
  (string) "",
  (string) (len=64) "const _CasesName = \"test_lowerTest_capitalanotherLowerCaseStart\"",
  (string) "",
  (string) (len=33) "var _CasesMap = map[Cases]string{",
  (string) (len=55) "\tCustom_prefix_Test_lower:            _CasesName[0:10],",
  (string) (len=56) "\tCustom_prefix_Test_capital:          _CasesName[10:22],",
  (string) (len=56) "\tCustom_prefix_AnotherLowerCaseStart: _CasesName[22:43],",
  (string) (len=1) "}",
  (string) "",
  (string) (len=44) "// String implements the Stringer interface.",
  (string) (len=32) "func (x Cases) String() string {",
  (string) (len=33) "\tif str, ok := _CasesMap[x]; ok {",
  (string) (len=12) "\t\treturn str",
  (string) (len=2) "\t}",
  (string) (len=35) "\treturn fmt.Sprintf(\"Cases(%d)\", x)",
  (string) (len=1) "}",
  (string) "",
  (string) (len=35) "var _CasesValue = map[string]Cases{",
  (string) (len=62) "\t_CasesName[0:10]:                   Custom_prefix_Test_lower,",
  (string) (len=62) "\tstrings.ToLower(_CasesName[0:10]):  Custom_prefix_Test_lower,",
  (string) (len=64) "\t_CasesName[10:22]:                  Custom_prefix_Test_capital,",
  (string) (len=64) "\tstrings.ToLower(_CasesName[10:22]): Custom_prefix_Test_capital,",
  (string) (len=73) "\t_CasesName[22:43]:                  Custom_prefix_AnotherLowerCaseStart,",
  (string) (len=73) "\tstrings.ToLower(_CasesName[22:43]): Custom_prefix_AnotherLowerCaseStart,",
  (string) (len=1) "}",
  (string) "",
  (string) (len=53) "// ParseCases attempts to convert a string to a Cases",
  (string) (len=45) "func ParseCases(name string) (Cases, error) {",
  (string) (len=36) "\tif x, ok := _CasesValue[name]; ok {",
  (string) (len=15) "\t\treturn x, nil",
  (string) (len=2) "\t}",
  (string) (len=61) "\treturn Cases(0), fmt.Errorf(\"%s is not a valid Cases\", name)",
  (string) (len=1) "}",
  (string) "",
  (string) (len=29) "func (x Cases) Ptr() *Cases {",
  (string) (len=10) "\treturn &x",
  (string) (len=1) "}",
  (string) "",
  (string) (len=52) "// MarshalText implements the text marshaller method",
  (string) (len=46) "func (x Cases) MarshalText() ([]byte, error) {",
  (string) (len=31) "\treturn []byte(x.String()), nil",
  (string) (len=1) "}",
  (string) "",
  (string) (len=56) "// UnmarshalText implements the text unmarshaller method",
  (string) (len=50) "func (x *Cases) UnmarshalText(text []byte) error {",
  (string) (len=21) "\tname := string(text)",
  (string) (len=29) "\ttmp, err := ParseCases(name)",
  (string) (len=16) "\tif err != nil {",
  (string) (len=12) "\t\treturn err",
  (string) (len=2) "\t}",
  (string) (len=9) "\t*x = tmp",
  (string) (len=11) "\treturn nil",
  (string) (len=1) "}",
  (string) "",
  (string) (len=92) "var _CasesErrNilPtr = errors.New(\"value pointer is nil\") // one per type for package clashes",
  (string) "",
  (string) (len=41) "// Scan implements the Scanner interface.",
  (string) (len=53) "func (x *Cases) Scan(value interface{}) (err error) {",
  (string) (len=18) "\tif value == nil {",
  (string) (len=15) "\t\t*x = Cases(0)",
  (string) (len=8) "\t\treturn",
  (string) (len=2) "\t}",
  (string) "",
  (string) (len=37) "\t// A wider range of scannable types.",
  (string) (len=61) "\t// driver.Value values at the top of the list for expediency",
  (string) (len=27) "\tswitch v := value.(type) {",
  (string) (len=12) "\tcase int64:",
  (string) (len=15) "\t\t*x = Cases(v)",
  (string) (len=13) "\tcase string:",
  (string) (len=25) "\t\t*x, err = ParseCases(v)",
  (string) (len=17) "\t\tif err != nil {",
  (string) (len=47) "\t\t\t// try parsing the integer value as a string",
  (string) (len=49) "\t\t\tif val, verr := strconv.Atoi(v); verr == nil {",
  (string) (len=29) "\t\t\t\t*x, err = Cases(val), nil",
  (string) (len=4) "\t\t\t}",
  (string) (len=3) "\t\t}",
  (string) (len=13) "\tcase []byte:",
  (string) (len=33) "\t\t*x, err = ParseCases(string(v))",
  (string) (len=17) "\t\tif err != nil {",
  (string) (len=47) "\t\t\t// try parsing the integer value as a string",
  (string) (len=57) "\t\t\tif val, verr := strconv.Atoi(string(v)); verr == nil {",
  (string) (len=29) "\t\t\t\t*x, err = Cases(val), nil",
  (string) (len=4) "\t\t\t}",
  (string) (len=3) "\t\t}",
  (string) (len=12) "\tcase Cases:",
  (string) (len=8) "\t\t*x = v",
  (string) (len=10) "\tcase int:",
  (string) (len=15) "\t\t*x = Cases(v)",
  (string) (len=13) "\tcase *Cases:",
  (string) (len=15) "\t\tif v == nil {",
  (string) (len=25) "\t\t\treturn _CasesErrNilPtr",
  (string) (len=3) "\t\t}",
  (string) (len=9) "\t\t*x = *v",
  (string) (len=11) "\tcase uint:",
  (string) (len=15) "\t\t*x = Cases(v)",
  (string) (len=13) "\tcase uint64:",
  (string) (len=15) "\t\t*x = Cases(v)",
  (string) (len=11) "\tcase *int:",
  (string) (len=15) "\t\tif v == nil {",
  (string) (len=25) "\t\t\treturn _CasesErrNilPtr",
  (string) (len=3) "\t\t}",
  (string) (len=16) "\t\t*x = Cases(*v)",
  (string) (len=13) "\tcase *int64:",
  (string) (len=15) "\t\tif v == nil {",
  (string) (len=25) "\t\t\treturn _CasesErrNilPtr",
  (string) (len=3) "\t\t}",
  (string) (len=16) "\t\t*x = Cases(*v)",
  (string) (len=72) "\tcase float64: // json marshals everything as a float64 if it's a number",
  (string) (len=15) "\t\t*x = Cases(v)",
  (string) (len=73) "\tcase *float64: // json marshals everything as a float64 if it's a number",
  (string) (len=15) "\t\tif v == nil {",
  (string) (len=25) "\t\t\treturn _CasesErrNilPtr",
  (string) (len=3) "\t\t}",
  (string) (len=16) "\t\t*x = Cases(*v)",
  (string) (len=12) "\tcase *uint:",
  (string) (len=15) "\t\tif v == nil {",
  (string) (len=25) "\t\t\treturn _CasesErrNilPtr",
  (string) (len=3) "\t\t}",
  (string) (len=16) "\t\t*x = Cases(*v)",
  (string) (len=14) "\tcase *uint64:",
  (string) (len=15) "\t\tif v == nil {",
  (string) (len=25) "\t\t\treturn _CasesErrNilPtr",
  (string) (len=3) "\t\t}",
  (string) (len=16) "\t\t*x = Cases(*v)",
  (string) (len=14) "\tcase *string:",
  (string) (len=15) "\t\tif v == nil {",
  (string) (len=25) "\t\t\treturn _CasesErrNilPtr",
  (string) (len=3) "\t\t}",
  (string) (len=26) "\t\t*x, err = ParseCases(*v)",
  (string) (len=17) "\t\tif err != nil {",
  (string) (len=47) "\t\t\t// try parsing the integer value as a string",
  (string) (len=50) "\t\t\tif val, verr := strconv.Atoi(*v); verr == nil {",
  (string) (len=29) "\t\t\t\t*x, err = Cases(val), nil",
  (string) (len=4) "\t\t\t}",
  (string) (len=3) "\t\t}",
  (string) (len=2) "\t}",
  (string) "",
  (string) (len=7) "\treturn",
  (string) (len=1) "}",
  (string) "",
  (string) (len=48) "// Value implements the driver Valuer interface.",
  (string) (len=46) "func (x Cases) Value() (driver.Value, error) {",
  (string) (len=23) "\treturn x.String(), nil",
  (string) (len=1) "}",
  (string) "",
  (string) (len=55) "// Set implements the Golang flag.Value interface func.",
  (string) (len=39) "func (x *Cases) Set(val string) error {",
  (string) (len=26) "\tv, err := ParseCases(val)",
  (string) (len=7) "\t*x = v",
  (string) (len=11) "\treturn err",
  (string) (len=1) "}",
  (string) "",
  (string) (len=56) "// Get implements the Golang flag.Getter interface func.",
  (string) (len=35) "func (x *Cases) Get() interface{} {",
  (string) (len=10) "\treturn *x",
  (string) (len=1) "}",
  (string) "",
  (string) (len=62) "// Type implements the github.com/spf13/pFlag Value interface.",
  (string) (len=31) "func (x *Cases) Type() string {",
  (string) (len=15) "\treturn \"Cases\"",
  (string) (len=1) "}",
  (string) "",
  (string) (len=23) "type NullCases struct {",
  (string) (len=12) "\tCases Cases",
  (string) (len=11) "\tValid bool",
  (string) (len=11) "\tSet   bool",
  (string) (len=1) "}",
  (string) "",
  (string) (len=50) "func NewNullCases(val interface{}) (x NullCases) {",
  (string) (len=76) "\tx.Scan(val) // yes, we ignore this error, it will just be an invalid value.",
  (string) (len=7) "\treturn",
  (string) (len=1) "}",
  (string) "",
  (string) (len=41) "// Scan implements the Scanner interface.",
  (string) (len=57) "func (x *NullCases) Scan(value interface{}) (err error) {",
  (string) (len=13) "\tx.Set = true",
  (string) (len=18) "\tif value == nil {",
  (string) (len=36) "\t\tx.Cases, x.Valid = Cases(0), false",
  (string) (len=8) "\t\treturn",
  (string) (len=2) "\t}",
  (string) "",
  (string) (len=26) "\terr = x.Cases.Scan(value)",
  (string) (len=23) "\tx.Valid = (err == nil)",
  (string) (len=7) "\treturn",
  (string) (len=1) "}",
  (string) "",
  (string) (len=48) "// Value implements the driver Valuer interface.",
  (string) (len=50) "func (x NullCases) Value() (driver.Value, error) {",
  (string) (len=14) "\tif !x.Valid {",
  (string) (len=17) "\t\treturn nil, nil",
  (string) (len=2) "\t}",
  (string) (len=46) "\t// driver.Value accepts int64 for int values.",
  (string) (len=27) "\treturn int64(x.Cases), nil",
  (string) (len=1) "}",
  (string) "",
  (string) (len=56) "// MarshalJSON correctly serializes a NullCases to JSON.",
  (string) (len=50) "func (n NullCases) MarshalJSON() ([]byte, error) {",
  (string) (len=23) "\tconst nullStr = \"null\"",
  (string) (len=13) "\tif n.Valid {",
  (string) (len=30) "\t\treturn json.Marshal(n.Cases)",
  (string) (len=2) "\t}",
  (string) (len=28) "\treturn []byte(nullStr), nil",
  (string) (len=1) "}",
  (string) "",
  (string) (len=62) "// UnmarshalJSON correctly deserializes a NullCases from JSON.",
  (string) (len=51) "func (n *NullCases) UnmarshalJSON(b []byte) error {",
  (string) (len=13) "\tn.Set = true",
  (string) (len=18) "\tvar x interface{}",
  (string) (len=29) "\terr := json.Unmarshal(b, &x)",
  (string) (len=16) "\tif err != nil {",
  (string) (len=12) "\t\treturn err",
  (string) (len=2) "\t}",
  (string) (len=16) "\terr = n.Scan(x)",
  (string) (len=11) "\treturn err",
  (string) (len=1) "}",
  (string) "",
  (string) (len=26) "type NullCasesStr struct {",
  (string) (len=10) "\tNullCases",
  (string) (len=1) "}",
  (string) "",
  (string) (len=56) "func NewNullCasesStr(val interface{}) (x NullCasesStr) {",
  (string) (len=76) "\tx.Scan(val) // yes, we ignore this error, it will just be an invalid value.",
  (string) (len=7) "\treturn",
  (string) (len=1) "}",
  (string) "",
  (string) (len=48) "// Value implements the driver Valuer interface.",
  (string) (len=53) "func (x NullCasesStr) Value() (driver.Value, error) {",
  (string) (len=14) "\tif !x.Valid {",
  (string) (len=17) "\t\treturn nil, nil",
  (string) (len=2) "\t}",
  (string) (len=29) "\treturn x.Cases.String(), nil",
  (string) (len=1) "}",
  (string) "",
  (string) (len=56) "// MarshalJSON correctly serializes a NullCases to JSON.",
  (string) (len=53) "func (n NullCasesStr) MarshalJSON() ([]byte, error) {",
  (string) (len=23) "\tconst nullStr = \"null\"",
  (string) (len=13) "\tif n.Valid {",
  (string) (len=30) "\t\treturn json.Marshal(n.Cases)",
  (string) (len=2) "\t}",
  (string) (len=28) "\treturn []byte(nullStr), nil",
  (string) (len=1) "}",
  (string) "",
  (string) (len=62) "// UnmarshalJSON correctly deserializes a NullCases from JSON.",
  (string) (len=54) "func (n *NullCasesStr) UnmarshalJSON(b []byte) error {",
  (string) (len=13) "\tn.Set = true",
  (string) (len=18) "\tvar x interface{}",
  (string) (len=29) "\terr := json.Unmarshal(b, &x)",
  (string) (len=16) "\tif err != nil {",
  (string) (len=12) "\t\treturn err",
  (string) (len=2) "\t}",
  (string) (len=16) "\terr = n.Scan(x)",
  (string) (len=11) "\treturn err",
  (string) (len=1) "}",
  (string) "",
  (string) (len=7) "const (",
  (string) (len=49) "\t// Custom_prefix_Black is a Color of type Black.",
  (string) (len=33) "\tCustom_prefix_Black Color = iota",
  (string) (len=49) "\t// Custom_prefix_White is a Color of type White.",
  (string) (len=20) "\tCustom_prefix_White",
  (string) (len=45) "\t// Custom_prefix_Red is a Color of type Red.",
  (string) (len=18) "\tCustom_prefix_Red",
  (string) (len=49) "\t// Custom_prefix_Green is a Color of type Green.",
  (string) (len=20) "\tCustom_prefix_Green",
  (string) (len=47) "\t// Custom_prefix_Blue is a Color of type Blue.",
  (string) (len=37) "\tCustom_prefix_Blue Color = iota + 29",
  (string) (len=47) "\t// Custom_prefix_Grey is a Color of type Grey.",
  (string) (len=19) "\tCustom_prefix_Grey",
  (string) (len=51) "\t// Custom_prefix_Yellow is a Color of type Yellow.",
  (string) (len=21) "\tCustom_prefix_Yellow",
  (string) (len=1) ")",
  (string) "",
  (string) (len=53) "const _ColorName = \"BlackWhiteRedGreenBluegreyyellow\"",
  (string) "",
  (string) (len=33) "var _ColorMap = map[Color]string{",
  (string) (len=39) "\tCustom_prefix_Black:  _ColorName[0:5],",
  (string) (len=40) "\tCustom_prefix_White:  _ColorName[5:10],",
  (string) (len=41) "\tCustom_prefix_Red:    _ColorName[10:13],",
  (string) (len=41) "\tCustom_prefix_Green:  _ColorName[13:18],",
  (string) (len=41) "\tCustom_prefix_Blue:   _ColorName[18:22],",
  (string) (len=41) "\tCustom_prefix_Grey:   _ColorName[22:26],",
  (string) (len=41) "\tCustom_prefix_Yellow: _ColorName[26:32],",
  (string) (len=1) "}",
  (string) "",
  (string) (len=44) "// String implements the Stringer interface.",
  (string) (len=32) "func (x Color) String() string {",
  (string) (len=33) "\tif str, ok := _ColorMap[x]; ok {",
  (string) (len=12) "\t\treturn str",
  (string) (len=2) "\t}",
  (string) (len=35) "\treturn fmt.Sprintf(\"Color(%d)\", x)",
  (string) (len=1) "}",
  (string) "",
  (string) (len=35) "var _ColorValue = map[string]Color{",
  (string) (len=57) "\t_ColorName[0:5]:                    Custom_prefix_Black,",
  (string) (len=57) "\tstrings.ToLower(_ColorName[0:5]):   Custom_prefix_Black,",
  (string) (len=57) "\t_ColorName[5:10]:                   Custom_prefix_White,",
  (string) (len=57) "\tstrings.ToLower(_ColorName[5:10]):  Custom_prefix_White,",
  (string) (len=55) "\t_ColorName[10:13]:                  Custom_prefix_Red,",
  (string) (len=55) "\tstrings.ToLower(_ColorName[10:13]): Custom_prefix_Red,",
  (string) (len=57) "\t_ColorName[13:18]:                  Custom_prefix_Green,",
  (string) (len=57) "\tstrings.ToLower(_ColorName[13:18]): Custom_prefix_Green,",
  (string) (len=56) "\t_ColorName[18:22]:                  Custom_prefix_Blue,",
  (string) (len=56) "\tstrings.ToLower(_ColorName[18:22]): Custom_prefix_Blue,",
  (string) (len=56) "\t_ColorName[22:26]:                  Custom_prefix_Grey,",
  (string) (len=56) "\tstrings.ToLower(_ColorName[22:26]): Custom_prefix_Grey,",
  (string) (len=58) "\t_ColorName[26:32]:                  Custom_prefix_Yellow,",
  (string) (len=58) "\tstrings.ToLower(_ColorName[26:32]): Custom_prefix_Yellow,",
  (string) (len=1) "}",
  (string) "",
  (string) (len=53) "// ParseColor attempts to convert a string to a Color",
  (string) (len=45) "func ParseColor(name string) (Color, error) {",
  (string) (len=36) "\tif x, ok := _ColorValue[name]; ok {",
  (string) (len=15) "\t\treturn x, nil",
  (string) (len=2) "\t}",
  (string) (len=61) "\treturn Color(0), fmt.Errorf(\"%s is not a valid Color\", name)",
  (string) (len=1) "}",
  (string) "",
  (string) (len=29) "func (x Color) Ptr() *Color {",
  (string) (len=10) "\treturn &x",
  (string) (len=1) "}",
  (string) "",
  (string) (len=52) "// MarshalText implements the text marshaller method",
  (string) (len=46) "func (x Color) MarshalText() ([]byte, error) {",
  (string) (len=31) "\treturn []byte(x.String()), nil",
  (string) (len=1) "}",
  (string) "",
  (string) (len=56) "// UnmarshalText implements the text unmarshaller method",
  (string) (len=50) "func (x *Color) UnmarshalText(text []byte) error {",
  (string) (len=21) "\tname := string(text)",
  (string) (len=29) "\ttmp, err := ParseColor(name)",
  (string) (len=16) "\tif err != nil {",
  (string) (len=12) "\t\treturn err",
  (string) (len=2) "\t}",
  (string) (len=9) "\t*x = tmp",
  (string) (len=11) "\treturn nil",
  (string) (len=1) "}",
  (string) "",
  (string) (len=92) "var _ColorErrNilPtr = errors.New(\"value pointer is nil\") // one per type for package clashes",
  (string) "",
  (string) (len=41) "// Scan implements the Scanner interface.",
  (string) (len=53) "func (x *Color) Scan(value interface{}) (err error) {",
  (string) (len=18) "\tif value == nil {",
  (string) (len=15) "\t\t*x = Color(0)",
  (string) (len=8) "\t\treturn",
  (string) (len=2) "\t}",
  (string) "",
  (string) (len=37) "\t// A wider range of scannable types.",
  (string) (len=61) "\t// driver.Value values at the top of the list for expediency",
  (string) (len=27) "\tswitch v := value.(type) {",
  (string) (len=12) "\tcase int64:",
  (string) (len=15) "\t\t*x = Color(v)",
  (string) (len=13) "\tcase string:",
  (string) (len=25) "\t\t*x, err = ParseColor(v)",
  (string) (len=17) "\t\tif err != nil {",
  (string) (len=47) "\t\t\t// try parsing the integer value as a string",
  (string) (len=49) "\t\t\tif val, verr := strconv.Atoi(v); verr == nil {",
  (string) (len=29) "\t\t\t\t*x, err = Color(val), nil",
  (string) (len=4) "\t\t\t}",
  (string) (len=3) "\t\t}",
  (string) (len=13) "\tcase []byte:",
  (string) (len=33) "\t\t*x, err = ParseColor(string(v))",
  (string) (len=17) "\t\tif err != nil {",
  (string) (len=47) "\t\t\t// try parsing the integer value as a string",
  (string) (len=57) "\t\t\tif val, verr := strconv.Atoi(string(v)); verr == nil {",
  (string) (len=29) "\t\t\t\t*x, err = Color(val), nil",
  (string) (len=4) "\t\t\t}",
  (string) (len=3) "\t\t}",
  (string) (len=12) "\tcase Color:",
  (string) (len=8) "\t\t*x = v",
  (string) (len=10) "\tcase int:",
  (string) (len=15) "\t\t*x = Color(v)",
  (string) (len=13) "\tcase *Color:",
  (string) (len=15) "\t\tif v == nil {",
  (string) (len=25) "\t\t\treturn _ColorErrNilPtr",
  (string) (len=3) "\t\t}",
  (string) (len=9) "\t\t*x = *v",
  (string) (len=11) "\tcase uint:",
  (string) (len=15) "\t\t*x = Color(v)",
  (string) (len=13) "\tcase uint64:",
  (string) (len=15) "\t\t*x = Color(v)",
  (string) (len=11) "\tcase *int:",
  (string) (len=15) "\t\tif v == nil {",
  (string) (len=25) "\t\t\treturn _ColorErrNilPtr",
  (string) (len=3) "\t\t}",
  (string) (len=16) "\t\t*x = Color(*v)",
  (string) (len=13) "\tcase *int64:",
  (string) (len=15) "\t\tif v == nil {",
  (string) (len=25) "\t\t\treturn _ColorErrNilPtr",
  (string) (len=3) "\t\t}",
  (string) (len=16) "\t\t*x = Color(*v)",
  (string) (len=72) "\tcase float64: // json marshals everything as a float64 if it's a number",
  (string) (len=15) "\t\t*x = Color(v)",
  (string) (len=73) "\tcase *float64: // json marshals everything as a float64 if it's a number",
  (string) (len=15) "\t\tif v == nil {",
  (string) (len=25) "\t\t\treturn _ColorErrNilPtr",
  (string) (len=3) "\t\t}",
  (string) (len=16) "\t\t*x = Color(*v)",
  (string) (len=12) "\tcase *uint:",
  (string) (len=15) "\t\tif v == nil {",
  (string) (len=25) "\t\t\treturn _ColorErrNilPtr",
  (string) (len=3) "\t\t}",
  (string) (len=16) "\t\t*x = Color(*v)",
  (string) (len=14) "\tcase *uint64:",
  (string) (len=15) "\t\tif v == nil {",
  (string) (len=25) "\t\t\treturn _ColorErrNilPtr",
  (string) (len=3) "\t\t}",
  (string) (len=16) "\t\t*x = Color(*v)",
  (string) (len=14) "\tcase *string:",
  (string) (len=15) "\t\tif v == nil {",
  (string) (len=25) "\t\t\treturn _ColorErrNilPtr",
  (string) (len=3) "\t\t}",
  (string) (len=26) "\t\t*x, err = ParseColor(*v)",
  (string) (len=17) "\t\tif err != nil {",
  (string) (len=47) "\t\t\t// try parsing the integer value as a string",
  (string) (len=50) "\t\t\tif val, verr := strconv.Atoi(*v); verr == nil {",
  (string) (len=29) "\t\t\t\t*x, err = Color(val), nil",
  (string) (len=4) "\t\t\t}",
  (string) (len=3) "\t\t}",
  (string) (len=2) "\t}",
  (string) "",
  (string) (len=7) "\treturn",
  (string) (len=1) "}",
  (string) "",
  (string) (len=48) "// Value implements the driver Valuer interface.",
  (string) (len=46) "func (x Color) Value() (driver.Value, error) {",
  (string) (len=23) "\treturn x.String(), nil",
  (string) (len=1) "}",
  (string) "",
  (string) (len=55) "// Set implements the Golang flag.Value interface func.",
  (string) (len=39) "func (x *Color) Set(val string) error {",
  (string) (len=26) "\tv, err := ParseColor(val)",
  (string) (len=7) "\t*x = v",
  (string) (len=11) "\treturn err",
  (string) (len=1) "}",
  (string) "",
  (string) (len=56) "// Get implements the Golang flag.Getter interface func.",
  (string) (len=35) "func (x *Color) Get() interface{} {",
  (string) (len=10) "\treturn *x",
  (string) (len=1) "}",
  (string) "",
  (string) (len=62) "// Type implements the github.com/spf13/pFlag Value interface.",
  (string) (len=31) "func (x *Color) Type() string {",
  (string) (len=15) "\treturn \"Color\"",
  (string) (len=1) "}",
  (string) "",
  (string) (len=23) "type NullColor struct {",
  (string) (len=12) "\tColor Color",
  (string) (len=11) "\tValid bool",
  (string) (len=11) "\tSet   bool",
  (string) (len=1) "}",
  (string) "",
  (string) (len=50) "func NewNullColor(val interface{}) (x NullColor) {",
  (string) (len=76) "\tx.Scan(val) // yes, we ignore this error, it will just be an invalid value.",
  (string) (len=7) "\treturn",
  (string) (len=1) "}",
  (string) "",
  (string) (len=41) "// Scan implements the Scanner interface.",
  (string) (len=57) "func (x *NullColor) Scan(value interface{}) (err error) {",
  (string) (len=13) "\tx.Set = true",
  (string) (len=18) "\tif value == nil {",
  (string) (len=36) "\t\tx.Color, x.Valid = Color(0), false",
  (string) (len=8) "\t\treturn",
  (string) (len=2) "\t}",
  (string) "",
  (string) (len=26) "\terr = x.Color.Scan(value)",
  (string) (len=23) "\tx.Valid = (err == nil)",
  (string) (len=7) "\treturn",
  (string) (len=1) "}",
  (string) "",
  (string) (len=48) "// Value implements the driver Valuer interface.",
  (string) (len=50) "func (x NullColor) Value() (driver.Value, error) {",
  (string) (len=14) "\tif !x.Valid {",
  (string) (len=17) "\t\treturn nil, nil",
  (string) (len=2) "\t}",
  (string) (len=46) "\t// driver.Value accepts int64 for int values.",
  (string) (len=27) "\treturn int64(x.Color), nil",
  (string) (len=1) "}",
  (string) "",
  (string) (len=56) "// MarshalJSON correctly serializes a NullColor to JSON.",
  (string) (len=50) "func (n NullColor) MarshalJSON() ([]byte, error) {",
  (string) (len=23) "\tconst nullStr = \"null\"",
  (string) (len=13) "\tif n.Valid {",
  (string) (len=30) "\t\treturn json.Marshal(n.Color)",
  (string) (len=2) "\t}",
  (string) (len=28) "\treturn []byte(nullStr), nil",
  (string) (len=1) "}",
  (string) "",
  (string) (len=62) "// UnmarshalJSON correctly deserializes a NullColor from JSON.",
  (string) (len=51) "func (n *NullColor) UnmarshalJSON(b []byte) error {",
  (string) (len=13) "\tn.Set = true",
  (string) (len=18) "\tvar x interface{}",
  (string) (len=29) "\terr := json.Unmarshal(b, &x)",
  (string) (len=16) "\tif err != nil {",
  (string) (len=12) "\t\treturn err",
  (string) (len=2) "\t}",
  (string) (len=16) "\terr = n.Scan(x)",
  (string) (len=11) "\treturn err",
  (string) (len=1) "}",
  (string) "",
  (string) (len=26) "type NullColorStr struct {",
  (string) (len=10) "\tNullColor",
  (string) (len=1) "}",
  (string) "",
  (string) (len=56) "func NewNullColorStr(val interface{}) (x NullColorStr) {",
  (string) (len=76) "\tx.Scan(val) // yes, we ignore this error, it will just be an invalid value.",
  (string) (len=7) "\treturn",
  (string) (len=1) "}",
  (string) "",
  (string) (len=48) "// Value implements the driver Valuer interface.",
  (string) (len=53) "func (x NullColorStr) Value() (driver.Value, error) {",
  (string) (len=14) "\tif !x.Valid {",
  (string) (len=17) "\t\treturn nil, nil",
  (string) (len=2) "\t}",
  (string) (len=29) "\treturn x.Color.String(), nil",
  (string) (len=1) "}",
  (string) "",
  (string) (len=56) "// MarshalJSON correctly serializes a NullColor to JSON.",
  (string) (len=53) "func (n NullColorStr) MarshalJSON() ([]byte, error) {",
  (string) (len=23) "\tconst nullStr = \"null\"",
  (string) (len=13) "\tif n.Valid {",
  (string) (len=30) "\t\treturn json.Marshal(n.Color)",
  (string) (len=2) "\t}",
  (string) (len=28) "\treturn []byte(nullStr), nil",
  (string) (len=1) "}",
  (string) "",
  (string) (len=62) "// UnmarshalJSON correctly deserializes a NullColor from JSON.",
  (string) (len=54) "func (n *NullColorStr) UnmarshalJSON(b []byte) error {",
  (string) (len=13) "\tn.Set = true",
  (string) (len=18) "\tvar x interface{}",
  (string) (len=29) "\terr := json.Unmarshal(b, &x)",
  (string) (len=16) "\tif err != nil {",
  (string) (len=12) "\t\treturn err",
  (string) (len=2) "\t}",
  (string) (len=16) "\terr = n.Scan(x)",
  (string) (len=11) "\treturn err",
  (string) (len=1) "}",
  (string) "",
  (string) (len=7) "const (",
  (string) (len=60) "\t// Custom_prefix_Black is a ColorWithComment of type Black.",
  (string) (len=44) "\tCustom_prefix_Black ColorWithComment = iota",
  (string) (len=60) "\t// Custom_prefix_White is a ColorWithComment of type White.",
  (string) (len=20) "\tCustom_prefix_White",
  (string) (len=56) "\t// Custom_prefix_Red is a ColorWithComment of type Red.",
  (string) (len=18) "\tCustom_prefix_Red",
  (string) (len=60) "\t// Custom_prefix_Green is a ColorWithComment of type Green.",
  (string) (len=20) "\tCustom_prefix_Green",
  (string) (len=58) "\t// Custom_prefix_Blue is a ColorWithComment of type Blue.",
  (string) (len=23) "\t// Blue starts with 33",
  (string) (len=48) "\tCustom_prefix_Blue ColorWithComment = iota + 29",
  (string) (len=58) "\t// Custom_prefix_Grey is a ColorWithComment of type Grey.",
  (string) (len=19) "\tCustom_prefix_Grey",
  (string) (len=62) "\t// Custom_prefix_Yellow is a ColorWithComment of type Yellow.",
  (string) (len=21) "\tCustom_prefix_Yellow",
  (string) (len=1) ")",
  (string) "",
  (string) (len=64) "const _ColorWithCommentName = \"BlackWhiteRedGreenBluegreyyellow\"",
  (string) "",
  (string) (len=55) "var _ColorWithCommentMap = map[ColorWithComment]string{",
  (string) (len=50) "\tCustom_prefix_Black:  _ColorWithCommentName[0:5],",
  (string) (len=51) "\tCustom_prefix_White:  _ColorWithCommentName[5:10],",
  (string) (len=52) "\tCustom_prefix_Red:    _ColorWithCommentName[10:13],",
  (string) (len=52) "\tCustom_prefix_Green:  _ColorWithCommentName[13:18],",
  (string) (len=52) "\tCustom_prefix_Blue:   _ColorWithCommentName[18:22],",
  (string) (len=52) "\tCustom_prefix_Grey:   _ColorWithCommentName[22:26],",
  (string) (len=52) "\tCustom_prefix_Yellow: _ColorWithCommentName[26:32],",
  (string) (len=1) "}",
  (string) "",
  (string) (len=44) "// String implements the Stringer interface.",
  (string) (len=43) "func (x ColorWithComment) String() string {",
  (string) (len=44) "\tif str, ok := _ColorWithCommentMap[x]; ok {",
  (string) (len=12) "\t\treturn str",
  (string) (len=2) "\t}",
  (string) (len=46) "\treturn fmt.Sprintf(\"ColorWithComment(%d)\", x)",
  (string) (len=1) "}",
  (string) "",
  (string) (len=57) "var _ColorWithCommentValue = map[string]ColorWithComment{",
  (string) (len=68) "\t_ColorWithCommentName[0:5]:                    Custom_prefix_Black,",
  (string) (len=68) "\tstrings.ToLower(_ColorWithCommentName[0:5]):   Custom_prefix_Black,",
  (string) (len=68) "\t_ColorWithCommentName[5:10]:                   Custom_prefix_White,",
  (string) (len=68) "\tstrings.ToLower(_ColorWithCommentName[5:10]):  Custom_prefix_White,",
  (string) (len=66) "\t_ColorWithCommentName[10:13]:                  Custom_prefix_Red,",
  (string) (len=66) "\tstrings.ToLower(_ColorWithCommentName[10:13]): Custom_prefix_Red,",
  (string) (len=68) "\t_ColorWithCommentName[13:18]:                  Custom_prefix_Green,",
  (string) (len=68) "\tstrings.ToLower(_ColorWithCommentName[13:18]): Custom_prefix_Green,",
  (string) (len=67) "\t_ColorWithCommentName[18:22]:                  Custom_prefix_Blue,",
  (string) (len=67) "\tstrings.ToLower(_ColorWithCommentName[18:22]): Custom_prefix_Blue,",
  (string) (len=67) "\t_ColorWithCommentName[22:26]:                  Custom_prefix_Grey,",
  (string) (len=67) "\tstrings.ToLower(_ColorWithCommentName[22:26]): Custom_prefix_Grey,",
  (string) (len=69) "\t_ColorWithCommentName[26:32]:                  Custom_prefix_Yellow,",
  (string) (len=69) "\tstrings.ToLower(_ColorWithCommentName[26:32]): Custom_prefix_Yellow,",
  (string) (len=1) "}",
  (string) "",
  (string) (len=75) "// ParseColorWithComment attempts to convert a string to a ColorWithComment",
  (string) (len=67) "func ParseColorWithComment(name string) (ColorWithComment, error) {",
  (string) (len=47) "\tif x, ok := _ColorWithCommentValue[name]; ok {",
  (string) (len=15) "\t\treturn x, nil",
  (string) (len=2) "\t}",
  (string) (len=83) "\treturn ColorWithComment(0), fmt.Errorf(\"%s is not a valid ColorWithComment\", name)",
  (string) (len=1) "}",
  (string) "",
  (string) (len=51) "func (x ColorWithComment) Ptr() *ColorWithComment {",
  (string) (len=10) "\treturn &x",
  (string) (len=1) "}",
  (string) "",
  (string) (len=52) "// MarshalText implements the text marshaller method",
  (string) (len=57) "func (x ColorWithComment) MarshalText() ([]byte, error) {",
  (string) (len=31) "\treturn []byte(x.String()), nil",
  (string) (len=1) "}",
  (string) "",
  (string) (len=56) "// UnmarshalText implements the text unmarshaller method",
  (string) (len=61) "func (x *ColorWithComment) UnmarshalText(text []byte) error {",
  (string) (len=21) "\tname := string(text)",
  (string) (len=40) "\ttmp, err := ParseColorWithComment(name)",
  (string) (len=16) "\tif err != nil {",
  (string) (len=12) "\t\treturn err",
  (string) (len=2) "\t}",
  (string) (len=9) "\t*x = tmp",
  (string) (len=11) "\treturn nil",
  (string) (len=1) "}",
  (string) "",
  (string) (len=103) "var _ColorWithCommentErrNilPtr = errors.New(\"value pointer is nil\") // one per type for package clashes",
  (string) "",
  (string) (len=41) "// Scan implements the Scanner interface.",
  (string) (len=64) "func (x *ColorWithComment) Scan(value interface{}) (err error) {",
  (string) (len=18) "\tif value == nil {",
  (string) (len=26) "\t\t*x = ColorWithComment(0)",
  (string) (len=8) "\t\treturn",
  (string) (len=2) "\t}",
  (string) "",
  (string) (len=37) "\t// A wider range of scannable types.",
  (string) (len=61) "\t// driver.Value values at the top of the list for expediency",
  (string) (len=27) "\tswitch v := value.(type) {",
  (string) (len=12) "\tcase int64:",
  (string) (len=26) "\t\t*x = ColorWithComment(v)",
  (string) (len=13) "\tcase string:",
  (string) (len=36) "\t\t*x, err = ParseColorWithComment(v)",
  (string) (len=17) "\t\tif err != nil {",
  (string) (len=47) "\t\t\t// try parsing the integer value as a string",
  (string) (len=49) "\t\t\tif val, verr := strconv.Atoi(v); verr == nil {",
  (string) (len=40) "\t\t\t\t*x, err = ColorWithComment(val), nil",
  (string) (len=4) "\t\t\t}",
  (string) (len=3) "\t\t}",
  (string) (len=13) "\tcase []byte:",
  (string) (len=44) "\t\t*x, err = ParseColorWithComment(string(v))",
  (string) (len=17) "\t\tif err != nil {",
  (string) (len=47) "\t\t\t// try parsing the integer value as a string",
  (string) (len=57) "\t\t\tif val, verr := strconv.Atoi(string(v)); verr == nil {",
  (string) (len=40) "\t\t\t\t*x, err = ColorWithComment(val), nil",
  (string) (len=4) "\t\t\t}",
  (string) (len=3) "\t\t}",
  (string) (len=23) "\tcase ColorWithComment:",
  (string) (len=8) "\t\t*x = v",
  (string) (len=10) "\tcase int:",
  (string) (len=26) "\t\t*x = ColorWithComment(v)",
  (string) (len=24) "\tcase *ColorWithComment:",
  (string) (len=15) "\t\tif v == nil {",
  (string) (len=36) "\t\t\treturn _ColorWithCommentErrNilPtr",
  (string) (len=3) "\t\t}",
  (string) (len=9) "\t\t*x = *v",
  (string) (len=11) "\tcase uint:",
  (string) (len=26) "\t\t*x = ColorWithComment(v)",
  (string) (len=13) "\tcase uint64:",
  (string) (len=26) "\t\t*x = ColorWithComment(v)",
  (string) (len=11) "\tcase *int:",
  (string) (len=15) "\t\tif v == nil {",
  (string) (len=36) "\t\t\treturn _ColorWithCommentErrNilPtr",
  (string) (len=3) "\t\t}",
  (string) (len=27) "\t\t*x = ColorWithComment(*v)",
  (string) (len=13) "\tcase *int64:",
  (string) (len=15) "\t\tif v == nil {",
  (string) (len=36) "\t\t\treturn _ColorWithCommentErrNilPtr",
  (string) (len=3) "\t\t}",
  (string) (len=27) "\t\t*x = ColorWithComment(*v)",
  (string) (len=72) "\tcase float64: // json marshals everything as a float64 if it's a number",
  (string) (len=26) "\t\t*x = ColorWithComment(v)",
  (string) (len=73) "\tcase *float64: // json marshals everything as a float64 if it's a number",
  (string) (len=15) "\t\tif v == nil {",
  (string) (len=36) "\t\t\treturn _ColorWithCommentErrNilPtr",
  (string) (len=3) "\t\t}",
  (string) (len=27) "\t\t*x = ColorWithComment(*v)",
  (string) (len=12) "\tcase *uint:",
  (string) (len=15) "\t\tif v == nil {",
  (string) (len=36) "\t\t\treturn _ColorWithCommentErrNilPtr",
  (string) (len=3) "\t\t}",
  (string) (len=27) "\t\t*x = ColorWithComment(*v)",
  (string) (len=14) "\tcase *uint64:",
  (string) (len=15) "\t\tif v == nil {",
  (string) (len=36) "\t\t\treturn _ColorWithCommentErrNilPtr",
  (string) (len=3) "\t\t}",
  (string) (len=27) "\t\t*x = ColorWithComment(*v)",
  (string) (len=14) "\tcase *string:",
  (string) (len=15) "\t\tif v == nil {",
  (string) (len=36) "\t\t\treturn _ColorWithCommentErrNilPtr",
  (string) (len=3) "\t\t}",
  (string) (len=37) "\t\t*x, err = ParseColorWithComment(*v)",
  (string) (len=17) "\t\tif err != nil {",
  (string) (len=47) "\t\t\t// try parsing the integer value as a string",
  (string) (len=50) "\t\t\tif val, verr := strconv.Atoi(*v); verr == nil {",
  (string) (len=40) "\t\t\t\t*x, err = ColorWithComment(val), nil",
  (string) (len=4) "\t\t\t}",
  (string) (len=3) "\t\t}",
  (string) (len=2) "\t}",
  (string) "",
  (string) (len=7) "\treturn",
  (string) (len=1) "}",
  (string) "",
  (string) (len=48) "// Value implements the driver Valuer interface.",
  (string) (len=57) "func (x ColorWithComment) Value() (driver.Value, error) {",
  (string) (len=23) "\treturn x.String(), nil",
  (string) (len=1) "}",
  (string) "",
  (string) (len=55) "// Set implements the Golang flag.Value interface func.",
  (string) (len=50) "func (x *ColorWithComment) Set(val string) error {",
  (string) (len=37) "\tv, err := ParseColorWithComment(val)",
  (string) (len=7) "\t*x = v",
  (string) (len=11) "\treturn err",
  (string) (len=1) "}",
  (string) "",
  (string) (len=56) "// Get implements the Golang flag.Getter interface func.",
  (string) (len=46) "func (x *ColorWithComment) Get() interface{} {",
  (string) (len=10) "\treturn *x",
  (string) (len=1) "}",
  (string) "",
  (string) (len=62) "// Type implements the github.com/spf13/pFlag Value interface.",
  (string) (len=42) "func (x *ColorWithComment) Type() string {",
  (string) (len=26) "\treturn \"ColorWithComment\"",
  (string) (len=1) "}",
  (string) "",
  (string) (len=34) "type NullColorWithComment struct {",
  (string) (len=34) "\tColorWithComment ColorWithComment",
  (string) (len=22) "\tValid            bool",
  (string) (len=22) "\tSet              bool",
  (string) (len=1) "}",
  (string) "",
  (string) (len=72) "func NewNullColorWithComment(val interface{}) (x NullColorWithComment) {",
  (string) (len=76) "\tx.Scan(val) // yes, we ignore this error, it will just be an invalid value.",
  (string) (len=7) "\treturn",
  (string) (len=1) "}",
  (string) "",
  (string) (len=41) "// Scan implements the Scanner interface.",
  (string) (len=68) "func (x *NullColorWithComment) Scan(value interface{}) (err error) {",
  (string) (len=13) "\tx.Set = true",
  (string) (len=18) "\tif value == nil {",
  (string) (len=58) "\t\tx.ColorWithComment, x.Valid = ColorWithComment(0), false",
  (string) (len=8) "\t\treturn",
  (string) (len=2) "\t}",
  (string) "",
  (string) (len=37) "\terr = x.ColorWithComment.Scan(value)",
  (string) (len=23) "\tx.Valid = (err == nil)",
  (string) (len=7) "\treturn",
  (string) (len=1) "}",
  (string) "",
  (string) (len=48) "// Value implements the driver Valuer interface.",
  (string) (len=61) "func (x NullColorWithComment) Value() (driver.Value, error) {",
  (string) (len=14) "\tif !x.Valid {",
  (string) (len=17) "\t\treturn nil, nil",
  (string) (len=2) "\t}",
  (string) (len=46) "\t// driver.Value accepts int64 for int values.",
  (string) (len=38) "\treturn int64(x.ColorWithComment), nil",
  (string) (len=1) "}",
  (string) "",
  (string) (len=67) "// MarshalJSON correctly serializes a NullColorWithComment to JSON.",
  (string) (len=61) "func (n NullColorWithComment) MarshalJSON() ([]byte, error) {",
  (string) (len=23) "\tconst nullStr = \"null\"",
  (string) (len=13) "\tif n.Valid {",
  (string) (len=41) "\t\treturn json.Marshal(n.ColorWithComment)",
  (string) (len=2) "\t}",
  (string) (len=28) "\treturn []byte(nullStr), nil",
  (string) (len=1) "}",
  (string) "",
  (string) (len=73) "// UnmarshalJSON correctly deserializes a NullColorWithComment from JSON.",
  (string) (len=62) "func (n *NullColorWithComment) UnmarshalJSON(b []byte) error {",
  (string) (len=13) "\tn.Set = true",
  (string) (len=18) "\tvar x interface{}",
  (string) (len=29) "\terr := json.Unmarshal(b, &x)",
  (string) (len=16) "\tif err != nil {",
  (string) (len=12) "\t\treturn err",
  (string) (len=2) "\t}",
  (string) (len=16) "\terr = n.Scan(x)",
  (string) (len=11) "\treturn err",
  (string) (len=1) "}",
  (string) "",
  (string) (len=37) "type NullColorWithCommentStr struct {",
  (string) (len=21) "\tNullColorWithComment",
  (string) (len=1) "}",
  (string) "",
  (string) (len=78) "func NewNullColorWithCommentStr(val interface{}) (x NullColorWithCommentStr) {",
  (string) (len=76) "\tx.Scan(val) // yes, we ignore this error, it will just be an invalid value.",
  (string) (len=7) "\treturn",
  (string) (len=1) "}",
  (string) "",
  (string) (len=48) "// Value implements the driver Valuer interface.",
  (string) (len=64) "func (x NullColorWithCommentStr) Value() (driver.Value, error) {",
  (string) (len=14) "\tif !x.Valid {",
  (string) (len=17) "\t\treturn nil, nil",
  (string) (len=2) "\t}",
  (string) (len=40) "\treturn x.ColorWithComment.String(), nil",
  (string) (len=1) "}",
  (string) "",
  (string) (len=67) "// MarshalJSON correctly serializes a NullColorWithComment to JSON.",
  (string) (len=64) "func (n NullColorWithCommentStr) MarshalJSON() ([]byte, error) {",
  (string) (len=23) "\tconst nullStr = \"null\"",
  (string) (len=13) "\tif n.Valid {",
  (string) (len=41) "\t\treturn json.Marshal(n.ColorWithComment)",
  (string) (len=2) "\t}",
  (string) (len=28) "\treturn []byte(nullStr), nil",
  (string) (len=1) "}",
  (string) "",
  (string) (len=73) "// UnmarshalJSON correctly deserializes a NullColorWithComment from JSON.",
  (string) (len=65) "func (n *NullColorWithCommentStr) UnmarshalJSON(b []byte) error {",
  (string) (len=13) "\tn.Set = true",
  (string) (len=18) "\tvar x interface{}",
  (string) (len=29) "\terr := json.Unmarshal(b, &x)",
  (string) (len=16) "\tif err != nil {",
  (string) (len=12) "\t\treturn err",
  (string) (len=2) "\t}",
  (string) (len=16) "\terr = n.Scan(x)",
  (string) (len=11) "\treturn err",
  (string) (len=1) "}",
  (string) "",
  (string) (len=7) "const (",
  (string) (len=61) "\t// Custom_prefix_Black is a ColorWithComment2 of type Black.",
  (string) (len=45) "\tCustom_prefix_Black ColorWithComment2 = iota",
  (string) (len=61) "\t// Custom_prefix_White is a ColorWithComment2 of type White.",
  (string) (len=20) "\tCustom_prefix_White",
  (string) (len=57) "\t// Custom_prefix_Red is a ColorWithComment2 of type Red.",
  (string) (len=18) "\tCustom_prefix_Red",
  (string) (len=61) "\t// Custom_prefix_Green is a ColorWithComment2 of type Green.",
  (string) (len=20) "\tCustom_prefix_Green",
  (string) (len=59) "\t// Custom_prefix_Blue is a ColorWithComment2 of type Blue.",
  (string) (len=23) "\t// Blue starts with 33",
  (string) (len=49) "\tCustom_prefix_Blue ColorWithComment2 = iota + 29",
  (string) (len=59) "\t// Custom_prefix_Grey is a ColorWithComment2 of type Grey.",
  (string) (len=19) "\tCustom_prefix_Grey",
  (string) (len=63) "\t// Custom_prefix_Yellow is a ColorWithComment2 of type Yellow.",
  (string) (len=21) "\tCustom_prefix_Yellow",
  (string) (len=1) ")",
  (string) "",
  (string) (len=65) "const _ColorWithComment2Name = \"BlackWhiteRedGreenBluegreyyellow\"",
  (string) "",
  (string) (len=57) "var _ColorWithComment2Map = map[ColorWithComment2]string{",
  (string) (len=51) "\tCustom_prefix_Black:  _ColorWithComment2Name[0:5],",
  (string) (len=52) "\tCustom_prefix_White:  _ColorWithComment2Name[5:10],",
  (string) (len=53) "\tCustom_prefix_Red:    _ColorWithComment2Name[10:13],",
  (string) (len=53) "\tCustom_prefix_Green:  _ColorWithComment2Name[13:18],",
  (string) (len=53) "\tCustom_prefix_Blue:   _ColorWithComment2Name[18:22],",
  (string) (len=53) "\tCustom_prefix_Grey:   _ColorWithComment2Name[22:26],",
  (string) (len=53) "\tCustom_prefix_Yellow: _ColorWithComment2Name[26:32],",
  (string) (len=1) "}",
  (string) "",
  (string) (len=44) "// String implements the Stringer interface.",
  (string) (len=44) "func (x ColorWithComment2) String() string {",
  (string) (len=45) "\tif str, ok := _ColorWithComment2Map[x]; ok {",
  (string) (len=12) "\t\treturn str",
  (string) (len=2) "\t}",
  (string) (len=47) "\treturn fmt.Sprintf(\"ColorWithComment2(%d)\", x)",
  (string) (len=1) "}",
  (string) "",
  (string) (len=59) "var _ColorWithComment2Value = map[string]ColorWithComment2{",
  (string) (len=69) "\t_ColorWithComment2Name[0:5]:                    Custom_prefix_Black,",
  (string) (len=69) "\tstrings.ToLower(_ColorWithComment2Name[0:5]):   Custom_prefix_Black,",
  (string) (len=69) "\t_ColorWithComment2Name[5:10]:                   Custom_prefix_White,",
  (string) (len=69) "\tstrings.ToLower(_ColorWithComment2Name[5:10]):  Custom_prefix_White,",
  (string) (len=67) "\t_ColorWithComment2Name[10:13]:                  Custom_prefix_Red,",
  (string) (len=67) "\tstrings.ToLower(_ColorWithComment2Name[10:13]): Custom_prefix_Red,",
  (string) (len=69) "\t_ColorWithComment2Name[13:18]:                  Custom_prefix_Green,",
  (string) (len=69) "\tstrings.ToLower(_ColorWithComment2Name[13:18]): Custom_prefix_Green,",
  (string) (len=68) "\t_ColorWithComment2Name[18:22]:                  Custom_prefix_Blue,",
  (string) (len=68) "\tstrings.ToLower(_ColorWithComment2Name[18:22]): Custom_prefix_Blue,",
  (string) (len=68) "\t_ColorWithComment2Name[22:26]:                  Custom_prefix_Grey,",
  (string) (len=68) "\tstrings.ToLower(_ColorWithComment2Name[22:26]): Custom_prefix_Grey,",
  (string) (len=70) "\t_ColorWithComment2Name[26:32]:                  Custom_prefix_Yellow,",
  (string) (len=70) "\tstrings.ToLower(_ColorWithComment2Name[26:32]): Custom_prefix_Yellow,",
  (string) (len=1) "}",
  (string) "",
  (string) (len=77) "// ParseColorWithComment2 attempts to convert a string to a ColorWithComment2",
  (string) (len=69) "func ParseColorWithComment2(name string) (ColorWithComment2, error) {",
  (string) (len=48) "\tif x, ok := _ColorWithComment2Value[name]; ok {",
  (string) (len=15) "\t\treturn x, nil",
  (string) (len=2) "\t}",
  (string) (len=85) "\treturn ColorWithComment2(0), fmt.Errorf(\"%s is not a valid ColorWithComment2\", name)",
  (string) (len=1) "}",
  (string) "",
  (string) (len=53) "func (x ColorWithComment2) Ptr() *ColorWithComment2 {",
  (string) (len=10) "\treturn &x",
  (string) (len=1) "}",
  (string) "",
  (string) (len=52) "// MarshalText implements the text marshaller method",
  (string) (len=58) "func (x ColorWithComment2) MarshalText() ([]byte, error) {",
  (string) (len=31) "\treturn []byte(x.String()), nil",
  (string) (len=1) "}",
  (string) "",
  (string) (len=56) "// UnmarshalText implements the text unmarshaller method",
  (string) (len=62) "func (x *ColorWithComment2) UnmarshalText(text []byte) error {",
  (string) (len=21) "\tname := string(text)",
  (string) (len=41) "\ttmp, err := ParseColorWithComment2(name)",
  (string) (len=16) "\tif err != nil {",
  (string) (len=12) "\t\treturn err",
  (string) (len=2) "\t}",
  (string) (len=9) "\t*x = tmp",
  (string) (len=11) "\treturn nil",
  (string) (len=1) "}",
  (string) "",
  (string) (len=104) "var _ColorWithComment2ErrNilPtr = errors.New(\"value pointer is nil\") // one per type for package clashes",
  (string) "",
  (string) (len=41) "// Scan implements the Scanner interface.",
  (string) (len=65) "func (x *ColorWithComment2) Scan(value interface{}) (err error) {",
  (string) (len=18) "\tif value == nil {",
  (string) (len=27) "\t\t*x = ColorWithComment2(0)",
  (string) (len=8) "\t\treturn",
  (string) (len=2) "\t}",
  (string) "",
  (string) (len=37) "\t// A wider range of scannable types.",
  (string) (len=61) "\t// driver.Value values at the top of the list for expediency",
  (string) (len=27) "\tswitch v := value.(type) {",
  (string) (len=12) "\tcase int64:",
  (string) (len=27) "\t\t*x = ColorWithComment2(v)",
  (string) (len=13) "\tcase string:",
  (string) (len=37) "\t\t*x, err = ParseColorWithComment2(v)",
  (string) (len=17) "\t\tif err != nil {",
  (string) (len=47) "\t\t\t// try parsing the integer value as a string",
  (string) (len=49) "\t\t\tif val, verr := strconv.Atoi(v); verr == nil {",
  (string) (len=41) "\t\t\t\t*x, err = ColorWithComment2(val), nil",
  (string) (len=4) "\t\t\t}",
  (string) (len=3) "\t\t}",
  (string) (len=13) "\tcase []byte:",
  (string) (len=45) "\t\t*x, err = ParseColorWithComment2(string(v))",
  (string) (len=17) "\t\tif err != nil {",
  (string) (len=47) "\t\t\t// try parsing the integer value as a string",
  (string) (len=57) "\t\t\tif val, verr := strconv.Atoi(string(v)); verr == nil {",
  (string) (len=41) "\t\t\t\t*x, err = ColorWithComment2(val), nil",
  (string) (len=4) "\t\t\t}",
  (string) (len=3) "\t\t}",
  (string) (len=24) "\tcase ColorWithComment2:",
  (string) (len=8) "\t\t*x = v",
  (string) (len=10) "\tcase int:",
  (string) (len=27) "\t\t*x = ColorWithComment2(v)",
  (string) (len=25) "\tcase *ColorWithComment2:",
  (string) (len=15) "\t\tif v == nil {",
  (string) (len=37) "\t\t\treturn _ColorWithComment2ErrNilPtr",
  (string) (len=3) "\t\t}",
  (string) (len=9) "\t\t*x = *v",
  (string) (len=11) "\tcase uint:",
  (string) (len=27) "\t\t*x = ColorWithComment2(v)",
  (string) (len=13) "\tcase uint64:",
  (string) (len=27) "\t\t*x = ColorWithComment2(v)",
  (string) (len=11) "\tcase *int:",
  (string) (len=15) "\t\tif v == nil {",
  (string) (len=37) "\t\t\treturn _ColorWithComment2ErrNilPtr",
  (string) (len=3) "\t\t}",
  (string) (len=28) "\t\t*x = ColorWithComment2(*v)",
  (string) (len=13) "\tcase *int64:",
  (string) (len=15) "\t\tif v == nil {",
  (string) (len=37) "\t\t\treturn _ColorWithComment2ErrNilPtr",
  (string) (len=3) "\t\t}",
  (string) (len=28) "\t\t*x = ColorWithComment2(*v)",
  (string) (len=72) "\tcase float64: // json marshals everything as a float64 if it's a number",
  (string) (len=27) "\t\t*x = ColorWithComment2(v)",
  (string) (len=73) "\tcase *float64: // json marshals everything as a float64 if it's a number",
  (string) (len=15) "\t\tif v == nil {",
  (string) (len=37) "\t\t\treturn _ColorWithComment2ErrNilPtr",
  (string) (len=3) "\t\t}",
  (string) (len=28) "\t\t*x = ColorWithComment2(*v)",
  (string) (len=12) "\tcase *uint:",
  (string) (len=15) "\t\tif v == nil {",
  (string) (len=37) "\t\t\treturn _ColorWithComment2ErrNilPtr",
  (string) (len=3) "\t\t}",
  (string) (len=28) "\t\t*x = ColorWithComment2(*v)",
  (string) (len=14) "\tcase *uint64:",
  (string) (len=15) "\t\tif v == nil {",
  (string) (len=37) "\t\t\treturn _ColorWithComment2ErrNilPtr",
  (string) (len=3) "\t\t}",
  (string) (len=28) "\t\t*x = ColorWithComment2(*v)",
  (string) (len=14) "\tcase *string:",
  (string) (len=15) "\t\tif v == nil {",
  (string) (len=37) "\t\t\treturn _ColorWithComment2ErrNilPtr",
  (string) (len=3) "\t\t}",
  (string) (len=38) "\t\t*x, err = ParseColorWithComment2(*v)",
  (string) (len=17) "\t\tif err != nil {",
  (string) (len=47) "\t\t\t// try parsing the integer value as a string",
  (string) (len=50) "\t\t\tif val, verr := strconv.Atoi(*v); verr == nil {",
  (string) (len=41) "\t\t\t\t*x, err = ColorWithComment2(val), nil",
  (string) (len=4) "\t\t\t}",
  (string) (len=3) "\t\t}",
  (string) (len=2) "\t}",
  (string) "",
  (string) (len=7) "\treturn",
  (string) (len=1) "}",
  (string) "",
  (string) (len=48) "// Value implements the driver Valuer interface.",
  (string) (len=58) "func (x ColorWithComment2) Value() (driver.Value, error) {",
  (string) (len=23) "\treturn x.String(), nil",
  (string) (len=1) "}",
  (string) "",
  (string) (len=55) "// Set implements the Golang flag.Value interface func.",
  (string) (len=51) "func (x *ColorWithComment2) Set(val string) error {",
  (string) (len=38) "\tv, err := ParseColorWithComment2(val)",
  (string) (len=7) "\t*x = v",
  (string) (len=11) "\treturn err",
  (string) (len=1) "}",
  (string) "",
  (string) (len=56) "// Get implements the Golang flag.Getter interface func.",
  (string) (len=47) "func (x *ColorWithComment2) Get() interface{} {",
  (string) (len=10) "\treturn *x",
  (string) (len=1) "}",
  (string) "",
  (string) (len=62) "// Type implements the github.com/spf13/pFlag Value interface.",
  (string) (len=43) "func (x *ColorWithComment2) Type() string {",
  (string) (len=27) "\treturn \"ColorWithComment2\"",
  (string) (len=1) "}",
  (string) "",
  (string) (len=35) "type NullColorWithComment2 struct {",
  (string) (len=36) "\tColorWithComment2 ColorWithComment2",
  (string) (len=23) "\tValid             bool",
  (string) (len=23) "\tSet               bool",
  (string) (len=1) "}",
  (string) "",
  (string) (len=74) "func NewNullColorWithComment2(val interface{}) (x NullColorWithComment2) {",
  (string) (len=76) "\tx.Scan(val) // yes, we ignore this error, it will just be an invalid value.",
  (string) (len=7) "\treturn",
  (string) (len=1) "}",
  (string) "",
  (string) (len=41) "// Scan implements the Scanner interface.",
  (string) (len=69) "func (x *NullColorWithComment2) Scan(value interface{}) (err error) {",
  (string) (len=13) "\tx.Set = true",
  (string) (len=18) "\tif value == nil {",
  (string) (len=60) "\t\tx.ColorWithComment2, x.Valid = ColorWithComment2(0), false",
  (string) (len=8) "\t\treturn",
  (string) (len=2) "\t}",
  (string) "",
  (string) (len=38) "\terr = x.ColorWithComment2.Scan(value)",
  (string) (len=23) "\tx.Valid = (err == nil)",
  (string) (len=7) "\treturn",
  (string) (len=1) "}",
  (string) "",
  (string) (len=48) "// Value implements the driver Valuer interface.",
  (string) (len=62) "func (x NullColorWithComment2) Value() (driver.Value, error) {",
  (string) (len=14) "\tif !x.Valid {",
  (string) (len=17) "\t\treturn nil, nil",
  (string) (len=2) "\t}",
  (string) (len=46) "\t// driver.Value accepts int64 for int values.",
  (string) (len=39) "\treturn int64(x.ColorWithComment2), nil",
  (string) (len=1) "}",
  (string) "",
  (string) (len=68) "// MarshalJSON correctly serializes a NullColorWithComment2 to JSON.",
  (string) (len=62) "func (n NullColorWithComment2) MarshalJSON() ([]byte, error) {",
  (string) (len=23) "\tconst nullStr = \"null\"",
  (string) (len=13) "\tif n.Valid {",
  (string) (len=42) "\t\treturn json.Marshal(n.ColorWithComment2)",
  (string) (len=2) "\t}",
  (string) (len=28) "\treturn []byte(nullStr), nil",
  (string) (len=1) "}",
  (string) "",
  (string) (len=74) "// UnmarshalJSON correctly deserializes a NullColorWithComment2 from JSON.",
  (string) (len=63) "func (n *NullColorWithComment2) UnmarshalJSON(b []byte) error {",
  (string) (len=13) "\tn.Set = true",
  (string) (len=18) "\tvar x interface{}",
  (string) (len=29) "\terr := json.Unmarshal(b, &x)",
  (string) (len=16) "\tif err != nil {",
  (string) (len=12) "\t\treturn err",
  (string) (len=2) "\t}",
  (string) (len=16) "\terr = n.Scan(x)",
  (string) (len=11) "\treturn err",
  (string) (len=1) "}",
  (string) "",
  (string) (len=38) "type NullColorWithComment2Str struct {",
  (string) (len=22) "\tNullColorWithComment2",
  (string) (len=1) "}",
  (string) "",
  (string) (len=80) "func NewNullColorWithComment2Str(val interface{}) (x NullColorWithComment2Str) {",
  (string) (len=76) "\tx.Scan(val) // yes, we ignore this error, it will just be an invalid value.",
  (string) (len=7) "\treturn",
  (string) (len=1) "}",
  (string) "",
  (string) (len=48) "// Value implements the driver Valuer interface.",
  (string) (len=65) "func (x NullColorWithComment2Str) Value() (driver.Value, error) {",
  (string) (len=14) "\tif !x.Valid {",
  (string) (len=17) "\t\treturn nil, nil",
  (string) (len=2) "\t}",
  (string) (len=41) "\treturn x.ColorWithComment2.String(), nil",
  (string) (len=1) "}",
  (string) "",
  (string) (len=68) "// MarshalJSON correctly serializes a NullColorWithComment2 to JSON.",
  (string) (len=65) "func (n NullColorWithComment2Str) MarshalJSON() ([]byte, error) {",
  (string) (len=23) "\tconst nullStr = \"null\"",
  (string) (len=13) "\tif n.Valid {",
  (string) (len=42) "\t\treturn json.Marshal(n.ColorWithComment2)",
  (string) (len=2) "\t}",
  (string) (len=28) "\treturn []byte(nullStr), nil",
  (string) (len=1) "}",
  (string) "",
  (string) (len=74) "// UnmarshalJSON correctly deserializes a NullColorWithComment2 from JSON.",
  (string) (len=66) "func (n *NullColorWithComment2Str) UnmarshalJSON(b []byte) error {",
  (string) (len=13) "\tn.Set = true",
  (string) (len=18) "\tvar x interface{}",
  (string) (len=29) "\terr := json.Unmarshal(b, &x)",
  (string) (len=16) "\tif err != nil {",
  (string) (len=12) "\t\treturn err",
  (string) (len=2) "\t}",
  (string) (len=16) "\terr = n.Scan(x)",
  (string) (len=11) "\treturn err",
  (string) (len=1) "}",
  (string) "",
  (string) (len=7) "const (",
  (string) (len=61) "\t// Custom_prefix_Black is a ColorWithComment3 of type Black.",
  (string) (len=45) "\tCustom_prefix_Black ColorWithComment3 = iota",
  (string) (len=61) "\t// Custom_prefix_White is a ColorWithComment3 of type White.",
  (string) (len=20) "\tCustom_prefix_White",
  (string) (len=57) "\t// Custom_prefix_Red is a ColorWithComment3 of type Red.",
  (string) (len=18) "\tCustom_prefix_Red",
  (string) (len=61) "\t// Custom_prefix_Green is a ColorWithComment3 of type Green.",
  (string) (len=24) "\t// Green starts with 33",
  (string) (len=50) "\tCustom_prefix_Green ColorWithComment3 = iota + 30",
  (string) (len=59) "\t// Custom_prefix_Blue is a ColorWithComment3 of type Blue.",
  (string) (len=19) "\tCustom_prefix_Blue",
  (string) (len=59) "\t// Custom_prefix_Grey is a ColorWithComment3 of type Grey.",
  (string) (len=19) "\tCustom_prefix_Grey",
  (string) (len=63) "\t// Custom_prefix_Yellow is a ColorWithComment3 of type Yellow.",
  (string) (len=21) "\tCustom_prefix_Yellow",
  (string) (len=70) "\t// Custom_prefix_BlueGreen is a ColorWithComment3 of type Blue-Green.",
  (string) (len=22) "\t// blue-green comment",
  (string) (len=24) "\tCustom_prefix_BlueGreen",
  (string) (len=70) "\t// Custom_prefix_RedOrange is a ColorWithComment3 of type Red-Orange.",
  (string) (len=24) "\tCustom_prefix_RedOrange",
  (string) (len=79) "\t// Custom_prefix_RedOrangeBlue is a ColorWithComment3 of type Red-Orange-Blue.",
  (string) (len=28) "\tCustom_prefix_RedOrangeBlue",
  (string) (len=1) ")",
  (string) "",
  (string) (len=100) "const _ColorWithComment3Name = \"BlackWhiteRedGreenBluegreyyellowblue-greenred-orangered-orange-blue\"",
  (string) "",
  (string) (len=57) "var _ColorWithComment3Map = map[ColorWithComment3]string{",
  (string) (len=58) "\tCustom_prefix_Black:         _ColorWithComment3Name[0:5],",
  (string) (len=59) "\tCustom_prefix_White:         _ColorWithComment3Name[5:10],",
  (string) (len=60) "\tCustom_prefix_Red:           _ColorWithComment3Name[10:13],",
  (string) (len=60) "\tCustom_prefix_Green:         _ColorWithComment3Name[13:18],",
  (string) (len=60) "\tCustom_prefix_Blue:          _ColorWithComment3Name[18:22],",
  (string) (len=60) "\tCustom_prefix_Grey:          _ColorWithComment3Name[22:26],",
  (string) (len=60) "\tCustom_prefix_Yellow:        _ColorWithComment3Name[26:32],",
  (string) (len=60) "\tCustom_prefix_BlueGreen:     _ColorWithComment3Name[32:42],",
  (string) (len=60) "\tCustom_prefix_RedOrange:     _ColorWithComment3Name[42:52],",
  (string) (len=60) "\tCustom_prefix_RedOrangeBlue: _ColorWithComment3Name[52:67],",
  (string) (len=1) "}",
  (string) "",
  (string) (len=44) "// String implements the Stringer interface.",
  (string) (len=44) "func (x ColorWithComment3) String() string {",
  (string) (len=45) "\tif str, ok := _ColorWithComment3Map[x]; ok {",
  (string) (len=12) "\t\treturn str",
  (string) (len=2) "\t}",
  (string) (len=47) "\treturn fmt.Sprintf(\"ColorWithComment3(%d)\", x)",
  (string) (len=1) "}",
  (string) "",
  (string) (len=59) "var _ColorWithComment3Value = map[string]ColorWithComment3{",
  (string) (len=69) "\t_ColorWithComment3Name[0:5]:                    Custom_prefix_Black,",
  (string) (len=69) "\tstrings.ToLower(_ColorWithComment3Name[0:5]):   Custom_prefix_Black,",
  (string) (len=69) "\t_ColorWithComment3Name[5:10]:                   Custom_prefix_White,",
  (string) (len=69) "\tstrings.ToLower(_ColorWithComment3Name[5:10]):  Custom_prefix_White,",
  (string) (len=67) "\t_ColorWithComment3Name[10:13]:                  Custom_prefix_Red,",
  (string) (len=67) "\tstrings.ToLower(_ColorWithComment3Name[10:13]): Custom_prefix_Red,",
  (string) (len=69) "\t_ColorWithComment3Name[13:18]:                  Custom_prefix_Green,",
  (string) (len=69) "\tstrings.ToLower(_ColorWithComment3Name[13:18]): Custom_prefix_Green,",
  (string) (len=68) "\t_ColorWithComment3Name[18:22]:                  Custom_prefix_Blue,",
  (string) (len=68) "\tstrings.ToLower(_ColorWithComment3Name[18:22]): Custom_prefix_Blue,",
  (string) (len=68) "\t_ColorWithComment3Name[22:26]:                  Custom_prefix_Grey,",
  (string) (len=68) "\tstrings.ToLower(_ColorWithComment3Name[22:26]): Custom_prefix_Grey,",
  (string) (len=70) "\t_ColorWithComment3Name[26:32]:                  Custom_prefix_Yellow,",
  (string) (len=70) "\tstrings.ToLower(_ColorWithComment3Name[26:32]): Custom_prefix_Yellow,",
  (string) (len=73) "\t_ColorWithComment3Name[32:42]:                  Custom_prefix_BlueGreen,",
  (string) (len=73) "\tstrings.ToLower(_ColorWithComment3Name[32:42]): Custom_prefix_BlueGreen,",
  (string) (len=73) "\t_ColorWithComment3Name[42:52]:                  Custom_prefix_RedOrange,",
  (string) (len=73) "\tstrings.ToLower(_ColorWithComment3Name[42:52]): Custom_prefix_RedOrange,",
  (string) (len=77) "\t_ColorWithComment3Name[52:67]:                  Custom_prefix_RedOrangeBlue,",
  (string) (len=77) "\tstrings.ToLower(_ColorWithComment3Name[52:67]): Custom_prefix_RedOrangeBlue,",
  (string) (len=1) "}",
  (string) "",
  (string) (len=77) "// ParseColorWithComment3 attempts to convert a string to a ColorWithComment3",
  (string) (len=69) "func ParseColorWithComment3(name string) (ColorWithComment3, error) {",
  (string) (len=48) "\tif x, ok := _ColorWithComment3Value[name]; ok {",
  (string) (len=15) "\t\treturn x, nil",
  (string) (len=2) "\t}",
  (string) (len=85) "\treturn ColorWithComment3(0), fmt.Errorf(\"%s is not a valid ColorWithComment3\", name)",
  (string) (len=1) "}",
  (string) "",
  (string) (len=53) "func (x ColorWithComment3) Ptr() *ColorWithComment3 {",
  (string) (len=10) "\treturn &x",
  (string) (len=1) "}",
  (string) "",
  (string) (len=52) "// MarshalText implements the text marshaller method",
  (string) (len=58) "func (x ColorWithComment3) MarshalText() ([]byte, error) {",
  (string) (len=31) "\treturn []byte(x.String()), nil",
  (string) (len=1) "}",
  (string) "",
  (string) (len=56) "// UnmarshalText implements the text unmarshaller method",
  (string) (len=62) "func (x *ColorWithComment3) UnmarshalText(text []byte) error {",
  (string) (len=21) "\tname := string(text)",
  (string) (len=41) "\ttmp, err := ParseColorWithComment3(name)",
  (string) (len=16) "\tif err != nil {",
  (string) (len=12) "\t\treturn err",
  (string) (len=2) "\t}",
  (string) (len=9) "\t*x = tmp",
  (string) (len=11) "\treturn nil",
  (string) (len=1) "}",
  (string) "",
  (string) (len=104) "var _ColorWithComment3ErrNilPtr = errors.New(\"value pointer is nil\") // one per type for package clashes",
  (string) "",
  (string) (len=41) "// Scan implements the Scanner interface.",
  (string) (len=65) "func (x *ColorWithComment3) Scan(value interface{}) (err error) {",
  (string) (len=18) "\tif value == nil {",
  (string) (len=27) "\t\t*x = ColorWithComment3(0)",
  (string) (len=8) "\t\treturn",
  (string) (len=2) "\t}",
  (string) "",
  (string) (len=37) "\t// A wider range of scannable types.",
  (string) (len=61) "\t// driver.Value values at the top of the list for expediency",
  (string) (len=27) "\tswitch v := value.(type) {",
  (string) (len=12) "\tcase int64:",
  (string) (len=27) "\t\t*x = ColorWithComment3(v)",
  (string) (len=13) "\tcase string:",
  (string) (len=37) "\t\t*x, err = ParseColorWithComment3(v)",
  (string) (len=17) "\t\tif err != nil {",
  (string) (len=47) "\t\t\t// try parsing the integer value as a string",
  (string) (len=49) "\t\t\tif val, verr := strconv.Atoi(v); verr == nil {",
  (string) (len=41) "\t\t\t\t*x, err = ColorWithComment3(val), nil",
  (string) (len=4) "\t\t\t}",
  (string) (len=3) "\t\t}",
  (string) (len=13) "\tcase []byte:",
  (string) (len=45) "\t\t*x, err = ParseColorWithComment3(string(v))",
  (string) (len=17) "\t\tif err != nil {",
  (string) (len=47) "\t\t\t// try parsing the integer value as a string",
  (string) (len=57) "\t\t\tif val, verr := strconv.Atoi(string(v)); verr == nil {",
  (string) (len=41) "\t\t\t\t*x, err = ColorWithComment3(val), nil",
  (string) (len=4) "\t\t\t}",
  (string) (len=3) "\t\t}",
  (string) (len=24) "\tcase ColorWithComment3:",
  (string) (len=8) "\t\t*x = v",
  (string) (len=10) "\tcase int:",
  (string) (len=27) "\t\t*x = ColorWithComment3(v)",
  (string) (len=25) "\tcase *ColorWithComment3:",
  (string) (len=15) "\t\tif v == nil {",
  (string) (len=37) "\t\t\treturn _ColorWithComment3ErrNilPtr",
  (string) (len=3) "\t\t}",
  (string) (len=9) "\t\t*x = *v",
  (string) (len=11) "\tcase uint:",
  (string) (len=27) "\t\t*x = ColorWithComment3(v)",
  (string) (len=13) "\tcase uint64:",
  (string) (len=27) "\t\t*x = ColorWithComment3(v)",
  (string) (len=11) "\tcase *int:",
  (string) (len=15) "\t\tif v == nil {",
  (string) (len=37) "\t\t\treturn _ColorWithComment3ErrNilPtr",
  (string) (len=3) "\t\t}",
  (string) (len=28) "\t\t*x = ColorWithComment3(*v)",
  (string) (len=13) "\tcase *int64:",
  (string) (len=15) "\t\tif v == nil {",
  (string) (len=37) "\t\t\treturn _ColorWithComment3ErrNilPtr",
  (string) (len=3) "\t\t}",
  (string) (len=28) "\t\t*x = ColorWithComment3(*v)",
  (string) (len=72) "\tcase float64: // json marshals everything as a float64 if it's a number",
  (string) (len=27) "\t\t*x = ColorWithComment3(v)",
  (string) (len=73) "\tcase *float64: // json marshals everything as a float64 if it's a number",
  (string) (len=15) "\t\tif v == nil {",
  (string) (len=37) "\t\t\treturn _ColorWithComment3ErrNilPtr",
  (string) (len=3) "\t\t}",
  (string) (len=28) "\t\t*x = ColorWithComment3(*v)",
  (string) (len=12) "\tcase *uint:",
  (string) (len=15) "\t\tif v == nil {",
  (string) (len=37) "\t\t\treturn _ColorWithComment3ErrNilPtr",
  (string) (len=3) "\t\t}",
  (string) (len=28) "\t\t*x = ColorWithComment3(*v)",
  (string) (len=14) "\tcase *uint64:",
  (string) (len=15) "\t\tif v == nil {",
  (string) (len=37) "\t\t\treturn _ColorWithComment3ErrNilPtr",
  (string) (len=3) "\t\t}",
  (string) (len=28) "\t\t*x = ColorWithComment3(*v)",
  (string) (len=14) "\tcase *string:",
  (string) (len=15) "\t\tif v == nil {",
  (string) (len=37) "\t\t\treturn _ColorWithComment3ErrNilPtr",
  (string) (len=3) "\t\t}",
  (string) (len=38) "\t\t*x, err = ParseColorWithComment3(*v)",
  (string) (len=17) "\t\tif err != nil {",
  (string) (len=47) "\t\t\t// try parsing the integer value as a string",
  (string) (len=50) "\t\t\tif val, verr := strconv.Atoi(*v); verr == nil {",
  (string) (len=41) "\t\t\t\t*x, err = ColorWithComment3(val), nil",
  (string) (len=4) "\t\t\t}",
  (string) (len=3) "\t\t}",
  (string) (len=2) "\t}",
  (string) "",
  (string) (len=7) "\treturn",
  (string) (len=1) "}",
  (string) "",
  (string) (len=48) "// Value implements the driver Valuer interface.",
  (string) (len=58) "func (x ColorWithComment3) Value() (driver.Value, error) {",
  (string) (len=23) "\treturn x.String(), nil",
  (string) (len=1) "}",
  (string) "",
  (string) (len=55) "// Set implements the Golang flag.Value interface func.",
  (string) (len=51) "func (x *ColorWithComment3) Set(val string) error {",
  (string) (len=38) "\tv, err := ParseColorWithComment3(val)",
  (string) (len=7) "\t*x = v",
  (string) (len=11) "\treturn err",
  (string) (len=1) "}",
  (string) "",
  (string) (len=56) "// Get implements the Golang flag.Getter interface func.",
  (string) (len=47) "func (x *ColorWithComment3) Get() interface{} {",
  (string) (len=10) "\treturn *x",
  (string) (len=1) "}",
  (string) "",
  (string) (len=62) "// Type implements the github.com/spf13/pFlag Value interface.",
  (string) (len=43) "func (x *ColorWithComment3) Type() string {",
  (string) (len=27) "\treturn \"ColorWithComment3\"",
  (string) (len=1) "}",
  (string) "",
  (string) (len=35) "type NullColorWithComment3 struct {",
  (string) (len=36) "\tColorWithComment3 ColorWithComment3",
  (string) (len=23) "\tValid             bool",
  (string) (len=23) "\tSet               bool",
  (string) (len=1) "}",
  (string) "",
  (string) (len=74) "func NewNullColorWithComment3(val interface{}) (x NullColorWithComment3) {",
  (string) (len=76) "\tx.Scan(val) // yes, we ignore this error, it will just be an invalid value.",
  (string) (len=7) "\treturn",
  (string) (len=1) "}",
  (string) "",
  (string) (len=41) "// Scan implements the Scanner interface.",
  (string) (len=69) "func (x *NullColorWithComment3) Scan(value interface{}) (err error) {",
  (string) (len=13) "\tx.Set = true",
  (string) (len=18) "\tif value == nil {",
  (string) (len=60) "\t\tx.ColorWithComment3, x.Valid = ColorWithComment3(0), false",
  (string) (len=8) "\t\treturn",
  (string) (len=2) "\t}",
  (string) "",
  (string) (len=38) "\terr = x.ColorWithComment3.Scan(value)",
  (string) (len=23) "\tx.Valid = (err == nil)",
  (string) (len=7) "\treturn",
  (string) (len=1) "}",
  (string) "",
  (string) (len=48) "// Value implements the driver Valuer interface.",
  (string) (len=62) "func (x NullColorWithComment3) Value() (driver.Value, error) {",
  (string) (len=14) "\tif !x.Valid {",
  (string) (len=17) "\t\treturn nil, nil",
  (string) (len=2) "\t}",
  (string) (len=46) "\t// driver.Value accepts int64 for int values.",
  (string) (len=39) "\treturn int64(x.ColorWithComment3), nil",
  (string) (len=1) "}",
  (string) "",
  (string) (len=68) "// MarshalJSON correctly serializes a NullColorWithComment3 to JSON.",
  (string) (len=62) "func (n NullColorWithComment3) MarshalJSON() ([]byte, error) {",
  (string) (len=23) "\tconst nullStr = \"null\"",
  (string) (len=13) "\tif n.Valid {",
  (string) (len=42) "\t\treturn json.Marshal(n.ColorWithComment3)",
  (string) (len=2) "\t}",
  (string) (len=28) "\treturn []byte(nullStr), nil",
  (string) (len=1) "}",
  (string) "",
  (string) (len=74) "// UnmarshalJSON correctly deserializes a NullColorWithComment3 from JSON.",
  (string) (len=63) "func (n *NullColorWithComment3) UnmarshalJSON(b []byte) error {",
  (string) (len=13) "\tn.Set = true",
  (string) (len=18) "\tvar x interface{}",
  (string) (len=29) "\terr := json.Unmarshal(b, &x)",
  (string) (len=16) "\tif err != nil {",
  (string) (len=12) "\t\treturn err",
  (string) (len=2) "\t}",
  (string) (len=16) "\terr = n.Scan(x)",
  (string) (len=11) "\treturn err",
  (string) (len=1) "}",
  (string) "",
  (string) (len=38) "type NullColorWithComment3Str struct {",
  (string) (len=22) "\tNullColorWithComment3",
  (string) (len=1) "}",
  (string) "",
  (string) (len=80) "func NewNullColorWithComment3Str(val interface{}) (x NullColorWithComment3Str) {",
  (string) (len=76) "\tx.Scan(val) // yes, we ignore this error, it will just be an invalid value.",
  (string) (len=7) "\treturn",
  (string) (len=1) "}",
  (string) "",
  (string) (len=48) "// Value implements the driver Valuer interface.",
  (string) (len=65) "func (x NullColorWithComment3Str) Value() (driver.Value, error) {",
  (string) (len=14) "\tif !x.Valid {",
  (string) (len=17) "\t\treturn nil, nil",
  (string) (len=2) "\t}",
  (string) (len=41) "\treturn x.ColorWithComment3.String(), nil",
  (string) (len=1) "}",
  (string) "",
  (string) (len=68) "// MarshalJSON correctly serializes a NullColorWithComment3 to JSON.",
  (string) (len=65) "func (n NullColorWithComment3Str) MarshalJSON() ([]byte, error) {",
  (string) (len=23) "\tconst nullStr = \"null\"",
  (string) (len=13) "\tif n.Valid {",
  (string) (len=42) "\t\treturn json.Marshal(n.ColorWithComment3)",
  (string) (len=2) "\t}",
  (string) (len=28) "\treturn []byte(nullStr), nil",
  (string) (len=1) "}",
  (string) "",
  (string) (len=74) "// UnmarshalJSON correctly deserializes a NullColorWithComment3 from JSON.",
  (string) (len=66) "func (n *NullColorWithComment3Str) UnmarshalJSON(b []byte) error {",
  (string) (len=13) "\tn.Set = true",
  (string) (len=18) "\tvar x interface{}",
  (string) (len=29) "\terr := json.Unmarshal(b, &x)",
  (string) (len=16) "\tif err != nil {",
  (string) (len=12) "\t\treturn err",
  (string) (len=2) "\t}",
  (string) (len=16) "\terr = n.Scan(x)",
  (string) (len=11) "\treturn err",
  (string) (len=1) "}",
  (string) "",
  (string) (len=7) "const (",
  (string) (len=18) "\t// Skipped value.",
  (string) (len=15) "\t// Placeholder",
  (string) (len=27) "\t_ ColorWithComment4 = iota",
  (string) (len=61) "\t// Custom_prefix_Black is a ColorWithComment4 of type Black.",
  (string) (len=20) "\tCustom_prefix_Black",
  (string) (len=61) "\t// Custom_prefix_White is a ColorWithComment4 of type White.",
  (string) (len=20) "\tCustom_prefix_White",
  (string) (len=57) "\t// Custom_prefix_Red is a ColorWithComment4 of type Red.",
  (string) (len=18) "\tCustom_prefix_Red",
  (string) (len=61) "\t// Custom_prefix_Green is a ColorWithComment4 of type Green.",
  (string) (len=24) "\t// Green starts with 33",
  (string) (len=50) "\tCustom_prefix_Green ColorWithComment4 = iota + 29",
  (string) (len=59) "\t// Custom_prefix_Blue is a ColorWithComment4 of type Blue.",
  (string) (len=19) "\tCustom_prefix_Blue",
  (string) (len=59) "\t// Custom_prefix_Grey is a ColorWithComment4 of type Grey.",
  (string) (len=19) "\tCustom_prefix_Grey",
  (string) (len=63) "\t// Custom_prefix_Yellow is a ColorWithComment4 of type Yellow.",
  (string) (len=110) "\t// Where did all the (somewhat) bad fish go? (something else that goes in parentheses at the end of the line)",
  (string) (len=21) "\tCustom_prefix_Yellow",
  (string) (len=70) "\t// Custom_prefix_BlueGreen is a ColorWithComment4 of type Blue-Green.",
  (string) (len=22) "\t// blue-green comment",
  (string) (len=24) "\tCustom_prefix_BlueGreen",
  (string) (len=70) "\t// Custom_prefix_RedOrange is a ColorWithComment4 of type Red-Orange.",
  (string) (len=20) "\t// has a , in it!?!",
  (string) (len=24) "\tCustom_prefix_RedOrange",
  (string) (len=1) ")",
  (string) "",
  (string) (len=85) "const _ColorWithComment4Name = \"BlackWhiteRedGreenBluegreyyellowblue-greenred-orange\"",
  (string) "",
  (string) (len=57) "var _ColorWithComment4Map = map[ColorWithComment4]string{",
  (string) (len=54) "\tCustom_prefix_Black:     _ColorWithComment4Name[0:5],",
  (string) (len=55) "\tCustom_prefix_White:     _ColorWithComment4Name[5:10],",
  (string) (len=56) "\tCustom_prefix_Red:       _ColorWithComment4Name[10:13],",
  (string) (len=56) "\tCustom_prefix_Green:     _ColorWithComment4Name[13:18],",
  (string) (len=56) "\tCustom_prefix_Blue:      _ColorWithComment4Name[18:22],",
  (string) (len=56) "\tCustom_prefix_Grey:      _ColorWithComment4Name[22:26],",
  (string) (len=56) "\tCustom_prefix_Yellow:    _ColorWithComment4Name[26:32],",
  (string) (len=56) "\tCustom_prefix_BlueGreen: _ColorWithComment4Name[32:42],",
  (string) (len=56) "\tCustom_prefix_RedOrange: _ColorWithComment4Name[42:52],",
  (string) (len=1) "}",
  (string) "",
  (string) (len=44) "// String implements the Stringer interface.",
  (string) (len=44) "func (x ColorWithComment4) String() string {",
  (string) (len=45) "\tif str, ok := _ColorWithComment4Map[x]; ok {",
  (string) (len=12) "\t\treturn str",
  (string) (len=2) "\t}",
  (string) (len=47) "\treturn fmt.Sprintf(\"ColorWithComment4(%d)\", x)",
  (string) (len=1) "}",
  (string) "",
  (string) (len=59) "var _ColorWithComment4Value = map[string]ColorWithComment4{",
  (string) (len=69) "\t_ColorWithComment4Name[0:5]:                    Custom_prefix_Black,",
  (string) (len=69) "\tstrings.ToLower(_ColorWithComment4Name[0:5]):   Custom_prefix_Black,",
  (string) (len=69) "\t_ColorWithComment4Name[5:10]:                   Custom_prefix_White,",
  (string) (len=69) "\tstrings.ToLower(_ColorWithComment4Name[5:10]):  Custom_prefix_White,",
  (string) (len=67) "\t_ColorWithComment4Name[10:13]:                  Custom_prefix_Red,",
  (string) (len=67) "\tstrings.ToLower(_ColorWithComment4Name[10:13]): Custom_prefix_Red,",
  (string) (len=69) "\t_ColorWithComment4Name[13:18]:                  Custom_prefix_Green,",
  (string) (len=69) "\tstrings.ToLower(_ColorWithComment4Name[13:18]): Custom_prefix_Green,",
  (string) (len=68) "\t_ColorWithComment4Name[18:22]:                  Custom_prefix_Blue,",
  (string) (len=68) "\tstrings.ToLower(_ColorWithComment4Name[18:22]): Custom_prefix_Blue,",
  (string) (len=68) "\t_ColorWithComment4Name[22:26]:                  Custom_prefix_Grey,",
  (string) (len=68) "\tstrings.ToLower(_ColorWithComment4Name[22:26]): Custom_prefix_Grey,",
  (string) (len=70) "\t_ColorWithComment4Name[26:32]:                  Custom_prefix_Yellow,",
  (string) (len=70) "\tstrings.ToLower(_ColorWithComment4Name[26:32]): Custom_prefix_Yellow,",
  (string) (len=73) "\t_ColorWithComment4Name[32:42]:                  Custom_prefix_BlueGreen,",
  (string) (len=73) "\tstrings.ToLower(_ColorWithComment4Name[32:42]): Custom_prefix_BlueGreen,",
  (string) (len=73) "\t_ColorWithComment4Name[42:52]:                  Custom_prefix_RedOrange,",
  (string) (len=73) "\tstrings.ToLower(_ColorWithComment4Name[42:52]): Custom_prefix_RedOrange,",
  (string) (len=1) "}",
  (string) "",
  (string) (len=77) "// ParseColorWithComment4 attempts to convert a string to a ColorWithComment4",
  (string) (len=69) "func ParseColorWithComment4(name string) (ColorWithComment4, error) {",
  (string) (len=48) "\tif x, ok := _ColorWithComment4Value[name]; ok {",
  (string) (len=15) "\t\treturn x, nil",
  (string) (len=2) "\t}",
  (string) (len=85) "\treturn ColorWithComment4(0), fmt.Errorf(\"%s is not a valid ColorWithComment4\", name)",
  (string) (len=1) "}",
  (string) "",
  (string) (len=53) "func (x ColorWithComment4) Ptr() *ColorWithComment4 {",
  (string) (len=10) "\treturn &x",
  (string) (len=1) "}",
  (string) "",
  (string) (len=52) "// MarshalText implements the text marshaller method",
  (string) (len=58) "func (x ColorWithComment4) MarshalText() ([]byte, error) {",
  (string) (len=31) "\treturn []byte(x.String()), nil",
  (string) (len=1) "}",
  (string) "",
  (string) (len=56) "// UnmarshalText implements the text unmarshaller method",
  (string) (len=62) "func (x *ColorWithComment4) UnmarshalText(text []byte) error {",
  (string) (len=21) "\tname := string(text)",
  (string) (len=41) "\ttmp, err := ParseColorWithComment4(name)",
  (string) (len=16) "\tif err != nil {",
  (string) (len=12) "\t\treturn err",
  (string) (len=2) "\t}",
  (string) (len=9) "\t*x = tmp",
  (string) (len=11) "\treturn nil",
  (string) (len=1) "}",
  (string) "",
  (string) (len=104) "var _ColorWithComment4ErrNilPtr = errors.New(\"value pointer is nil\") // one per type for package clashes",
  (string) "",
  (string) (len=41) "// Scan implements the Scanner interface.",
  (string) (len=65) "func (x *ColorWithComment4) Scan(value interface{}) (err error) {",
  (string) (len=18) "\tif value == nil {",
  (string) (len=27) "\t\t*x = ColorWithComment4(0)",
  (string) (len=8) "\t\treturn",
  (string) (len=2) "\t}",
  (string) "",
  (string) (len=37) "\t// A wider range of scannable types.",
  (string) (len=61) "\t// driver.Value values at the top of the list for expediency",
  (string) (len=27) "\tswitch v := value.(type) {",
  (string) (len=12) "\tcase int64:",
  (string) (len=27) "\t\t*x = ColorWithComment4(v)",
  (string) (len=13) "\tcase string:",
  (string) (len=37) "\t\t*x, err = ParseColorWithComment4(v)",
  (string) (len=17) "\t\tif err != nil {",
  (string) (len=47) "\t\t\t// try parsing the integer value as a string",
  (string) (len=49) "\t\t\tif val, verr := strconv.Atoi(v); verr == nil {",
  (string) (len=41) "\t\t\t\t*x, err = ColorWithComment4(val), nil",
  (string) (len=4) "\t\t\t}",
  (string) (len=3) "\t\t}",
  (string) (len=13) "\tcase []byte:",
  (string) (len=45) "\t\t*x, err = ParseColorWithComment4(string(v))",
  (string) (len=17) "\t\tif err != nil {",
  (string) (len=47) "\t\t\t// try parsing the integer value as a string",
  (string) (len=57) "\t\t\tif val, verr := strconv.Atoi(string(v)); verr == nil {",
  (string) (len=41) "\t\t\t\t*x, err = ColorWithComment4(val), nil",
  (string) (len=4) "\t\t\t}",
  (string) (len=3) "\t\t}",
  (string) (len=24) "\tcase ColorWithComment4:",
  (string) (len=8) "\t\t*x = v",
  (string) (len=10) "\tcase int:",
  (string) (len=27) "\t\t*x = ColorWithComment4(v)",
  (string) (len=25) "\tcase *ColorWithComment4:",
  (string) (len=15) "\t\tif v == nil {",
  (string) (len=37) "\t\t\treturn _ColorWithComment4ErrNilPtr",
  (string) (len=3) "\t\t}",
  (string) (len=9) "\t\t*x = *v",
  (string) (len=11) "\tcase uint:",
  (string) (len=27) "\t\t*x = ColorWithComment4(v)",
  (string) (len=13) "\tcase uint64:",
  (string) (len=27) "\t\t*x = ColorWithComment4(v)",
  (string) (len=11) "\tcase *int:",
  (string) (len=15) "\t\tif v == nil {",
  (string) (len=37) "\t\t\treturn _ColorWithComment4ErrNilPtr",
  (string) (len=3) "\t\t}",
  (string) (len=28) "\t\t*x = ColorWithComment4(*v)",
  (string) (len=13) "\tcase *int64:",
  (string) (len=15) "\t\tif v == nil {",
  (string) (len=37) "\t\t\treturn _ColorWithComment4ErrNilPtr",
  (string) (len=3) "\t\t}",
  (string) (len=28) "\t\t*x = ColorWithComment4(*v)",
  (string) (len=72) "\tcase float64: // json marshals everything as a float64 if it's a number",
  (string) (len=27) "\t\t*x = ColorWithComment4(v)",
  (string) (len=73) "\tcase *float64: // json marshals everything as a float64 if it's a number",
  (string) (len=15) "\t\tif v == nil {",
  (string) (len=37) "\t\t\treturn _ColorWithComment4ErrNilPtr",
  (string) (len=3) "\t\t}",
  (string) (len=28) "\t\t*x = ColorWithComment4(*v)",
  (string) (len=12) "\tcase *uint:",
  (string) (len=15) "\t\tif v == nil {",
  (string) (len=37) "\t\t\treturn _ColorWithComment4ErrNilPtr",
  (string) (len=3) "\t\t}",
  (string) (len=28) "\t\t*x = ColorWithComment4(*v)",
  (string) (len=14) "\tcase *uint64:",
  (string) (len=15) "\t\tif v == nil {",
  (string) (len=37) "\t\t\treturn _ColorWithComment4ErrNilPtr",
  (string) (len=3) "\t\t}",
  (string) (len=28) "\t\t*x = ColorWithComment4(*v)",
  (string) (len=14) "\tcase *string:",
  (string) (len=15) "\t\tif v == nil {",
  (string) (len=37) "\t\t\treturn _ColorWithComment4ErrNilPtr",
  (string) (len=3) "\t\t}",
  (string) (len=38) "\t\t*x, err = ParseColorWithComment4(*v)",
  (string) (len=17) "\t\tif err != nil {",
  (string) (len=47) "\t\t\t// try parsing the integer value as a string",
  (string) (len=50) "\t\t\tif val, verr := strconv.Atoi(*v); verr == nil {",
  (string) (len=41) "\t\t\t\t*x, err = ColorWithComment4(val), nil",
  (string) (len=4) "\t\t\t}",
  (string) (len=3) "\t\t}",
  (string) (len=2) "\t}",
  (string) "",
  (string) (len=7) "\treturn",
  (string) (len=1) "}",
  (string) "",
  (string) (len=48) "// Value implements the driver Valuer interface.",
  (string) (len=58) "func (x ColorWithComment4) Value() (driver.Value, error) {",
  (string) (len=23) "\treturn x.String(), nil",
  (string) (len=1) "}",
  (string) "",
  (string) (len=55) "// Set implements the Golang flag.Value interface func.",
  (string) (len=51) "func (x *ColorWithComment4) Set(val string) error {",
  (string) (len=38) "\tv, err := ParseColorWithComment4(val)",
  (string) (len=7) "\t*x = v",
  (string) (len=11) "\treturn err",
  (string) (len=1) "}",
  (string) "",
  (string) (len=56) "// Get implements the Golang flag.Getter interface func.",
  (string) (len=47) "func (x *ColorWithComment4) Get() interface{} {",
  (string) (len=10) "\treturn *x",
  (string) (len=1) "}",
  (string) "",
  (string) (len=62) "// Type implements the github.com/spf13/pFlag Value interface.",
  (string) (len=43) "func (x *ColorWithComment4) Type() string {",
  (string) (len=27) "\treturn \"ColorWithComment4\"",
  (string) (len=1) "}",
  (string) "",
  (string) (len=35) "type NullColorWithComment4 struct {",
  (string) (len=36) "\tColorWithComment4 ColorWithComment4",
  (string) (len=23) "\tValid             bool",
  (string) (len=23) "\tSet               bool",
  (string) (len=1) "}",
  (string) "",
  (string) (len=74) "func NewNullColorWithComment4(val interface{}) (x NullColorWithComment4) {",
  (string) (len=76) "\tx.Scan(val) // yes, we ignore this error, it will just be an invalid value.",
  (string) (len=7) "\treturn",
  (string) (len=1) "}",
  (string) "",
  (string) (len=41) "// Scan implements the Scanner interface.",
  (string) (len=69) "func (x *NullColorWithComment4) Scan(value interface{}) (err error) {",
  (string) (len=13) "\tx.Set = true",
  (string) (len=18) "\tif value == nil {",
  (string) (len=60) "\t\tx.ColorWithComment4, x.Valid = ColorWithComment4(0), false",
  (string) (len=8) "\t\treturn",
  (string) (len=2) "\t}",
  (string) "",
  (string) (len=38) "\terr = x.ColorWithComment4.Scan(value)",
  (string) (len=23) "\tx.Valid = (err == nil)",
  (string) (len=7) "\treturn",
  (string) (len=1) "}",
  (string) "",
  (string) (len=48) "// Value implements the driver Valuer interface.",
  (string) (len=62) "func (x NullColorWithComment4) Value() (driver.Value, error) {",
  (string) (len=14) "\tif !x.Valid {",
  (string) (len=17) "\t\treturn nil, nil",
  (string) (len=2) "\t}",
  (string) (len=46) "\t// driver.Value accepts int64 for int values.",
  (string) (len=39) "\treturn int64(x.ColorWithComment4), nil",
  (string) (len=1) "}",
  (string) "",
  (string) (len=68) "// MarshalJSON correctly serializes a NullColorWithComment4 to JSON.",
  (string) (len=62) "func (n NullColorWithComment4) MarshalJSON() ([]byte, error) {",
  (string) (len=23) "\tconst nullStr = \"null\"",
  (string) (len=13) "\tif n.Valid {",
  (string) (len=42) "\t\treturn json.Marshal(n.ColorWithComment4)",
  (string) (len=2) "\t}",
  (string) (len=28) "\treturn []byte(nullStr), nil",
  (string) (len=1) "}",
  (string) "",
  (string) (len=74) "// UnmarshalJSON correctly deserializes a NullColorWithComment4 from JSON.",
  (string) (len=63) "func (n *NullColorWithComment4) UnmarshalJSON(b []byte) error {",
  (string) (len=13) "\tn.Set = true",
  (string) (len=18) "\tvar x interface{}",
  (string) (len=29) "\terr := json.Unmarshal(b, &x)",
  (string) (len=16) "\tif err != nil {",
  (string) (len=12) "\t\treturn err",
  (string) (len=2) "\t}",
  (string) (len=16) "\terr = n.Scan(x)",
  (string) (len=11) "\treturn err",
  (string) (len=1) "}",
  (string) "",
  (string) (len=38) "type NullColorWithComment4Str struct {",
  (string) (len=22) "\tNullColorWithComment4",
  (string) (len=1) "}",
  (string) "",
  (string) (len=80) "func NewNullColorWithComment4Str(val interface{}) (x NullColorWithComment4Str) {",
  (string) (len=76) "\tx.Scan(val) // yes, we ignore this error, it will just be an invalid value.",
  (string) (len=7) "\treturn",
  (string) (len=1) "}",
  (string) "",
  (string) (len=48) "// Value implements the driver Valuer interface.",
  (string) (len=65) "func (x NullColorWithComment4Str) Value() (driver.Value, error) {",
  (string) (len=14) "\tif !x.Valid {",
  (string) (len=17) "\t\treturn nil, nil",
  (string) (len=2) "\t}",
  (string) (len=41) "\treturn x.ColorWithComment4.String(), nil",
  (string) (len=1) "}",
  (string) "",
  (string) (len=68) "// MarshalJSON correctly serializes a NullColorWithComment4 to JSON.",
  (string) (len=65) "func (n NullColorWithComment4Str) MarshalJSON() ([]byte, error) {",
  (string) (len=23) "\tconst nullStr = \"null\"",
  (string) (len=13) "\tif n.Valid {",
  (string) (len=42) "\t\treturn json.Marshal(n.ColorWithComment4)",
  (string) (len=2) "\t}",
  (string) (len=28) "\treturn []byte(nullStr), nil",
  (string) (len=1) "}",
  (string) "",
  (string) (len=74) "// UnmarshalJSON correctly deserializes a NullColorWithComment4 from JSON.",
  (string) (len=66) "func (n *NullColorWithComment4Str) UnmarshalJSON(b []byte) error {",
  (string) (len=13) "\tn.Set = true",
  (string) (len=18) "\tvar x interface{}",
  (string) (len=29) "\terr := json.Unmarshal(b, &x)",
  (string) (len=16) "\tif err != nil {",
  (string) (len=12) "\t\treturn err",
  (string) (len=2) "\t}",
  (string) (len=16) "\terr = n.Scan(x)",
  (string) (len=11) "\treturn err",
  (string) (len=1) "}",
  (string) "",
  (string) (len=7) "const (",
  (string) (len=51) "\t// Custom_prefix_Toyota is a Model of type Toyota.",
  (string) (len=34) "\tCustom_prefix_Toyota Model = iota",
  (string) (len=18) "\t// Skipped value.",
  (string) (len=2) "\t_",
  (string) (len=49) "\t// Custom_prefix_Chevy is a Model of type Chevy.",
  (string) (len=20) "\tCustom_prefix_Chevy",
  (string) (len=18) "\t// Skipped value.",
  (string) (len=2) "\t_",
  (string) (len=47) "\t// Custom_prefix_Ford is a Model of type Ford.",
  (string) (len=19) "\tCustom_prefix_Ford",
  (string) (len=1) ")",
  (string) "",
  (string) (len=36) "const _ModelName = \"ToyotaChevyFord\"",
  (string) "",
  (string) (len=33) "var _ModelMap = map[Model]string{",
  (string) (len=39) "\tCustom_prefix_Toyota: _ModelName[0:6],",
  (string) (len=40) "\tCustom_prefix_Chevy:  _ModelName[6:11],",
  (string) (len=41) "\tCustom_prefix_Ford:   _ModelName[11:15],",
  (string) (len=1) "}",
  (string) "",
  (string) (len=44) "// String implements the Stringer interface.",
  (string) (len=32) "func (x Model) String() string {",
  (string) (len=33) "\tif str, ok := _ModelMap[x]; ok {",
  (string) (len=12) "\t\treturn str",
  (string) (len=2) "\t}",
  (string) (len=35) "\treturn fmt.Sprintf(\"Model(%d)\", x)",
  (string) (len=1) "}",
  (string) "",
  (string) (len=35) "var _ModelValue = map[string]Model{",
  (string) (len=58) "\t_ModelName[0:6]:                    Custom_prefix_Toyota,",
  (string) (len=58) "\tstrings.ToLower(_ModelName[0:6]):   Custom_prefix_Toyota,",
  (string) (len=57) "\t_ModelName[6:11]:                   Custom_prefix_Chevy,",
  (string) (len=57) "\tstrings.ToLower(_ModelName[6:11]):  Custom_prefix_Chevy,",
  (string) (len=56) "\t_ModelName[11:15]:                  Custom_prefix_Ford,",
  (string) (len=56) "\tstrings.ToLower(_ModelName[11:15]): Custom_prefix_Ford,",
  (string) (len=1) "}",
  (string) "",
  (string) (len=53) "// ParseModel attempts to convert a string to a Model",
  (string) (len=45) "func ParseModel(name string) (Model, error) {",
  (string) (len=36) "\tif x, ok := _ModelValue[name]; ok {",
  (string) (len=15) "\t\treturn x, nil",
  (string) (len=2) "\t}",
  (string) (len=61) "\treturn Model(0), fmt.Errorf(\"%s is not a valid Model\", name)",
  (string) (len=1) "}",
  (string) "",
  (string) (len=29) "func (x Model) Ptr() *Model {",
  (string) (len=10) "\treturn &x",
  (string) (len=1) "}",
  (string) "",
  (string) (len=52) "// MarshalText implements the text marshaller method",
  (string) (len=46) "func (x Model) MarshalText() ([]byte, error) {",
  (string) (len=31) "\treturn []byte(x.String()), nil",
  (string) (len=1) "}",
  (string) "",
  (string) (len=56) "// UnmarshalText implements the text unmarshaller method",
  (string) (len=50) "func (x *Model) UnmarshalText(text []byte) error {",
  (string) (len=21) "\tname := string(text)",
  (string) (len=29) "\ttmp, err := ParseModel(name)",
  (string) (len=16) "\tif err != nil {",
  (string) (len=12) "\t\treturn err",
  (string) (len=2) "\t}",
  (string) (len=9) "\t*x = tmp",
  (string) (len=11) "\treturn nil",
  (string) (len=1) "}",
  (string) "",
  (string) (len=92) "var _ModelErrNilPtr = errors.New(\"value pointer is nil\") // one per type for package clashes",
  (string) "",
  (string) (len=41) "// Scan implements the Scanner interface.",
  (string) (len=53) "func (x *Model) Scan(value interface{}) (err error) {",
  (string) (len=18) "\tif value == nil {",
  (string) (len=15) "\t\t*x = Model(0)",
  (string) (len=8) "\t\treturn",
  (string) (len=2) "\t}",
  (string) "",
  (string) (len=37) "\t// A wider range of scannable types.",
  (string) (len=61) "\t// driver.Value values at the top of the list for expediency",
  (string) (len=27) "\tswitch v := value.(type) {",
  (string) (len=12) "\tcase int64:",
  (string) (len=15) "\t\t*x = Model(v)",
  (string) (len=13) "\tcase string:",
  (string) (len=25) "\t\t*x, err = ParseModel(v)",
  (string) (len=17) "\t\tif err != nil {",
  (string) (len=47) "\t\t\t// try parsing the integer value as a string",
  (string) (len=49) "\t\t\tif val, verr := strconv.Atoi(v); verr == nil {",
  (string) (len=29) "\t\t\t\t*x, err = Model(val), nil",
  (string) (len=4) "\t\t\t}",
  (string) (len=3) "\t\t}",
  (string) (len=13) "\tcase []byte:",
  (string) (len=33) "\t\t*x, err = ParseModel(string(v))",
  (string) (len=17) "\t\tif err != nil {",
  (string) (len=47) "\t\t\t// try parsing the integer value as a string",
  (string) (len=57) "\t\t\tif val, verr := strconv.Atoi(string(v)); verr == nil {",
  (string) (len=29) "\t\t\t\t*x, err = Model(val), nil",
  (string) (len=4) "\t\t\t}",
  (string) (len=3) "\t\t}",
  (string) (len=12) "\tcase Model:",
  (string) (len=8) "\t\t*x = v",
  (string) (len=10) "\tcase int:",
  (string) (len=15) "\t\t*x = Model(v)",
  (string) (len=13) "\tcase *Model:",
  (string) (len=15) "\t\tif v == nil {",
  (string) (len=25) "\t\t\treturn _ModelErrNilPtr",
  (string) (len=3) "\t\t}",
  (string) (len=9) "\t\t*x = *v",
  (string) (len=11) "\tcase uint:",
  (string) (len=15) "\t\t*x = Model(v)",
  (string) (len=13) "\tcase uint64:",
  (string) (len=15) "\t\t*x = Model(v)",
  (string) (len=11) "\tcase *int:",
  (string) (len=15) "\t\tif v == nil {",
  (string) (len=25) "\t\t\treturn _ModelErrNilPtr",
  (string) (len=3) "\t\t}",
  (string) (len=16) "\t\t*x = Model(*v)",
  (string) (len=13) "\tcase *int64:",
  (string) (len=15) "\t\tif v == nil {",
  (string) (len=25) "\t\t\treturn _ModelErrNilPtr",
  (string) (len=3) "\t\t}",
  (string) (len=16) "\t\t*x = Model(*v)",
  (string) (len=72) "\tcase float64: // json marshals everything as a float64 if it's a number",
  (string) (len=15) "\t\t*x = Model(v)",
  (string) (len=73) "\tcase *float64: // json marshals everything as a float64 if it's a number",
  (string) (len=15) "\t\tif v == nil {",
  (string) (len=25) "\t\t\treturn _ModelErrNilPtr",
  (string) (len=3) "\t\t}",
  (string) (len=16) "\t\t*x = Model(*v)",
  (string) (len=12) "\tcase *uint:",
  (string) (len=15) "\t\tif v == nil {",
  (string) (len=25) "\t\t\treturn _ModelErrNilPtr",
  (string) (len=3) "\t\t}",
  (string) (len=16) "\t\t*x = Model(*v)",
  (string) (len=14) "\tcase *uint64:",
  (string) (len=15) "\t\tif v == nil {",
  (string) (len=25) "\t\t\treturn _ModelErrNilPtr",
  (string) (len=3) "\t\t}",
  (string) (len=16) "\t\t*x = Model(*v)",
  (string) (len=14) "\tcase *string:",
  (string) (len=15) "\t\tif v == nil {",
  (string) (len=25) "\t\t\treturn _ModelErrNilPtr",
  (string) (len=3) "\t\t}",
  (string) (len=26) "\t\t*x, err = ParseModel(*v)",
  (string) (len=17) "\t\tif err != nil {",
  (string) (len=47) "\t\t\t// try parsing the integer value as a string",
  (string) (len=50) "\t\t\tif val, verr := strconv.Atoi(*v); verr == nil {",
  (string) (len=29) "\t\t\t\t*x, err = Model(val), nil",
  (string) (len=4) "\t\t\t}",
  (string) (len=3) "\t\t}",
  (string) (len=2) "\t}",
  (string) "",
  (string) (len=7) "\treturn",
  (string) (len=1) "}",
  (string) "",
  (string) (len=48) "// Value implements the driver Valuer interface.",
  (string) (len=46) "func (x Model) Value() (driver.Value, error) {",
  (string) (len=23) "\treturn x.String(), nil",
  (string) (len=1) "}",
  (string) "",
  (string) (len=55) "// Set implements the Golang flag.Value interface func.",
  (string) (len=39) "func (x *Model) Set(val string) error {",
  (string) (len=26) "\tv, err := ParseModel(val)",
  (string) (len=7) "\t*x = v",
  (string) (len=11) "\treturn err",
  (string) (len=1) "}",
  (string) "",
  (string) (len=56) "// Get implements the Golang flag.Getter interface func.",
  (string) (len=35) "func (x *Model) Get() interface{} {",
  (string) (len=10) "\treturn *x",
  (string) (len=1) "}",
  (string) "",
  (string) (len=62) "// Type implements the github.com/spf13/pFlag Value interface.",
  (string) (len=31) "func (x *Model) Type() string {",
  (string) (len=15) "\treturn \"Model\"",
  (string) (len=1) "}",
  (string) "",
  (string) (len=23) "type NullModel struct {",
  (string) (len=12) "\tModel Model",
  (string) (len=11) "\tValid bool",
  (string) (len=11) "\tSet   bool",
  (string) (len=1) "}",
  (string) "",
  (string) (len=50) "func NewNullModel(val interface{}) (x NullModel) {",
  (string) (len=76) "\tx.Scan(val) // yes, we ignore this error, it will just be an invalid value.",
  (string) (len=7) "\treturn",
  (string) (len=1) "}",
  (string) "",
  (string) (len=41) "// Scan implements the Scanner interface.",
  (string) (len=57) "func (x *NullModel) Scan(value interface{}) (err error) {",
  (string) (len=13) "\tx.Set = true",
  (string) (len=18) "\tif value == nil {",
  (string) (len=36) "\t\tx.Model, x.Valid = Model(0), false",
  (string) (len=8) "\t\treturn",
  (string) (len=2) "\t}",
  (string) "",
  (string) (len=26) "\terr = x.Model.Scan(value)",
  (string) (len=23) "\tx.Valid = (err == nil)",
  (string) (len=7) "\treturn",
  (string) (len=1) "}",
  (string) "",
  (string) (len=48) "// Value implements the driver Valuer interface.",
  (string) (len=50) "func (x NullModel) Value() (driver.Value, error) {",
  (string) (len=14) "\tif !x.Valid {",
  (string) (len=17) "\t\treturn nil, nil",
  (string) (len=2) "\t}",
  (string) (len=46) "\t// driver.Value accepts int64 for int values.",
  (string) (len=27) "\treturn int64(x.Model), nil",
  (string) (len=1) "}",
  (string) "",
  (string) (len=56) "// MarshalJSON correctly serializes a NullModel to JSON.",
  (string) (len=50) "func (n NullModel) MarshalJSON() ([]byte, error) {",
  (string) (len=23) "\tconst nullStr = \"null\"",
  (string) (len=13) "\tif n.Valid {",
  (string) (len=30) "\t\treturn json.Marshal(n.Model)",
  (string) (len=2) "\t}",
  (string) (len=28) "\treturn []byte(nullStr), nil",
  (string) (len=1) "}",
  (string) "",
  (string) (len=62) "// UnmarshalJSON correctly deserializes a NullModel from JSON.",
  (string) (len=51) "func (n *NullModel) UnmarshalJSON(b []byte) error {",
  (string) (len=13) "\tn.Set = true",
  (string) (len=18) "\tvar x interface{}",
  (string) (len=29) "\terr := json.Unmarshal(b, &x)",
  (string) (len=16) "\tif err != nil {",
  (string) (len=12) "\t\treturn err",
  (string) (len=2) "\t}",
  (string) (len=16) "\terr = n.Scan(x)",
  (string) (len=11) "\treturn err",
  (string) (len=1) "}",
  (string) "",
  (string) (len=26) "type NullModelStr struct {",
  (string) (len=10) "\tNullModel",
  (string) (len=1) "}",
  (string) "",
  (string) (len=56) "func NewNullModelStr(val interface{}) (x NullModelStr) {",
  (string) (len=76) "\tx.Scan(val) // yes, we ignore this error, it will just be an invalid value.",
  (string) (len=7) "\treturn",
  (string) (len=1) "}",
  (string) "",
  (string) (len=48) "// Value implements the driver Valuer interface.",
  (string) (len=53) "func (x NullModelStr) Value() (driver.Value, error) {",
  (string) (len=14) "\tif !x.Valid {",
  (string) (len=17) "\t\treturn nil, nil",
  (string) (len=2) "\t}",
  (string) (len=29) "\treturn x.Model.String(), nil",
  (string) (len=1) "}",
  (string) "",
  (string) (len=56) "// MarshalJSON correctly serializes a NullModel to JSON.",
  (string) (len=53) "func (n NullModelStr) MarshalJSON() ([]byte, error) {",
  (string) (len=23) "\tconst nullStr = \"null\"",
  (string) (len=13) "\tif n.Valid {",
  (string) (len=30) "\t\treturn json.Marshal(n.Model)",
  (string) (len=2) "\t}",
  (string) (len=28) "\treturn []byte(nullStr), nil",
  (string) (len=1) "}",
  (string) "",
  (string) (len=62) "// UnmarshalJSON correctly deserializes a NullModel from JSON.",
  (string) (len=54) "func (n *NullModelStr) UnmarshalJSON(b []byte) error {",
  (string) (len=13) "\tn.Set = true",
  (string) (len=18) "\tvar x interface{}",
  (string) (len=29) "\terr := json.Unmarshal(b, &x)",
  (string) (len=16) "\tif err != nil {",
  (string) (len=12) "\t\treturn err",
  (string) (len=2) "\t}",
  (string) (len=16) "\terr = n.Scan(x)",
  (string) (len=11) "\treturn err",
  (string) (len=1) "}",
  (string) "",
  (string) (len=7) "const (",
  (string) (len=65) "\t// Custom_prefix_TestHyphen is a Sanitizing of type Test-Hyphen.",
  (string) (len=43) "\tCustom_prefix_TestHyphen Sanitizing = iota",
  (string) (len=67) "\t// Custom_prefix_HyphenStart is a Sanitizing of type -HyphenStart.",
  (string) (len=26) "\tCustom_prefix_HyphenStart",
  (string) (len=76) "\t// Custom_prefix__underscoreFirst is a Sanitizing of type _underscoreFirst.",
  (string) (len=31) "\tCustom_prefix__underscoreFirst",
  (string) (len=68) "\t// Custom_prefix_0numberFirst is a Sanitizing of type 0numberFirst.",
  (string) (len=27) "\tCustom_prefix_0numberFirst",
  (string) (len=64) "\t// Custom_prefix_123456789a is a Sanitizing of type 123456789a.",
  (string) (len=25) "\tCustom_prefix_123456789a",
  (string) (len=65) "\t// Custom_prefix_123123Asdf is a Sanitizing of type 123123-Asdf.",
  (string) (len=25) "\tCustom_prefix_123123Asdf",
  (string) (len=70) "\t// Custom_prefix_EndingHyphen is a Sanitizing of type Ending-Hyphen-.",
  (string) (len=27) "\tCustom_prefix_EndingHyphen",
  (string) (len=1) ")",
  (string) "",
  (string) (len=112) "const _SanitizingName = \"test-Hyphen-hyphenStart_underscoreFirst0numberFirst123456789a123123-asdfending-hyphen-\"",
  (string) "",
  (string) (len=43) "var _SanitizingMap = map[Sanitizing]string{",
  (string) (len=55) "\tCustom_prefix_TestHyphen:       _SanitizingName[0:11],",
  (string) (len=56) "\tCustom_prefix_HyphenStart:      _SanitizingName[11:23],",
  (string) (len=56) "\tCustom_prefix__underscoreFirst: _SanitizingName[23:39],",
  (string) (len=56) "\tCustom_prefix_0numberFirst:     _SanitizingName[39:51],",
  (string) (len=56) "\tCustom_prefix_123456789a:       _SanitizingName[51:61],",
  (string) (len=56) "\tCustom_prefix_123123Asdf:       _SanitizingName[61:72],",
  (string) (len=56) "\tCustom_prefix_EndingHyphen:     _SanitizingName[72:86],",
  (string) (len=1) "}",
  (string) "",
  (string) (len=44) "// String implements the Stringer interface.",
  (string) (len=37) "func (x Sanitizing) String() string {",
  (string) (len=38) "\tif str, ok := _SanitizingMap[x]; ok {",
  (string) (len=12) "\t\treturn str",
  (string) (len=2) "\t}",
  (string) (len=40) "\treturn fmt.Sprintf(\"Sanitizing(%d)\", x)",
  (string) (len=1) "}",
  (string) "",
  (string) (len=45) "var _SanitizingValue = map[string]Sanitizing{",
  (string) (len=67) "\t_SanitizingName[0:11]:                   Custom_prefix_TestHyphen,",
  (string) (len=67) "\tstrings.ToLower(_SanitizingName[0:11]):  Custom_prefix_TestHyphen,",
  (string) (len=68) "\t_SanitizingName[11:23]:                  Custom_prefix_HyphenStart,",
  (string) (len=68) "\tstrings.ToLower(_SanitizingName[11:23]): Custom_prefix_HyphenStart,",
  (string) (len=73) "\t_SanitizingName[23:39]:                  Custom_prefix__underscoreFirst,",
  (string) (len=73) "\tstrings.ToLower(_SanitizingName[23:39]): Custom_prefix__underscoreFirst,",
  (string) (len=69) "\t_SanitizingName[39:51]:                  Custom_prefix_0numberFirst,",
  (string) (len=69) "\tstrings.ToLower(_SanitizingName[39:51]): Custom_prefix_0numberFirst,",
  (string) (len=67) "\t_SanitizingName[51:61]:                  Custom_prefix_123456789a,",
  (string) (len=67) "\tstrings.ToLower(_SanitizingName[51:61]): Custom_prefix_123456789a,",
  (string) (len=67) "\t_SanitizingName[61:72]:                  Custom_prefix_123123Asdf,",
  (string) (len=67) "\tstrings.ToLower(_SanitizingName[61:72]): Custom_prefix_123123Asdf,",
  (string) (len=69) "\t_SanitizingName[72:86]:                  Custom_prefix_EndingHyphen,",
  (string) (len=69) "\tstrings.ToLower(_SanitizingName[72:86]): Custom_prefix_EndingHyphen,",
  (string) (len=1) "}",
  (string) "",
  (string) (len=63) "// ParseSanitizing attempts to convert a string to a Sanitizing",
  (string) (len=55) "func ParseSanitizing(name string) (Sanitizing, error) {",
  (string) (len=41) "\tif x, ok := _SanitizingValue[name]; ok {",
  (string) (len=15) "\t\treturn x, nil",
  (string) (len=2) "\t}",
  (string) (len=71) "\treturn Sanitizing(0), fmt.Errorf(\"%s is not a valid Sanitizing\", name)",
  (string) (len=1) "}",
  (string) "",
  (string) (len=39) "func (x Sanitizing) Ptr() *Sanitizing {",
  (string) (len=10) "\treturn &x",
  (string) (len=1) "}",
  (string) "",
  (string) (len=52) "// MarshalText implements the text marshaller method",
  (string) (len=51) "func (x Sanitizing) MarshalText() ([]byte, error) {",
  (string) (len=31) "\treturn []byte(x.String()), nil",
  (string) (len=1) "}",
  (string) "",
  (string) (len=56) "// UnmarshalText implements the text unmarshaller method",
  (string) (len=55) "func (x *Sanitizing) UnmarshalText(text []byte) error {",
  (string) (len=21) "\tname := string(text)",
  (string) (len=34) "\ttmp, err := ParseSanitizing(name)",
  (string) (len=16) "\tif err != nil {",
  (string) (len=12) "\t\treturn err",
  (string) (len=2) "\t}",
  (string) (len=9) "\t*x = tmp",
  (string) (len=11) "\treturn nil",
  (string) (len=1) "}",
  (string) "",
  (string) (len=97) "var _SanitizingErrNilPtr = errors.New(\"value pointer is nil\") // one per type for package clashes",
  (string) "",
  (string) (len=41) "// Scan implements the Scanner interface.",
  (string) (len=58) "func (x *Sanitizing) Scan(value interface{}) (err error) {",
  (string) (len=18) "\tif value == nil {",
  (string) (len=20) "\t\t*x = Sanitizing(0)",
  (string) (len=8) "\t\treturn",
  (string) (len=2) "\t}",
  (string) "",
  (string) (len=37) "\t// A wider range of scannable types.",
  (string) (len=61) "\t// driver.Value values at the top of the list for expediency",
  (string) (len=27) "\tswitch v := value.(type) {",
  (string) (len=12) "\tcase int64:",
  (string) (len=20) "\t\t*x = Sanitizing(v)",
  (string) (len=13) "\tcase string:",
  (string) (len=30) "\t\t*x, err = ParseSanitizing(v)",
  (string) (len=17) "\t\tif err != nil {",
  (string) (len=47) "\t\t\t// try parsing the integer value as a string",
  (string) (len=49) "\t\t\tif val, verr := strconv.Atoi(v); verr == nil {",
  (string) (len=34) "\t\t\t\t*x, err = Sanitizing(val), nil",
  (string) (len=4) "\t\t\t}",
  (string) (len=3) "\t\t}",
  (string) (len=13) "\tcase []byte:",
  (string) (len=38) "\t\t*x, err = ParseSanitizing(string(v))",
  (string) (len=17) "\t\tif err != nil {",
  (string) (len=47) "\t\t\t// try parsing the integer value as a string",
  (string) (len=57) "\t\t\tif val, verr := strconv.Atoi(string(v)); verr == nil {",
  (string) (len=34) "\t\t\t\t*x, err = Sanitizing(val), nil",
  (string) (len=4) "\t\t\t}",
  (string) (len=3) "\t\t}",
  (string) (len=17) "\tcase Sanitizing:",
  (string) (len=8) "\t\t*x = v",
  (string) (len=10) "\tcase int:",
  (string) (len=20) "\t\t*x = Sanitizing(v)",
  (string) (len=18) "\tcase *Sanitizing:",
  (string) (len=15) "\t\tif v == nil {",
  (string) (len=30) "\t\t\treturn _SanitizingErrNilPtr",
  (string) (len=3) "\t\t}",
  (string) (len=9) "\t\t*x = *v",
  (string) (len=11) "\tcase uint:",
  (string) (len=20) "\t\t*x = Sanitizing(v)",
  (string) (len=13) "\tcase uint64:",
  (string) (len=20) "\t\t*x = Sanitizing(v)",
  (string) (len=11) "\tcase *int:",
  (string) (len=15) "\t\tif v == nil {",
  (string) (len=30) "\t\t\treturn _SanitizingErrNilPtr",
  (string) (len=3) "\t\t}",
  (string) (len=21) "\t\t*x = Sanitizing(*v)",
  (string) (len=13) "\tcase *int64:",
  (string) (len=15) "\t\tif v == nil {",
  (string) (len=30) "\t\t\treturn _SanitizingErrNilPtr",
  (string) (len=3) "\t\t}",
  (string) (len=21) "\t\t*x = Sanitizing(*v)",
  (string) (len=72) "\tcase float64: // json marshals everything as a float64 if it's a number",
  (string) (len=20) "\t\t*x = Sanitizing(v)",
  (string) (len=73) "\tcase *float64: // json marshals everything as a float64 if it's a number",
  (string) (len=15) "\t\tif v == nil {",
  (string) (len=30) "\t\t\treturn _SanitizingErrNilPtr",
  (string) (len=3) "\t\t}",
  (string) (len=21) "\t\t*x = Sanitizing(*v)",
  (string) (len=12) "\tcase *uint:",
  (string) (len=15) "\t\tif v == nil {",
  (string) (len=30) "\t\t\treturn _SanitizingErrNilPtr",
  (string) (len=3) "\t\t}",
  (string) (len=21) "\t\t*x = Sanitizing(*v)",
  (string) (len=14) "\tcase *uint64:",
  (string) (len=15) "\t\tif v == nil {",
  (string) (len=30) "\t\t\treturn _SanitizingErrNilPtr",
  (string) (len=3) "\t\t}",
  (string) (len=21) "\t\t*x = Sanitizing(*v)",
  (string) (len=14) "\tcase *string:",
  (string) (len=15) "\t\tif v == nil {",
  (string) (len=30) "\t\t\treturn _SanitizingErrNilPtr",
  (string) (len=3) "\t\t}",
  (string) (len=31) "\t\t*x, err = ParseSanitizing(*v)",
  (string) (len=17) "\t\tif err != nil {",
  (string) (len=47) "\t\t\t// try parsing the integer value as a string",
  (string) (len=50) "\t\t\tif val, verr := strconv.Atoi(*v); verr == nil {",
  (string) (len=34) "\t\t\t\t*x, err = Sanitizing(val), nil",
  (string) (len=4) "\t\t\t}",
  (string) (len=3) "\t\t}",
  (string) (len=2) "\t}",
  (string) "",
  (string) (len=7) "\treturn",
  (string) (len=1) "}",
  (string) "",
  (string) (len=48) "// Value implements the driver Valuer interface.",
  (string) (len=51) "func (x Sanitizing) Value() (driver.Value, error) {",
  (string) (len=23) "\treturn x.String(), nil",
  (string) (len=1) "}",
  (string) "",
  (string) (len=55) "// Set implements the Golang flag.Value interface func.",
  (string) (len=44) "func (x *Sanitizing) Set(val string) error {",
  (string) (len=31) "\tv, err := ParseSanitizing(val)",
  (string) (len=7) "\t*x = v",
  (string) (len=11) "\treturn err",
  (string) (len=1) "}",
  (string) "",
  (string) (len=56) "// Get implements the Golang flag.Getter interface func.",
  (string) (len=40) "func (x *Sanitizing) Get() interface{} {",
  (string) (len=10) "\treturn *x",
  (string) (len=1) "}",
  (string) "",
  (string) (len=62) "// Type implements the github.com/spf13/pFlag Value interface.",
  (string) (len=36) "func (x *Sanitizing) Type() string {",
  (string) (len=20) "\treturn \"Sanitizing\"",
  (string) (len=1) "}",
  (string) "",
  (string) (len=28) "type NullSanitizing struct {",
  (string) (len=22) "\tSanitizing Sanitizing",
  (string) (len=16) "\tValid      bool",
  (string) (len=16) "\tSet        bool",
  (string) (len=1) "}",
  (string) "",
  (string) (len=60) "func NewNullSanitizing(val interface{}) (x NullSanitizing) {",
  (string) (len=76) "\tx.Scan(val) // yes, we ignore this error, it will just be an invalid value.",
  (string) (len=7) "\treturn",
  (string) (len=1) "}",
  (string) "",
  (string) (len=41) "// Scan implements the Scanner interface.",
  (string) (len=62) "func (x *NullSanitizing) Scan(value interface{}) (err error) {",
  (string) (len=13) "\tx.Set = true",
  (string) (len=18) "\tif value == nil {",
  (string) (len=46) "\t\tx.Sanitizing, x.Valid = Sanitizing(0), false",
  (string) (len=8) "\t\treturn",
  (string) (len=2) "\t}",
  (string) "",
  (string) (len=31) "\terr = x.Sanitizing.Scan(value)",
  (string) (len=23) "\tx.Valid = (err == nil)",
  (string) (len=7) "\treturn",
  (string) (len=1) "}",
  (string) "",
  (string) (len=48) "// Value implements the driver Valuer interface.",
  (string) (len=55) "func (x NullSanitizing) Value() (driver.Value, error) {",
  (string) (len=14) "\tif !x.Valid {",
  (string) (len=17) "\t\treturn nil, nil",
  (string) (len=2) "\t}",
  (string) (len=46) "\t// driver.Value accepts int64 for int values.",
  (string) (len=32) "\treturn int64(x.Sanitizing), nil",
  (string) (len=1) "}",
  (string) "",
  (string) (len=61) "// MarshalJSON correctly serializes a NullSanitizing to JSON.",
  (string) (len=55) "func (n NullSanitizing) MarshalJSON() ([]byte, error) {",
  (string) (len=23) "\tconst nullStr = \"null\"",
  (string) (len=13) "\tif n.Valid {",
  (string) (len=35) "\t\treturn json.Marshal(n.Sanitizing)",
  (string) (len=2) "\t}",
  (string) (len=28) "\treturn []byte(nullStr), nil",
  (string) (len=1) "}",
  (string) "",
  (string) (len=67) "// UnmarshalJSON correctly deserializes a NullSanitizing from JSON.",
  (string) (len=56) "func (n *NullSanitizing) UnmarshalJSON(b []byte) error {",
  (string) (len=13) "\tn.Set = true",
  (string) (len=18) "\tvar x interface{}",
  (string) (len=29) "\terr := json.Unmarshal(b, &x)",
  (string) (len=16) "\tif err != nil {",
  (string) (len=12) "\t\treturn err",
  (string) (len=2) "\t}",
  (string) (len=16) "\terr = n.Scan(x)",
  (string) (len=11) "\treturn err",
  (string) (len=1) "}",
  (string) "",
  (string) (len=31) "type NullSanitizingStr struct {",
  (string) (len=15) "\tNullSanitizing",
  (string) (len=1) "}",
  (string) "",
  (string) (len=66) "func NewNullSanitizingStr(val interface{}) (x NullSanitizingStr) {",
  (string) (len=76) "\tx.Scan(val) // yes, we ignore this error, it will just be an invalid value.",
  (string) (len=7) "\treturn",
  (string) (len=1) "}",
  (string) "",
  (string) (len=48) "// Value implements the driver Valuer interface.",
  (string) (len=58) "func (x NullSanitizingStr) Value() (driver.Value, error) {",
  (string) (len=14) "\tif !x.Valid {",
  (string) (len=17) "\t\treturn nil, nil",
  (string) (len=2) "\t}",
  (string) (len=34) "\treturn x.Sanitizing.String(), nil",
  (string) (len=1) "}",
  (string) "",
  (string) (len=61) "// MarshalJSON correctly serializes a NullSanitizing to JSON.",
  (string) (len=58) "func (n NullSanitizingStr) MarshalJSON() ([]byte, error) {",
  (string) (len=23) "\tconst nullStr = \"null\"",
  (string) (len=13) "\tif n.Valid {",
  (string) (len=35) "\t\treturn json.Marshal(n.Sanitizing)",
  (string) (len=2) "\t}",
  (string) (len=28) "\treturn []byte(nullStr), nil",
  (string) (len=1) "}",
  (string) "",
  (string) (len=67) "// UnmarshalJSON correctly deserializes a NullSanitizing from JSON.",
  (string) (len=59) "func (n *NullSanitizingStr) UnmarshalJSON(b []byte) error {",
  (string) (len=13) "\tn.Set = true",
  (string) (len=18) "\tvar x interface{}",
  (string) (len=29) "\terr := json.Unmarshal(b, &x)",
  (string) (len=16) "\tif err != nil {",
  (string) (len=12) "\t\treturn err",
  (string) (len=2) "\t}",
  (string) (len=16) "\terr = n.Scan(x)",
  (string) (len=11) "\treturn err",
  (string) (len=1) "}",
  (string) "",
  (string) (len=7) "const (",
  (string) (len=46) "\t// Custom_prefix_Coke is a Soda of type Coke.",
  (string) (len=31) "\tCustom_prefix_Coke Soda = iota",
  (string) (len=48) "\t// Custom_prefix_Pepsi is a Soda of type Pepsi.",
  (string) (len=20) "\tCustom_prefix_Pepsi",
  (string) (len=50) "\t// Custom_prefix_MtnDew is a Soda of type MtnDew.",
  (string) (len=21) "\tCustom_prefix_MtnDew",
  (string) (len=1) ")",
  (string) "",
  (string) (len=35) "const _SodaName = \"CokePepsiMtnDew\"",
  (string) "",
  (string) (len=31) "var _SodaMap = map[Soda]string{",
  (string) (len=38) "\tCustom_prefix_Coke:   _SodaName[0:4],",
  (string) (len=38) "\tCustom_prefix_Pepsi:  _SodaName[4:9],",
  (string) (len=39) "\tCustom_prefix_MtnDew: _SodaName[9:15],",
  (string) (len=1) "}",
  (string) "",
  (string) (len=44) "// String implements the Stringer interface.",
  (string) (len=31) "func (x Soda) String() string {",
  (string) (len=32) "\tif str, ok := _SodaMap[x]; ok {",
  (string) (len=12) "\t\treturn str",
  (string) (len=2) "\t}",
  (string) (len=34) "\treturn fmt.Sprintf(\"Soda(%d)\", x)",
  (string) (len=1) "}",
  (string) "",
  (string) (len=33) "var _SodaValue = map[string]Soda{",
  (string) (len=54) "\t_SodaName[0:4]:                   Custom_prefix_Coke,",
  (string) (len=54) "\tstrings.ToLower(_SodaName[0:4]):  Custom_prefix_Coke,",
  (string) (len=55) "\t_SodaName[4:9]:                   Custom_prefix_Pepsi,",
  (string) (len=55) "\tstrings.ToLower(_SodaName[4:9]):  Custom_prefix_Pepsi,",
  (string) (len=56) "\t_SodaName[9:15]:                  Custom_prefix_MtnDew,",
  (string) (len=56) "\tstrings.ToLower(_SodaName[9:15]): Custom_prefix_MtnDew,",
  (string) (len=1) "}",
  (string) "",
  (string) (len=51) "// ParseSoda attempts to convert a string to a Soda",
  (string) (len=43) "func ParseSoda(name string) (Soda, error) {",
  (string) (len=35) "\tif x, ok := _SodaValue[name]; ok {",
  (string) (len=15) "\t\treturn x, nil",
  (string) (len=2) "\t}",
  (string) (len=59) "\treturn Soda(0), fmt.Errorf(\"%s is not a valid Soda\", name)",
  (string) (len=1) "}",
  (string) "",
  (string) (len=27) "func (x Soda) Ptr() *Soda {",
  (string) (len=10) "\treturn &x",
  (string) (len=1) "}",
  (string) "",
  (string) (len=52) "// MarshalText implements the text marshaller method",
  (string) (len=45) "func (x Soda) MarshalText() ([]byte, error) {",
  (string) (len=31) "\treturn []byte(x.String()), nil",
  (string) (len=1) "}",
  (string) "",
  (string) (len=56) "// UnmarshalText implements the text unmarshaller method",
  (string) (len=49) "func (x *Soda) UnmarshalText(text []byte) error {",
  (string) (len=21) "\tname := string(text)",
  (string) (len=28) "\ttmp, err := ParseSoda(name)",
  (string) (len=16) "\tif err != nil {",
  (string) (len=12) "\t\treturn err",
  (string) (len=2) "\t}",
  (string) (len=9) "\t*x = tmp",
  (string) (len=11) "\treturn nil",
  (string) (len=1) "}",
  (string) "",
  (string) (len=91) "var _SodaErrNilPtr = errors.New(\"value pointer is nil\") // one per type for package clashes",
  (string) "",
  (string) (len=41) "// Scan implements the Scanner interface.",
  (string) (len=52) "func (x *Soda) Scan(value interface{}) (err error) {",
  (string) (len=18) "\tif value == nil {",
  (string) (len=14) "\t\t*x = Soda(0)",
  (string) (len=8) "\t\treturn",
  (string) (len=2) "\t}",
  (string) "",
  (string) (len=37) "\t// A wider range of scannable types.",
  (string) (len=61) "\t// driver.Value values at the top of the list for expediency",
  (string) (len=27) "\tswitch v := value.(type) {",
  (string) (len=12) "\tcase int64:",
  (string) (len=14) "\t\t*x = Soda(v)",
  (string) (len=13) "\tcase string:",
  (string) (len=24) "\t\t*x, err = ParseSoda(v)",
  (string) (len=17) "\t\tif err != nil {",
  (string) (len=47) "\t\t\t// try parsing the integer value as a string",
  (string) (len=49) "\t\t\tif val, verr := strconv.Atoi(v); verr == nil {",
  (string) (len=28) "\t\t\t\t*x, err = Soda(val), nil",
  (string) (len=4) "\t\t\t}",
  (string) (len=3) "\t\t}",
  (string) (len=13) "\tcase []byte:",
  (string) (len=32) "\t\t*x, err = ParseSoda(string(v))",
  (string) (len=17) "\t\tif err != nil {",
  (string) (len=47) "\t\t\t// try parsing the integer value as a string",
  (string) (len=57) "\t\t\tif val, verr := strconv.Atoi(string(v)); verr == nil {",
  (string) (len=28) "\t\t\t\t*x, err = Soda(val), nil",
  (string) (len=4) "\t\t\t}",
  (string) (len=3) "\t\t}",
  (string) (len=11) "\tcase Soda:",
  (string) (len=8) "\t\t*x = v",
  (string) (len=10) "\tcase int:",
  (string) (len=14) "\t\t*x = Soda(v)",
  (string) (len=12) "\tcase *Soda:",
  (string) (len=15) "\t\tif v == nil {",
  (string) (len=24) "\t\t\treturn _SodaErrNilPtr",
  (string) (len=3) "\t\t}",
  (string) (len=9) "\t\t*x = *v",
  (string) (len=11) "\tcase uint:",
  (string) (len=14) "\t\t*x = Soda(v)",
  (string) (len=13) "\tcase uint64:",
  (string) (len=14) "\t\t*x = Soda(v)",
  (string) (len=11) "\tcase *int:",
  (string) (len=15) "\t\tif v == nil {",
  (string) (len=24) "\t\t\treturn _SodaErrNilPtr",
  (string) (len=3) "\t\t}",
  (string) (len=15) "\t\t*x = Soda(*v)",
  (string) (len=13) "\tcase *int64:",
  (string) (len=15) "\t\tif v == nil {",
  (string) (len=24) "\t\t\treturn _SodaErrNilPtr",
  (string) (len=3) "\t\t}",
  (string) (len=15) "\t\t*x = Soda(*v)",
  (string) (len=72) "\tcase float64: // json marshals everything as a float64 if it's a number",
  (string) (len=14) "\t\t*x = Soda(v)",
  (string) (len=73) "\tcase *float64: // json marshals everything as a float64 if it's a number",
  (string) (len=15) "\t\tif v == nil {",
  (string) (len=24) "\t\t\treturn _SodaErrNilPtr",
  (string) (len=3) "\t\t}",
  (string) (len=15) "\t\t*x = Soda(*v)",
  (string) (len=12) "\tcase *uint:",
  (string) (len=15) "\t\tif v == nil {",
  (string) (len=24) "\t\t\treturn _SodaErrNilPtr",
  (string) (len=3) "\t\t}",
  (string) (len=15) "\t\t*x = Soda(*v)",
  (string) (len=14) "\tcase *uint64:",
  (string) (len=15) "\t\tif v == nil {",
  (string) (len=24) "\t\t\treturn _SodaErrNilPtr",
  (string) (len=3) "\t\t}",
  (string) (len=15) "\t\t*x = Soda(*v)",
  (string) (len=14) "\tcase *string:",
  (string) (len=15) "\t\tif v == nil {",
  (string) (len=24) "\t\t\treturn _SodaErrNilPtr",
  (string) (len=3) "\t\t}",
  (string) (len=25) "\t\t*x, err = ParseSoda(*v)",
  (string) (len=17) "\t\tif err != nil {",
  (string) (len=47) "\t\t\t// try parsing the integer value as a string",
  (string) (len=50) "\t\t\tif val, verr := strconv.Atoi(*v); verr == nil {",
  (string) (len=28) "\t\t\t\t*x, err = Soda(val), nil",
  (string) (len=4) "\t\t\t}",
  (string) (len=3) "\t\t}",
  (string) (len=2) "\t}",
  (string) "",
  (string) (len=7) "\treturn",
  (string) (len=1) "}",
  (string) "",
  (string) (len=48) "// Value implements the driver Valuer interface.",
  (string) (len=45) "func (x Soda) Value() (driver.Value, error) {",
  (string) (len=23) "\treturn x.String(), nil",
  (string) (len=1) "}",
  (string) "",
  (string) (len=55) "// Set implements the Golang flag.Value interface func.",
  (string) (len=38) "func (x *Soda) Set(val string) error {",
  (string) (len=25) "\tv, err := ParseSoda(val)",
  (string) (len=7) "\t*x = v",
  (string) (len=11) "\treturn err",
  (string) (len=1) "}",
  (string) "",
  (string) (len=56) "// Get implements the Golang flag.Getter interface func.",
  (string) (len=34) "func (x *Soda) Get() interface{} {",
  (string) (len=10) "\treturn *x",
  (string) (len=1) "}",
  (string) "",
  (string) (len=62) "// Type implements the github.com/spf13/pFlag Value interface.",
  (string) (len=30) "func (x *Soda) Type() string {",
  (string) (len=14) "\treturn \"Soda\"",
  (string) (len=1) "}",
  (string) "",
  (string) (len=22) "type NullSoda struct {",
  (string) (len=11) "\tSoda  Soda",
  (string) (len=11) "\tValid bool",
  (string) (len=11) "\tSet   bool",
  (string) (len=1) "}",
  (string) "",
  (string) (len=48) "func NewNullSoda(val interface{}) (x NullSoda) {",
  (string) (len=76) "\tx.Scan(val) // yes, we ignore this error, it will just be an invalid value.",
  (string) (len=7) "\treturn",
  (string) (len=1) "}",
  (string) "",
  (string) (len=41) "// Scan implements the Scanner interface.",
  (string) (len=56) "func (x *NullSoda) Scan(value interface{}) (err error) {",
  (string) (len=13) "\tx.Set = true",
  (string) (len=18) "\tif value == nil {",
  (string) (len=34) "\t\tx.Soda, x.Valid = Soda(0), false",
  (string) (len=8) "\t\treturn",
  (string) (len=2) "\t}",
  (string) "",
  (string) (len=25) "\terr = x.Soda.Scan(value)",
  (string) (len=23) "\tx.Valid = (err == nil)",
  (string) (len=7) "\treturn",
  (string) (len=1) "}",
  (string) "",
  (string) (len=48) "// Value implements the driver Valuer interface.",
  (string) (len=49) "func (x NullSoda) Value() (driver.Value, error) {",
  (string) (len=14) "\tif !x.Valid {",
  (string) (len=17) "\t\treturn nil, nil",
  (string) (len=2) "\t}",
  (string) (len=46) "\t// driver.Value accepts int64 for int values.",
  (string) (len=26) "\treturn int64(x.Soda), nil",
  (string) (len=1) "}",
  (string) "",
  (string) (len=55) "// MarshalJSON correctly serializes a NullSoda to JSON.",
  (string) (len=49) "func (n NullSoda) MarshalJSON() ([]byte, error) {",
  (string) (len=23) "\tconst nullStr = \"null\"",
  (string) (len=13) "\tif n.Valid {",
  (string) (len=29) "\t\treturn json.Marshal(n.Soda)",
  (string) (len=2) "\t}",
  (string) (len=28) "\treturn []byte(nullStr), nil",
  (string) (len=1) "}",
  (string) "",
  (string) (len=61) "// UnmarshalJSON correctly deserializes a NullSoda from JSON.",
  (string) (len=50) "func (n *NullSoda) UnmarshalJSON(b []byte) error {",
  (string) (len=13) "\tn.Set = true",
  (string) (len=18) "\tvar x interface{}",
  (string) (len=29) "\terr := json.Unmarshal(b, &x)",
  (string) (len=16) "\tif err != nil {",
  (string) (len=12) "\t\treturn err",
  (string) (len=2) "\t}",
  (string) (len=16) "\terr = n.Scan(x)",
  (string) (len=11) "\treturn err",
  (string) (len=1) "}",
  (string) "",
  (string) (len=25) "type NullSodaStr struct {",
  (string) (len=9) "\tNullSoda",
  (string) (len=1) "}",
  (string) "",
  (string) (len=54) "func NewNullSodaStr(val interface{}) (x NullSodaStr) {",
  (string) (len=76) "\tx.Scan(val) // yes, we ignore this error, it will just be an invalid value.",
  (string) (len=7) "\treturn",
  (string) (len=1) "}",
  (string) "",
  (string) (len=48) "// Value implements the driver Valuer interface.",
  (string) (len=52) "func (x NullSodaStr) Value() (driver.Value, error) {",
  (string) (len=14) "\tif !x.Valid {",
  (string) (len=17) "\t\treturn nil, nil",
  (string) (len=2) "\t}",
  (string) (len=28) "\treturn x.Soda.String(), nil",
  (string) (len=1) "}",
  (string) "",
  (string) (len=55) "// MarshalJSON correctly serializes a NullSoda to JSON.",
  (string) (len=52) "func (n NullSodaStr) MarshalJSON() ([]byte, error) {",
  (string) (len=23) "\tconst nullStr = \"null\"",
  (string) (len=13) "\tif n.Valid {",
  (string) (len=29) "\t\treturn json.Marshal(n.Soda)",
  (string) (len=2) "\t}",
  (string) (len=28) "\treturn []byte(nullStr), nil",
  (string) (len=1) "}",
  (string) "",
  (string) (len=61) "// UnmarshalJSON correctly deserializes a NullSoda from JSON.",
  (string) (len=53) "func (n *NullSodaStr) UnmarshalJSON(b []byte) error {",
  (string) (len=13) "\tn.Set = true",
  (string) (len=18) "\tvar x interface{}",
  (string) (len=29) "\terr := json.Unmarshal(b, &x)",
  (string) (len=16) "\tif err != nil {",
  (string) (len=12) "\t\treturn err",
  (string) (len=2) "\t}",
  (string) (len=16) "\terr = n.Scan(x)",
  (string) (len=11) "\treturn err",
  (string) (len=1) "}",
  (string) "",
  (string) (len=7) "const (",
  (string) (len=70) "\t// Custom_prefix_StartWithNum is a StartNotZero of type StartWithNum.",
  (string) (len=52) "\tCustom_prefix_StartWithNum StartNotZero = iota + 23",
  (string) (len=60) "\t// Custom_prefix_NextNum is a StartNotZero of type NextNum.",
  (string) (len=22) "\tCustom_prefix_NextNum",
  (string) (len=1) ")",
  (string) "",
  (string) (len=47) "const _StartNotZeroName = \"startWithNumnextNum\"",
  (string) "",
  (string) (len=47) "var _StartNotZeroMap = map[StartNotZero]string{",
  (string) (len=53) "\tCustom_prefix_StartWithNum: _StartNotZeroName[0:12],",
  (string) (len=54) "\tCustom_prefix_NextNum:      _StartNotZeroName[12:19],",
  (string) (len=1) "}",
  (string) "",
  (string) (len=44) "// String implements the Stringer interface.",
  (string) (len=39) "func (x StartNotZero) String() string {",
  (string) (len=40) "\tif str, ok := _StartNotZeroMap[x]; ok {",
  (string) (len=12) "\t\treturn str",
  (string) (len=2) "\t}",
  (string) (len=42) "\treturn fmt.Sprintf(\"StartNotZero(%d)\", x)",
  (string) (len=1) "}",
  (string) "",
  (string) (len=49) "var _StartNotZeroValue = map[string]StartNotZero{",
  (string) (len=71) "\t_StartNotZeroName[0:12]:                   Custom_prefix_StartWithNum,",
  (string) (len=71) "\tstrings.ToLower(_StartNotZeroName[0:12]):  Custom_prefix_StartWithNum,",
  (string) (len=66) "\t_StartNotZeroName[12:19]:                  Custom_prefix_NextNum,",
  (string) (len=66) "\tstrings.ToLower(_StartNotZeroName[12:19]): Custom_prefix_NextNum,",
  (string) (len=1) "}",
  (string) "",
  (string) (len=67) "// ParseStartNotZero attempts to convert a string to a StartNotZero",
  (string) (len=59) "func ParseStartNotZero(name string) (StartNotZero, error) {",
  (string) (len=43) "\tif x, ok := _StartNotZeroValue[name]; ok {",
  (string) (len=15) "\t\treturn x, nil",
  (string) (len=2) "\t}",
  (string) (len=75) "\treturn StartNotZero(0), fmt.Errorf(\"%s is not a valid StartNotZero\", name)",
  (string) (len=1) "}",
  (string) "",
  (string) (len=43) "func (x StartNotZero) Ptr() *StartNotZero {",
  (string) (len=10) "\treturn &x",
  (string) (len=1) "}",
  (string) "",
  (string) (len=52) "// MarshalText implements the text marshaller method",
  (string) (len=53) "func (x StartNotZero) MarshalText() ([]byte, error) {",
  (string) (len=31) "\treturn []byte(x.String()), nil",
  (string) (len=1) "}",
  (string) "",
  (string) (len=56) "// UnmarshalText implements the text unmarshaller method",
  (string) (len=57) "func (x *StartNotZero) UnmarshalText(text []byte) error {",
  (string) (len=21) "\tname := string(text)",
  (string) (len=36) "\ttmp, err := ParseStartNotZero(name)",
  (string) (len=16) "\tif err != nil {",
  (string) (len=12) "\t\treturn err",
  (string) (len=2) "\t}",
  (string) (len=9) "\t*x = tmp",
  (string) (len=11) "\treturn nil",
  (string) (len=1) "}",
  (string) "",
  (string) (len=99) "var _StartNotZeroErrNilPtr = errors.New(\"value pointer is nil\") // one per type for package clashes",
  (string) "",
  (string) (len=41) "// Scan implements the Scanner interface.",
  (string) (len=60) "func (x *StartNotZero) Scan(value interface{}) (err error) {",
  (string) (len=18) "\tif value == nil {",
  (string) (len=22) "\t\t*x = StartNotZero(0)",
  (string) (len=8) "\t\treturn",
  (string) (len=2) "\t}",
  (string) "",
  (string) (len=37) "\t// A wider range of scannable types.",
  (string) (len=61) "\t// driver.Value values at the top of the list for expediency",
  (string) (len=27) "\tswitch v := value.(type) {",
  (string) (len=12) "\tcase int64:",
  (string) (len=22) "\t\t*x = StartNotZero(v)",
  (string) (len=13) "\tcase string:",
  (string) (len=32) "\t\t*x, err = ParseStartNotZero(v)",
  (string) (len=17) "\t\tif err != nil {",
  (string) (len=47) "\t\t\t// try parsing the integer value as a string",
  (string) (len=49) "\t\t\tif val, verr := strconv.Atoi(v); verr == nil {",
  (string) (len=36) "\t\t\t\t*x, err = StartNotZero(val), nil",
  (string) (len=4) "\t\t\t}",
  (string) (len=3) "\t\t}",
  (string) (len=13) "\tcase []byte:",
  (string) (len=40) "\t\t*x, err = ParseStartNotZero(string(v))",
  (string) (len=17) "\t\tif err != nil {",
  (string) (len=47) "\t\t\t// try parsing the integer value as a string",
  (string) (len=57) "\t\t\tif val, verr := strconv.Atoi(string(v)); verr == nil {",
  (string) (len=36) "\t\t\t\t*x, err = StartNotZero(val), nil",
  (string) (len=4) "\t\t\t}",
  (string) (len=3) "\t\t}",
  (string) (len=19) "\tcase StartNotZero:",
  (string) (len=8) "\t\t*x = v",
  (string) (len=10) "\tcase int:",
  (string) (len=22) "\t\t*x = StartNotZero(v)",
  (string) (len=20) "\tcase *StartNotZero:",
  (string) (len=15) "\t\tif v == nil {",
  (string) (len=32) "\t\t\treturn _StartNotZeroErrNilPtr",
  (string) (len=3) "\t\t}",
  (string) (len=9) "\t\t*x = *v",
  (string) (len=11) "\tcase uint:",
  (string) (len=22) "\t\t*x = StartNotZero(v)",
  (string) (len=13) "\tcase uint64:",
  (string) (len=22) "\t\t*x = StartNotZero(v)",
  (string) (len=11) "\tcase *int:",
  (string) (len=15) "\t\tif v == nil {",
  (string) (len=32) "\t\t\treturn _StartNotZeroErrNilPtr",
  (string) (len=3) "\t\t}",
  (string) (len=23) "\t\t*x = StartNotZero(*v)",
  (string) (len=13) "\tcase *int64:",
  (string) (len=15) "\t\tif v == nil {",
  (string) (len=32) "\t\t\treturn _StartNotZeroErrNilPtr",
  (string) (len=3) "\t\t}",
  (string) (len=23) "\t\t*x = StartNotZero(*v)",
  (string) (len=72) "\tcase float64: // json marshals everything as a float64 if it's a number",
  (string) (len=22) "\t\t*x = StartNotZero(v)",
  (string) (len=73) "\tcase *float64: // json marshals everything as a float64 if it's a number",
  (string) (len=15) "\t\tif v == nil {",
  (string) (len=32) "\t\t\treturn _StartNotZeroErrNilPtr",
  (string) (len=3) "\t\t}",
  (string) (len=23) "\t\t*x = StartNotZero(*v)",
  (string) (len=12) "\tcase *uint:",
  (string) (len=15) "\t\tif v == nil {",
  (string) (len=32) "\t\t\treturn _StartNotZeroErrNilPtr",
  (string) (len=3) "\t\t}",
  (string) (len=23) "\t\t*x = StartNotZero(*v)",
  (string) (len=14) "\tcase *uint64:",
  (string) (len=15) "\t\tif v == nil {",
  (string) (len=32) "\t\t\treturn _StartNotZeroErrNilPtr",
  (string) (len=3) "\t\t}",
  (string) (len=23) "\t\t*x = StartNotZero(*v)",
  (string) (len=14) "\tcase *string:",
  (string) (len=15) "\t\tif v == nil {",
  (string) (len=32) "\t\t\treturn _StartNotZeroErrNilPtr",
  (string) (len=3) "\t\t}",
  (string) (len=33) "\t\t*x, err = ParseStartNotZero(*v)",
  (string) (len=17) "\t\tif err != nil {",
  (string) (len=47) "\t\t\t// try parsing the integer value as a string",
  (string) (len=50) "\t\t\tif val, verr := strconv.Atoi(*v); verr == nil {",
  (string) (len=36) "\t\t\t\t*x, err = StartNotZero(val), nil",
  (string) (len=4) "\t\t\t}",
  (string) (len=3) "\t\t}",
  (string) (len=2) "\t}",
  (string) "",
  (string) (len=7) "\treturn",
  (string) (len=1) "}",
  (string) "",
  (string) (len=48) "// Value implements the driver Valuer interface.",
  (string) (len=53) "func (x StartNotZero) Value() (driver.Value, error) {",
  (string) (len=23) "\treturn x.String(), nil",
  (string) (len=1) "}",
  (string) "",
  (string) (len=55) "// Set implements the Golang flag.Value interface func.",
  (string) (len=46) "func (x *StartNotZero) Set(val string) error {",
  (string) (len=33) "\tv, err := ParseStartNotZero(val)",
  (string) (len=7) "\t*x = v",
  (string) (len=11) "\treturn err",
  (string) (len=1) "}",
  (string) "",
  (string) (len=56) "// Get implements the Golang flag.Getter interface func.",
  (string) (len=42) "func (x *StartNotZero) Get() interface{} {",
  (string) (len=10) "\treturn *x",
  (string) (len=1) "}",
  (string) "",
  (string) (len=62) "// Type implements the github.com/spf13/pFlag Value interface.",
  (string) (len=38) "func (x *StartNotZero) Type() string {",
  (string) (len=22) "\treturn \"StartNotZero\"",
  (string) (len=1) "}",
  (string) "",
  (string) (len=30) "type NullStartNotZero struct {",
  (string) (len=26) "\tStartNotZero StartNotZero",
  (string) (len=18) "\tValid        bool",
  (string) (len=18) "\tSet          bool",
  (string) (len=1) "}",
  (string) "",
  (string) (len=64) "func NewNullStartNotZero(val interface{}) (x NullStartNotZero) {",
  (string) (len=76) "\tx.Scan(val) // yes, we ignore this error, it will just be an invalid value.",
  (string) (len=7) "\treturn",
  (string) (len=1) "}",
  (string) "",
  (string) (len=41) "// Scan implements the Scanner interface.",
  (string) (len=64) "func (x *NullStartNotZero) Scan(value interface{}) (err error) {",
  (string) (len=13) "\tx.Set = true",
  (string) (len=18) "\tif value == nil {",
  (string) (len=50) "\t\tx.StartNotZero, x.Valid = StartNotZero(0), false",
  (string) (len=8) "\t\treturn",
  (string) (len=2) "\t}",
  (string) "",
  (string) (len=33) "\terr = x.StartNotZero.Scan(value)",
  (string) (len=23) "\tx.Valid = (err == nil)",
  (string) (len=7) "\treturn",
  (string) (len=1) "}",
  (string) "",
  (string) (len=48) "// Value implements the driver Valuer interface.",
  (string) (len=57) "func (x NullStartNotZero) Value() (driver.Value, error) {",
  (string) (len=14) "\tif !x.Valid {",
  (string) (len=17) "\t\treturn nil, nil",
  (string) (len=2) "\t}",
  (string) (len=46) "\t// driver.Value accepts int64 for int values.",
  (string) (len=34) "\treturn int64(x.StartNotZero), nil",
  (string) (len=1) "}",
  (string) "",
  (string) (len=63) "// MarshalJSON correctly serializes a NullStartNotZero to JSON.",
  (string) (len=57) "func (n NullStartNotZero) MarshalJSON() ([]byte, error) {",
  (string) (len=23) "\tconst nullStr = \"null\"",
  (string) (len=13) "\tif n.Valid {",
  (string) (len=37) "\t\treturn json.Marshal(n.StartNotZero)",
  (string) (len=2) "\t}",
  (string) (len=28) "\treturn []byte(nullStr), nil",
  (string) (len=1) "}",
  (string) "",
  (string) (len=69) "// UnmarshalJSON correctly deserializes a NullStartNotZero from JSON.",
  (string) (len=58) "func (n *NullStartNotZero) UnmarshalJSON(b []byte) error {",
  (string) (len=13) "\tn.Set = true",
  (string) (len=18) "\tvar x interface{}",
  (string) (len=29) "\terr := json.Unmarshal(b, &x)",
  (string) (len=16) "\tif err != nil {",
  (string) (len=12) "\t\treturn err",
  (string) (len=2) "\t}",
  (string) (len=16) "\terr = n.Scan(x)",
  (string) (len=11) "\treturn err",
  (string) (len=1) "}",
  (string) "",
  (string) (len=33) "type NullStartNotZeroStr struct {",
  (string) (len=17) "\tNullStartNotZero",
  (string) (len=1) "}",
  (string) "",
  (string) (len=70) "func NewNullStartNotZeroStr(val interface{}) (x NullStartNotZeroStr) {",
  (string) (len=76) "\tx.Scan(val) // yes, we ignore this error, it will just be an invalid value.",
  (string) (len=7) "\treturn",
  (string) (len=1) "}",
  (string) "",
  (string) (len=48) "// Value implements the driver Valuer interface.",
  (string) (len=60) "func (x NullStartNotZeroStr) Value() (driver.Value, error) {",
  (string) (len=14) "\tif !x.Valid {",
  (string) (len=17) "\t\treturn nil, nil",
  (string) (len=2) "\t}",
  (string) (len=36) "\treturn x.StartNotZero.String(), nil",
  (string) (len=1) "}",
  (string) "",
  (string) (len=63) "// MarshalJSON correctly serializes a NullStartNotZero to JSON.",
  (string) (len=60) "func (n NullStartNotZeroStr) MarshalJSON() ([]byte, error) {",
  (string) (len=23) "\tconst nullStr = \"null\"",
  (string) (len=13) "\tif n.Valid {",
  (string) (len=37) "\t\treturn json.Marshal(n.StartNotZero)",
  (string) (len=2) "\t}",
  (string) (len=28) "\treturn []byte(nullStr), nil",
  (string) (len=1) "}",
  (string) "",
  (string) (len=69) "// UnmarshalJSON correctly deserializes a NullStartNotZero from JSON.",
  (string) (len=61) "func (n *NullStartNotZeroStr) UnmarshalJSON(b []byte) error {",
  (string) (len=13) "\tn.Set = true",
  (string) (len=18) "\tvar x interface{}",
  (string) (len=29) "\terr := json.Unmarshal(b, &x)",
  (string) (len=16) "\tif err != nil {",
  (string) (len=12) "\t\treturn err",
  (string) (len=2) "\t}",
  (string) (len=16) "\terr = n.Scan(x)",
  (string) (len=11) "\treturn err",
  (string) (len=1) "}",
  (string) ""
}
