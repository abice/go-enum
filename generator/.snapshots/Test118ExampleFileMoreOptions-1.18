([]string) (len=178) {
  (string) (len=41) "// Code generated by go-enum DO NOT EDIT.",
  (string) (len=13) "// Version: -",
  (string) (len=14) "// Revision: -",
  (string) (len=16) "// Build Date: -",
  (string) (len=14) "// Built By: -",
  (string) "",
  (string) (len=17) "package generator",
  (string) "",
  (string) (len=8) "import (",
  (string) (len=22) "\t\"database/sql/driver\"",
  (string) (len=6) "\t\"fmt\"",
  (string) (len=10) "\t\"strings\"",
  (string) "",
  (string) (len=24) "\t\"github.com/pkg/errors\"",
  (string) (len=1) ")",
  (string) "",
  (string) (len=7) "const (",
  (string) (len=52) "\t// ChangeTypeCreate is a ChangeType of type Create.",
  (string) (len=35) "\tChangeTypeCreate ChangeType = iota",
  (string) (len=52) "\t// ChangeTypeUpdate is a ChangeType of type Update.",
  (string) (len=17) "\tChangeTypeUpdate",
  (string) (len=52) "\t// ChangeTypeDelete is a ChangeType of type Delete.",
  (string) (len=17) "\tChangeTypeDelete",
  (string) (len=1) ")",
  (string) "",
  (string) (len=44) "const _ChangeTypeName = \"createupdatedelete\"",
  (string) "",
  (string) (len=32) "var _ChangeTypeNames = []string{",
  (string) (len=22) "\t_ChangeTypeName[0:6],",
  (string) (len=23) "\t_ChangeTypeName[6:12],",
  (string) (len=24) "\t_ChangeTypeName[12:18],",
  (string) (len=1) "}",
  (string) "",
  (string) (len=74) "// ChangeTypeNames returns a list of possible string values of ChangeType.",
  (string) (len=33) "func ChangeTypeNames() []string {",
  (string) (len=45) "\ttmp := make([]string, len(_ChangeTypeNames))",
  (string) (len=28) "\tcopy(tmp, _ChangeTypeNames)",
  (string) (len=11) "\treturn tmp",
  (string) (len=1) "}",
  (string) "",
  (string) (len=43) "var _ChangeTypeMap = map[ChangeType]string{",
  (string) (len=40) "\tChangeTypeCreate: _ChangeTypeName[0:6],",
  (string) (len=41) "\tChangeTypeUpdate: _ChangeTypeName[6:12],",
  (string) (len=42) "\tChangeTypeDelete: _ChangeTypeName[12:18],",
  (string) (len=1) "}",
  (string) "",
  (string) (len=44) "// String implements the Stringer interface.",
  (string) (len=37) "func (x ChangeType) String() string {",
  (string) (len=38) "\tif str, ok := _ChangeTypeMap[x]; ok {",
  (string) (len=12) "\t\treturn str",
  (string) (len=2) "\t}",
  (string) (len=40) "\treturn fmt.Sprintf(\"ChangeType(%d)\", x)",
  (string) (len=1) "}",
  (string) "",
  (string) (len=45) "var _ChangeTypeValue = map[string]ChangeType{",
  (string) (len=59) "\t_ChangeTypeName[0:6]:                    ChangeTypeCreate,",
  (string) (len=59) "\tstrings.ToLower(_ChangeTypeName[0:6]):   ChangeTypeCreate,",
  (string) (len=59) "\t_ChangeTypeName[6:12]:                   ChangeTypeUpdate,",
  (string) (len=59) "\tstrings.ToLower(_ChangeTypeName[6:12]):  ChangeTypeUpdate,",
  (string) (len=59) "\t_ChangeTypeName[12:18]:                  ChangeTypeDelete,",
  (string) (len=59) "\tstrings.ToLower(_ChangeTypeName[12:18]): ChangeTypeDelete,",
  (string) (len=1) "}",
  (string) "",
  (string) (len=64) "// ParseChangeType attempts to convert a string to a ChangeType.",
  (string) (len=55) "func ParseChangeType(name string) (ChangeType, error) {",
  (string) (len=41) "\tif x, ok := _ChangeTypeValue[name]; ok {",
  (string) (len=15) "\t\treturn x, nil",
  (string) (len=2) "\t}",
  (string) (len=121) "\t// Case insensitive parse, do a separate lookup to prevent unnecessary cost of lowercasing a string if we don't need to.",
  (string) (len=58) "\tif x, ok := _ChangeTypeValue[strings.ToLower(name)]; ok {",
  (string) (len=15) "\t\treturn x, nil",
  (string) (len=2) "\t}",
  (string) (len=119) "\treturn ChangeType(0), fmt.Errorf(\"%s is not a valid ChangeType, try [%s]\", name, strings.Join(_ChangeTypeNames, \", \"))",
  (string) (len=1) "}",
  (string) "",
  (string) (len=85) "// MustParseChangeType converts a string to a ChangeType, and panics if is not valid.",
  (string) (len=50) "func MustParseChangeType(name string) ChangeType {",
  (string) (len=34) "\tval, err := ParseChangeType(name)",
  (string) (len=16) "\tif err != nil {",
  (string) (len=12) "\t\tpanic(err)",
  (string) (len=2) "\t}",
  (string) (len=11) "\treturn val",
  (string) (len=1) "}",
  (string) "",
  (string) (len=53) "// MarshalText implements the text marshaller method.",
  (string) (len=51) "func (x ChangeType) MarshalText() ([]byte, error) {",
  (string) (len=31) "\treturn []byte(x.String()), nil",
  (string) (len=1) "}",
  (string) "",
  (string) (len=57) "// UnmarshalText implements the text unmarshaller method.",
  (string) (len=55) "func (x *ChangeType) UnmarshalText(text []byte) error {",
  (string) (len=21) "\tname := string(text)",
  (string) (len=34) "\ttmp, err := ParseChangeType(name)",
  (string) (len=16) "\tif err != nil {",
  (string) (len=12) "\t\treturn err",
  (string) (len=2) "\t}",
  (string) (len=9) "\t*x = tmp",
  (string) (len=11) "\treturn nil",
  (string) (len=1) "}",
  (string) "",
  (string) (len=96) "var errChangeTypeNilPtr = errors.New(\"value pointer is nil\") // one per type for package clashes",
  (string) "",
  (string) (len=41) "// Scan implements the Scanner interface.",
  (string) (len=58) "func (x *ChangeType) Scan(value interface{}) (err error) {",
  (string) (len=18) "\tif value == nil {",
  (string) (len=20) "\t\t*x = ChangeType(0)",
  (string) (len=8) "\t\treturn",
  (string) (len=2) "\t}",
  (string) "",
  (string) (len=37) "\t// A wider range of scannable types.",
  (string) (len=61) "\t// driver.Value values at the top of the list for expediency",
  (string) (len=27) "\tswitch v := value.(type) {",
  (string) (len=12) "\tcase int64:",
  (string) (len=20) "\t\t*x = ChangeType(v)",
  (string) (len=13) "\tcase string:",
  (string) (len=30) "\t\t*x, err = ParseChangeType(v)",
  (string) (len=13) "\tcase []byte:",
  (string) (len=38) "\t\t*x, err = ParseChangeType(string(v))",
  (string) (len=17) "\tcase ChangeType:",
  (string) (len=8) "\t\t*x = v",
  (string) (len=10) "\tcase int:",
  (string) (len=20) "\t\t*x = ChangeType(v)",
  (string) (len=18) "\tcase *ChangeType:",
  (string) (len=15) "\t\tif v == nil {",
  (string) (len=29) "\t\t\treturn errChangeTypeNilPtr",
  (string) (len=3) "\t\t}",
  (string) (len=9) "\t\t*x = *v",
  (string) (len=11) "\tcase uint:",
  (string) (len=20) "\t\t*x = ChangeType(v)",
  (string) (len=13) "\tcase uint64:",
  (string) (len=20) "\t\t*x = ChangeType(v)",
  (string) (len=11) "\tcase *int:",
  (string) (len=15) "\t\tif v == nil {",
  (string) (len=29) "\t\t\treturn errChangeTypeNilPtr",
  (string) (len=3) "\t\t}",
  (string) (len=21) "\t\t*x = ChangeType(*v)",
  (string) (len=13) "\tcase *int64:",
  (string) (len=15) "\t\tif v == nil {",
  (string) (len=29) "\t\t\treturn errChangeTypeNilPtr",
  (string) (len=3) "\t\t}",
  (string) (len=21) "\t\t*x = ChangeType(*v)",
  (string) (len=72) "\tcase float64: // json marshals everything as a float64 if it's a number",
  (string) (len=20) "\t\t*x = ChangeType(v)",
  (string) (len=73) "\tcase *float64: // json marshals everything as a float64 if it's a number",
  (string) (len=15) "\t\tif v == nil {",
  (string) (len=29) "\t\t\treturn errChangeTypeNilPtr",
  (string) (len=3) "\t\t}",
  (string) (len=21) "\t\t*x = ChangeType(*v)",
  (string) (len=12) "\tcase *uint:",
  (string) (len=15) "\t\tif v == nil {",
  (string) (len=29) "\t\t\treturn errChangeTypeNilPtr",
  (string) (len=3) "\t\t}",
  (string) (len=21) "\t\t*x = ChangeType(*v)",
  (string) (len=14) "\tcase *uint64:",
  (string) (len=15) "\t\tif v == nil {",
  (string) (len=29) "\t\t\treturn errChangeTypeNilPtr",
  (string) (len=3) "\t\t}",
  (string) (len=21) "\t\t*x = ChangeType(*v)",
  (string) (len=14) "\tcase *string:",
  (string) (len=15) "\t\tif v == nil {",
  (string) (len=29) "\t\t\treturn errChangeTypeNilPtr",
  (string) (len=3) "\t\t}",
  (string) (len=31) "\t\t*x, err = ParseChangeType(*v)",
  (string) (len=2) "\t}",
  (string) "",
  (string) (len=7) "\treturn",
  (string) (len=1) "}",
  (string) "",
  (string) (len=48) "// Value implements the driver Valuer interface.",
  (string) (len=51) "func (x ChangeType) Value() (driver.Value, error) {",
  (string) (len=23) "\treturn x.String(), nil",
  (string) (len=1) "}",
  (string) "",
  (string) (len=22) "// Additional template",
  (string) (len=36) "func ParseChangeTypeExample() bool {",
  (string) (len=12) "\treturn true",
  (string) (len=1) "}",
  (string) ""
}
