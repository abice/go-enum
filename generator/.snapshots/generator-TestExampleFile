([]string) (len=199) {
  (string) (len=28) "// Code generated by go-enum",
  (string) (len=15) "// DO NOT EDIT!",
  (string) "",
  (string) (len=17) "package generator",
  (string) "",
  (string) (len=8) "import (",
  (string) (len=6) "\t\"fmt\"",
  (string) (len=10) "\t\"strings\"",
  (string) (len=1) ")",
  (string) "",
  (string) (len=7) "const (",
  (string) (len=37) "\t// AnimalCat is a Animal of type Cat",
  (string) (len=24) "\tAnimalCat Animal = iota",
  (string) (len=37) "\t// AnimalDog is a Animal of type Dog",
  (string) (len=10) "\tAnimalDog",
  (string) (len=39) "\t// AnimalFish is a Animal of type Fish",
  (string) (len=11) "\tAnimalFish",
  (string) (len=1) ")",
  (string) "",
  (string) (len=32) "const _AnimalName = \"CatDogFish\"",
  (string) "",
  (string) (len=35) "var _AnimalMap = map[Animal]string{",
  (string) (len=21) "\t0: _AnimalName[0:3],",
  (string) (len=21) "\t1: _AnimalName[3:6],",
  (string) (len=22) "\t2: _AnimalName[6:10],",
  (string) (len=1) "}",
  (string) "",
  (string) (len=33) "func (i Animal) String() string {",
  (string) (len=34) "\tif str, ok := _AnimalMap[i]; ok {",
  (string) (len=12) "\t\treturn str",
  (string) (len=2) "\t}",
  (string) (len=36) "\treturn fmt.Sprintf(\"Animal(%d)\", i)",
  (string) (len=1) "}",
  (string) "",
  (string) (len=37) "var _AnimalValue = map[string]Animal{",
  (string) (len=39) "\t_AnimalName[0:3]:                   0,",
  (string) (len=39) "\tstrings.ToLower(_AnimalName[0:3]):  0,",
  (string) (len=39) "\t_AnimalName[3:6]:                   1,",
  (string) (len=39) "\tstrings.ToLower(_AnimalName[3:6]):  1,",
  (string) (len=39) "\t_AnimalName[6:10]:                  2,",
  (string) (len=39) "\tstrings.ToLower(_AnimalName[6:10]): 2,",
  (string) (len=1) "}",
  (string) "",
  (string) (len=55) "// ParseAnimal attempts to convert a string to a Animal",
  (string) (len=47) "func ParseAnimal(name string) (Animal, error) {",
  (string) (len=37) "\tif x, ok := _AnimalValue[name]; ok {",
  (string) (len=23) "\t\treturn Animal(x), nil",
  (string) (len=2) "\t}",
  (string) (len=63) "\treturn Animal(0), fmt.Errorf(\"%s is not a valid Animal\", name)",
  (string) (len=1) "}",
  (string) "",
  (string) (len=48) "func (x *Animal) MarshalText() ([]byte, error) {",
  (string) (len=31) "\treturn []byte(x.String()), nil",
  (string) (len=1) "}",
  (string) "",
  (string) (len=51) "func (x *Animal) UnmarshalText(text []byte) error {",
  (string) (len=21) "\tname := string(text)",
  (string) (len=30) "\ttmp, err := ParseAnimal(name)",
  (string) (len=16) "\tif err != nil {",
  (string) (len=12) "\t\treturn err",
  (string) (len=2) "\t}",
  (string) (len=9) "\t*x = tmp",
  (string) (len=11) "\treturn nil",
  (string) (len=1) "}",
  (string) "",
  (string) (len=7) "const (",
  (string) (len=39) "\t// ColorBlack is a Color of type Black",
  (string) (len=24) "\tColorBlack Color = iota",
  (string) (len=39) "\t// ColorWhite is a Color of type White",
  (string) (len=11) "\tColorWhite",
  (string) (len=35) "\t// ColorRed is a Color of type Red",
  (string) (len=9) "\tColorRed",
  (string) (len=39) "\t// ColorGreen is a Color of type Green",
  (string) (len=11) "\tColorGreen",
  (string) (len=37) "\t// ColorBlue is a Color of type Blue",
  (string) (len=28) "\tColorBlue Color = iota + 29",
  (string) (len=37) "\t// ColorGrey is a Color of type Grey",
  (string) (len=28) "\tColorGrey Color = iota + 29",
  (string) (len=41) "\t// ColorYellow is a Color of type Yellow",
  (string) (len=30) "\tColorYellow Color = iota + 29",
  (string) (len=1) ")",
  (string) "",
  (string) (len=53) "const _ColorName = \"BlackWhiteRedGreenBlueGreyYellow\"",
  (string) "",
  (string) (len=33) "var _ColorMap = map[Color]string{",
  (string) (len=21) "\t0:  _ColorName[0:5],",
  (string) (len=22) "\t1:  _ColorName[5:10],",
  (string) (len=23) "\t2:  _ColorName[10:13],",
  (string) (len=23) "\t3:  _ColorName[13:18],",
  (string) (len=23) "\t33: _ColorName[18:22],",
  (string) (len=23) "\t34: _ColorName[22:26],",
  (string) (len=23) "\t35: _ColorName[26:32],",
  (string) (len=1) "}",
  (string) "",
  (string) (len=32) "func (i Color) String() string {",
  (string) (len=33) "\tif str, ok := _ColorMap[i]; ok {",
  (string) (len=12) "\t\treturn str",
  (string) (len=2) "\t}",
  (string) (len=35) "\treturn fmt.Sprintf(\"Color(%d)\", i)",
  (string) (len=1) "}",
  (string) "",
  (string) (len=35) "var _ColorValue = map[string]Color{",
  (string) (len=39) "\t_ColorName[0:5]:                    0,",
  (string) (len=39) "\tstrings.ToLower(_ColorName[0:5]):   0,",
  (string) (len=39) "\t_ColorName[5:10]:                   1,",
  (string) (len=39) "\tstrings.ToLower(_ColorName[5:10]):  1,",
  (string) (len=39) "\t_ColorName[10:13]:                  2,",
  (string) (len=39) "\tstrings.ToLower(_ColorName[10:13]): 2,",
  (string) (len=39) "\t_ColorName[13:18]:                  3,",
  (string) (len=39) "\tstrings.ToLower(_ColorName[13:18]): 3,",
  (string) (len=40) "\t_ColorName[18:22]:                  33,",
  (string) (len=40) "\tstrings.ToLower(_ColorName[18:22]): 33,",
  (string) (len=40) "\t_ColorName[22:26]:                  34,",
  (string) (len=40) "\tstrings.ToLower(_ColorName[22:26]): 34,",
  (string) (len=40) "\t_ColorName[26:32]:                  35,",
  (string) (len=40) "\tstrings.ToLower(_ColorName[26:32]): 35,",
  (string) (len=1) "}",
  (string) "",
  (string) (len=53) "// ParseColor attempts to convert a string to a Color",
  (string) (len=45) "func ParseColor(name string) (Color, error) {",
  (string) (len=36) "\tif x, ok := _ColorValue[name]; ok {",
  (string) (len=22) "\t\treturn Color(x), nil",
  (string) (len=2) "\t}",
  (string) (len=61) "\treturn Color(0), fmt.Errorf(\"%s is not a valid Color\", name)",
  (string) (len=1) "}",
  (string) "",
  (string) (len=47) "func (x *Color) MarshalText() ([]byte, error) {",
  (string) (len=31) "\treturn []byte(x.String()), nil",
  (string) (len=1) "}",
  (string) "",
  (string) (len=50) "func (x *Color) UnmarshalText(text []byte) error {",
  (string) (len=21) "\tname := string(text)",
  (string) (len=29) "\ttmp, err := ParseColor(name)",
  (string) (len=16) "\tif err != nil {",
  (string) (len=12) "\t\treturn err",
  (string) (len=2) "\t}",
  (string) (len=9) "\t*x = tmp",
  (string) (len=11) "\treturn nil",
  (string) (len=1) "}",
  (string) "",
  (string) (len=7) "const (",
  (string) (len=41) "\t// ModelToyota is a Model of type Toyota",
  (string) (len=25) "\tModelToyota Model = iota",
  (string) (len=17) "\t// Skipped value",
  (string) (len=2) "\t_",
  (string) (len=39) "\t// ModelChevy is a Model of type Chevy",
  (string) (len=11) "\tModelChevy",
  (string) (len=17) "\t// Skipped value",
  (string) (len=2) "\t_",
  (string) (len=37) "\t// ModelFord is a Model of type Ford",
  (string) (len=10) "\tModelFord",
  (string) (len=1) ")",
  (string) "",
  (string) (len=36) "const _ModelName = \"ToyotaChevyFord\"",
  (string) "",
  (string) (len=33) "var _ModelMap = map[Model]string{",
  (string) (len=20) "\t0: _ModelName[0:6],",
  (string) (len=21) "\t2: _ModelName[6:11],",
  (string) (len=22) "\t4: _ModelName[11:15],",
  (string) (len=1) "}",
  (string) "",
  (string) (len=32) "func (i Model) String() string {",
  (string) (len=33) "\tif str, ok := _ModelMap[i]; ok {",
  (string) (len=12) "\t\treturn str",
  (string) (len=2) "\t}",
  (string) (len=35) "\treturn fmt.Sprintf(\"Model(%d)\", i)",
  (string) (len=1) "}",
  (string) "",
  (string) (len=35) "var _ModelValue = map[string]Model{",
  (string) (len=39) "\t_ModelName[0:6]:                    0,",
  (string) (len=39) "\tstrings.ToLower(_ModelName[0:6]):   0,",
  (string) (len=39) "\t_ModelName[6:11]:                   2,",
  (string) (len=39) "\tstrings.ToLower(_ModelName[6:11]):  2,",
  (string) (len=39) "\t_ModelName[11:15]:                  4,",
  (string) (len=39) "\tstrings.ToLower(_ModelName[11:15]): 4,",
  (string) (len=1) "}",
  (string) "",
  (string) (len=53) "// ParseModel attempts to convert a string to a Model",
  (string) (len=45) "func ParseModel(name string) (Model, error) {",
  (string) (len=36) "\tif x, ok := _ModelValue[name]; ok {",
  (string) (len=22) "\t\treturn Model(x), nil",
  (string) (len=2) "\t}",
  (string) (len=61) "\treturn Model(0), fmt.Errorf(\"%s is not a valid Model\", name)",
  (string) (len=1) "}",
  (string) "",
  (string) (len=47) "func (x *Model) MarshalText() ([]byte, error) {",
  (string) (len=31) "\treturn []byte(x.String()), nil",
  (string) (len=1) "}",
  (string) "",
  (string) (len=50) "func (x *Model) UnmarshalText(text []byte) error {",
  (string) (len=21) "\tname := string(text)",
  (string) (len=29) "\ttmp, err := ParseModel(name)",
  (string) (len=16) "\tif err != nil {",
  (string) (len=12) "\t\treturn err",
  (string) (len=2) "\t}",
  (string) (len=9) "\t*x = tmp",
  (string) (len=11) "\treturn nil",
  (string) (len=1) "}",
  (string) ""
}
