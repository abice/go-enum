([]string) (len=1125) {
  (string) (len=28) "// Code generated by go-enum",
  (string) (len=15) "// DO NOT EDIT!",
  (string) "",
  (string) (len=17) "package generator",
  (string) "",
  (string) (len=8) "import (",
  (string) (len=22) "\t\"database/sql/driver\"",
  (string) (len=6) "\t\"fmt\"",
  (string) (len=10) "\t\"strings\"",
  (string) (len=1) ")",
  (string) "",
  (string) (len=7) "const (",
  (string) (len=37) "\t// AnimalCat is a Animal of type Cat",
  (string) (len=24) "\tAnimalCat Animal = iota",
  (string) (len=37) "\t// AnimalDog is a Animal of type Dog",
  (string) (len=10) "\tAnimalDog",
  (string) (len=39) "\t// AnimalFish is a Animal of type Fish",
  (string) (len=11) "\tAnimalFish",
  (string) (len=1) ")",
  (string) "",
  (string) (len=32) "const _AnimalName = \"CatDogFish\"",
  (string) "",
  (string) (len=28) "var _AnimalNames = []string{",
  (string) (len=18) "\t_AnimalName[0:3],",
  (string) (len=18) "\t_AnimalName[3:6],",
  (string) (len=19) "\t_AnimalName[6:10],",
  (string) (len=1) "}",
  (string) "",
  (string) (len=66) "// AnimalNames returns a list of possible string values of Animal.",
  (string) (len=29) "func AnimalNames() []string {",
  (string) (len=41) "\ttmp := make([]string, len(_AnimalNames))",
  (string) (len=24) "\tcopy(tmp, _AnimalNames)",
  (string) (len=11) "\treturn tmp",
  (string) (len=1) "}",
  (string) "",
  (string) (len=35) "var _AnimalMap = map[Animal]string{",
  (string) (len=21) "\t0: _AnimalName[0:3],",
  (string) (len=21) "\t1: _AnimalName[3:6],",
  (string) (len=22) "\t2: _AnimalName[6:10],",
  (string) (len=1) "}",
  (string) "",
  (string) (len=44) "// String implements the Stringer interface.",
  (string) (len=33) "func (x Animal) String() string {",
  (string) (len=34) "\tif str, ok := _AnimalMap[x]; ok {",
  (string) (len=12) "\t\treturn str",
  (string) (len=2) "\t}",
  (string) (len=36) "\treturn fmt.Sprintf(\"Animal(%d)\", x)",
  (string) (len=1) "}",
  (string) "",
  (string) (len=37) "var _AnimalValue = map[string]Animal{",
  (string) (len=39) "\t_AnimalName[0:3]:                   0,",
  (string) (len=39) "\tstrings.ToLower(_AnimalName[0:3]):  0,",
  (string) (len=39) "\t_AnimalName[3:6]:                   1,",
  (string) (len=39) "\tstrings.ToLower(_AnimalName[3:6]):  1,",
  (string) (len=39) "\t_AnimalName[6:10]:                  2,",
  (string) (len=39) "\tstrings.ToLower(_AnimalName[6:10]): 2,",
  (string) (len=1) "}",
  (string) "",
  (string) (len=55) "// ParseAnimal attempts to convert a string to a Animal",
  (string) (len=47) "func ParseAnimal(name string) (Animal, error) {",
  (string) (len=37) "\tif x, ok := _AnimalValue[name]; ok {",
  (string) (len=15) "\t\treturn x, nil",
  (string) (len=2) "\t}",
  (string) (len=107) "\treturn Animal(0), fmt.Errorf(\"%s is not a valid Animal, try [%s]\", name, strings.Join(_AnimalNames, \", \"))",
  (string) (len=1) "}",
  (string) "",
  (string) (len=52) "// MarshalText implements the text marshaller method",
  (string) (len=48) "func (x *Animal) MarshalText() ([]byte, error) {",
  (string) (len=31) "\treturn []byte(x.String()), nil",
  (string) (len=1) "}",
  (string) "",
  (string) (len=56) "// UnmarshalText implements the text unmarshaller method",
  (string) (len=51) "func (x *Animal) UnmarshalText(text []byte) error {",
  (string) (len=21) "\tname := string(text)",
  (string) (len=30) "\ttmp, err := ParseAnimal(name)",
  (string) (len=16) "\tif err != nil {",
  (string) (len=12) "\t\treturn err",
  (string) (len=2) "\t}",
  (string) (len=9) "\t*x = tmp",
  (string) (len=11) "\treturn nil",
  (string) (len=1) "}",
  (string) "",
  (string) (len=41) "// Scan implements the Scanner interface.",
  (string) (len=48) "func (x *Animal) Scan(value interface{}) error {",
  (string) (len=16) "\tvar name string",
  (string) "",
  (string) (len=27) "\tswitch v := value.(type) {",
  (string) (len=13) "\tcase string:",
  (string) (len=10) "\t\tname = v",
  (string) (len=13) "\tcase []byte:",
  (string) (len=18) "\t\tname = string(v)",
  (string) (len=10) "\tcase nil:",
  (string) (len=16) "\t\t*x = Animal(0)",
  (string) (len=12) "\t\treturn nil",
  (string) (len=2) "\t}",
  (string) "",
  (string) (len=30) "\ttmp, err := ParseAnimal(name)",
  (string) (len=16) "\tif err != nil {",
  (string) (len=12) "\t\treturn err",
  (string) (len=2) "\t}",
  (string) (len=9) "\t*x = tmp",
  (string) (len=11) "\treturn nil",
  (string) (len=1) "}",
  (string) "",
  (string) (len=48) "// Value implements the driver Valuer interface.",
  (string) (len=47) "func (x Animal) Value() (driver.Value, error) {",
  (string) (len=23) "\treturn x.String(), nil",
  (string) (len=1) "}",
  (string) "",
  (string) (len=7) "const (",
  (string) (len=49) "\t// CasesTest_lower is a Cases of type Test_lower",
  (string) (len=29) "\tCasesTest_lower Cases = iota",
  (string) (len=53) "\t// CasesTest_capital is a Cases of type Test_capital",
  (string) (len=18) "\tCasesTest_capital",
  (string) (len=71) "\t// CasesAnotherLowerCaseStart is a Cases of type AnotherLowerCaseStart",
  (string) (len=27) "\tCasesAnotherLowerCaseStart",
  (string) (len=1) ")",
  (string) "",
  (string) (len=64) "const _CasesName = \"test_lowerTest_capitalanotherLowerCaseStart\"",
  (string) "",
  (string) (len=27) "var _CasesNames = []string{",
  (string) (len=18) "\t_CasesName[0:10],",
  (string) (len=19) "\t_CasesName[10:22],",
  (string) (len=19) "\t_CasesName[22:43],",
  (string) (len=1) "}",
  (string) "",
  (string) (len=64) "// CasesNames returns a list of possible string values of Cases.",
  (string) (len=28) "func CasesNames() []string {",
  (string) (len=40) "\ttmp := make([]string, len(_CasesNames))",
  (string) (len=23) "\tcopy(tmp, _CasesNames)",
  (string) (len=11) "\treturn tmp",
  (string) (len=1) "}",
  (string) "",
  (string) (len=33) "var _CasesMap = map[Cases]string{",
  (string) (len=21) "\t0: _CasesName[0:10],",
  (string) (len=22) "\t1: _CasesName[10:22],",
  (string) (len=22) "\t2: _CasesName[22:43],",
  (string) (len=1) "}",
  (string) "",
  (string) (len=44) "// String implements the Stringer interface.",
  (string) (len=32) "func (x Cases) String() string {",
  (string) (len=33) "\tif str, ok := _CasesMap[x]; ok {",
  (string) (len=12) "\t\treturn str",
  (string) (len=2) "\t}",
  (string) (len=35) "\treturn fmt.Sprintf(\"Cases(%d)\", x)",
  (string) (len=1) "}",
  (string) "",
  (string) (len=35) "var _CasesValue = map[string]Cases{",
  (string) (len=39) "\t_CasesName[0:10]:                   0,",
  (string) (len=39) "\tstrings.ToLower(_CasesName[0:10]):  0,",
  (string) (len=39) "\t_CasesName[10:22]:                  1,",
  (string) (len=39) "\tstrings.ToLower(_CasesName[10:22]): 1,",
  (string) (len=39) "\t_CasesName[22:43]:                  2,",
  (string) (len=39) "\tstrings.ToLower(_CasesName[22:43]): 2,",
  (string) (len=1) "}",
  (string) "",
  (string) (len=53) "// ParseCases attempts to convert a string to a Cases",
  (string) (len=45) "func ParseCases(name string) (Cases, error) {",
  (string) (len=36) "\tif x, ok := _CasesValue[name]; ok {",
  (string) (len=15) "\t\treturn x, nil",
  (string) (len=2) "\t}",
  (string) (len=104) "\treturn Cases(0), fmt.Errorf(\"%s is not a valid Cases, try [%s]\", name, strings.Join(_CasesNames, \", \"))",
  (string) (len=1) "}",
  (string) "",
  (string) (len=52) "// MarshalText implements the text marshaller method",
  (string) (len=47) "func (x *Cases) MarshalText() ([]byte, error) {",
  (string) (len=31) "\treturn []byte(x.String()), nil",
  (string) (len=1) "}",
  (string) "",
  (string) (len=56) "// UnmarshalText implements the text unmarshaller method",
  (string) (len=50) "func (x *Cases) UnmarshalText(text []byte) error {",
  (string) (len=21) "\tname := string(text)",
  (string) (len=29) "\ttmp, err := ParseCases(name)",
  (string) (len=16) "\tif err != nil {",
  (string) (len=12) "\t\treturn err",
  (string) (len=2) "\t}",
  (string) (len=9) "\t*x = tmp",
  (string) (len=11) "\treturn nil",
  (string) (len=1) "}",
  (string) "",
  (string) (len=41) "// Scan implements the Scanner interface.",
  (string) (len=47) "func (x *Cases) Scan(value interface{}) error {",
  (string) (len=16) "\tvar name string",
  (string) "",
  (string) (len=27) "\tswitch v := value.(type) {",
  (string) (len=13) "\tcase string:",
  (string) (len=10) "\t\tname = v",
  (string) (len=13) "\tcase []byte:",
  (string) (len=18) "\t\tname = string(v)",
  (string) (len=10) "\tcase nil:",
  (string) (len=15) "\t\t*x = Cases(0)",
  (string) (len=12) "\t\treturn nil",
  (string) (len=2) "\t}",
  (string) "",
  (string) (len=29) "\ttmp, err := ParseCases(name)",
  (string) (len=16) "\tif err != nil {",
  (string) (len=12) "\t\treturn err",
  (string) (len=2) "\t}",
  (string) (len=9) "\t*x = tmp",
  (string) (len=11) "\treturn nil",
  (string) (len=1) "}",
  (string) "",
  (string) (len=48) "// Value implements the driver Valuer interface.",
  (string) (len=46) "func (x Cases) Value() (driver.Value, error) {",
  (string) (len=23) "\treturn x.String(), nil",
  (string) (len=1) "}",
  (string) "",
  (string) (len=7) "const (",
  (string) (len=39) "\t// ColorBlack is a Color of type Black",
  (string) (len=24) "\tColorBlack Color = iota",
  (string) (len=39) "\t// ColorWhite is a Color of type White",
  (string) (len=11) "\tColorWhite",
  (string) (len=35) "\t// ColorRed is a Color of type Red",
  (string) (len=9) "\tColorRed",
  (string) (len=39) "\t// ColorGreen is a Color of type Green",
  (string) (len=11) "\tColorGreen",
  (string) (len=37) "\t// ColorBlue is a Color of type Blue",
  (string) (len=28) "\tColorBlue Color = iota + 29",
  (string) (len=37) "\t// ColorGrey is a Color of type Grey",
  (string) (len=10) "\tColorGrey",
  (string) (len=41) "\t// ColorYellow is a Color of type Yellow",
  (string) (len=12) "\tColorYellow",
  (string) (len=1) ")",
  (string) "",
  (string) (len=53) "const _ColorName = \"BlackWhiteRedGreenBluegreyyellow\"",
  (string) "",
  (string) (len=27) "var _ColorNames = []string{",
  (string) (len=17) "\t_ColorName[0:5],",
  (string) (len=18) "\t_ColorName[5:10],",
  (string) (len=19) "\t_ColorName[10:13],",
  (string) (len=19) "\t_ColorName[13:18],",
  (string) (len=19) "\t_ColorName[18:22],",
  (string) (len=19) "\t_ColorName[22:26],",
  (string) (len=19) "\t_ColorName[26:32],",
  (string) (len=1) "}",
  (string) "",
  (string) (len=64) "// ColorNames returns a list of possible string values of Color.",
  (string) (len=28) "func ColorNames() []string {",
  (string) (len=40) "\ttmp := make([]string, len(_ColorNames))",
  (string) (len=23) "\tcopy(tmp, _ColorNames)",
  (string) (len=11) "\treturn tmp",
  (string) (len=1) "}",
  (string) "",
  (string) (len=33) "var _ColorMap = map[Color]string{",
  (string) (len=21) "\t0:  _ColorName[0:5],",
  (string) (len=22) "\t1:  _ColorName[5:10],",
  (string) (len=23) "\t2:  _ColorName[10:13],",
  (string) (len=23) "\t3:  _ColorName[13:18],",
  (string) (len=23) "\t33: _ColorName[18:22],",
  (string) (len=23) "\t34: _ColorName[22:26],",
  (string) (len=23) "\t35: _ColorName[26:32],",
  (string) (len=1) "}",
  (string) "",
  (string) (len=44) "// String implements the Stringer interface.",
  (string) (len=32) "func (x Color) String() string {",
  (string) (len=33) "\tif str, ok := _ColorMap[x]; ok {",
  (string) (len=12) "\t\treturn str",
  (string) (len=2) "\t}",
  (string) (len=35) "\treturn fmt.Sprintf(\"Color(%d)\", x)",
  (string) (len=1) "}",
  (string) "",
  (string) (len=35) "var _ColorValue = map[string]Color{",
  (string) (len=39) "\t_ColorName[0:5]:                    0,",
  (string) (len=39) "\tstrings.ToLower(_ColorName[0:5]):   0,",
  (string) (len=39) "\t_ColorName[5:10]:                   1,",
  (string) (len=39) "\tstrings.ToLower(_ColorName[5:10]):  1,",
  (string) (len=39) "\t_ColorName[10:13]:                  2,",
  (string) (len=39) "\tstrings.ToLower(_ColorName[10:13]): 2,",
  (string) (len=39) "\t_ColorName[13:18]:                  3,",
  (string) (len=39) "\tstrings.ToLower(_ColorName[13:18]): 3,",
  (string) (len=40) "\t_ColorName[18:22]:                  33,",
  (string) (len=40) "\tstrings.ToLower(_ColorName[18:22]): 33,",
  (string) (len=40) "\t_ColorName[22:26]:                  34,",
  (string) (len=40) "\tstrings.ToLower(_ColorName[22:26]): 34,",
  (string) (len=40) "\t_ColorName[26:32]:                  35,",
  (string) (len=40) "\tstrings.ToLower(_ColorName[26:32]): 35,",
  (string) (len=1) "}",
  (string) "",
  (string) (len=53) "// ParseColor attempts to convert a string to a Color",
  (string) (len=45) "func ParseColor(name string) (Color, error) {",
  (string) (len=36) "\tif x, ok := _ColorValue[name]; ok {",
  (string) (len=15) "\t\treturn x, nil",
  (string) (len=2) "\t}",
  (string) (len=104) "\treturn Color(0), fmt.Errorf(\"%s is not a valid Color, try [%s]\", name, strings.Join(_ColorNames, \", \"))",
  (string) (len=1) "}",
  (string) "",
  (string) (len=52) "// MarshalText implements the text marshaller method",
  (string) (len=47) "func (x *Color) MarshalText() ([]byte, error) {",
  (string) (len=31) "\treturn []byte(x.String()), nil",
  (string) (len=1) "}",
  (string) "",
  (string) (len=56) "// UnmarshalText implements the text unmarshaller method",
  (string) (len=50) "func (x *Color) UnmarshalText(text []byte) error {",
  (string) (len=21) "\tname := string(text)",
  (string) (len=29) "\ttmp, err := ParseColor(name)",
  (string) (len=16) "\tif err != nil {",
  (string) (len=12) "\t\treturn err",
  (string) (len=2) "\t}",
  (string) (len=9) "\t*x = tmp",
  (string) (len=11) "\treturn nil",
  (string) (len=1) "}",
  (string) "",
  (string) (len=41) "// Scan implements the Scanner interface.",
  (string) (len=47) "func (x *Color) Scan(value interface{}) error {",
  (string) (len=16) "\tvar name string",
  (string) "",
  (string) (len=27) "\tswitch v := value.(type) {",
  (string) (len=13) "\tcase string:",
  (string) (len=10) "\t\tname = v",
  (string) (len=13) "\tcase []byte:",
  (string) (len=18) "\t\tname = string(v)",
  (string) (len=10) "\tcase nil:",
  (string) (len=15) "\t\t*x = Color(0)",
  (string) (len=12) "\t\treturn nil",
  (string) (len=2) "\t}",
  (string) "",
  (string) (len=29) "\ttmp, err := ParseColor(name)",
  (string) (len=16) "\tif err != nil {",
  (string) (len=12) "\t\treturn err",
  (string) (len=2) "\t}",
  (string) (len=9) "\t*x = tmp",
  (string) (len=11) "\treturn nil",
  (string) (len=1) "}",
  (string) "",
  (string) (len=48) "// Value implements the driver Valuer interface.",
  (string) (len=46) "func (x Color) Value() (driver.Value, error) {",
  (string) (len=23) "\treturn x.String(), nil",
  (string) (len=1) "}",
  (string) "",
  (string) (len=7) "const (",
  (string) (len=61) "\t// ColorWithCommentBlack is a ColorWithComment of type Black",
  (string) (len=46) "\tColorWithCommentBlack ColorWithComment = iota",
  (string) (len=61) "\t// ColorWithCommentWhite is a ColorWithComment of type White",
  (string) (len=22) "\tColorWithCommentWhite",
  (string) (len=57) "\t// ColorWithCommentRed is a ColorWithComment of type Red",
  (string) (len=20) "\tColorWithCommentRed",
  (string) (len=61) "\t// ColorWithCommentGreen is a ColorWithComment of type Green",
  (string) (len=22) "\tColorWithCommentGreen",
  (string) (len=59) "\t// ColorWithCommentBlue is a ColorWithComment of type Blue",
  (string) (len=23) "\t// Blue starts with 33",
  (string) (len=50) "\tColorWithCommentBlue ColorWithComment = iota + 29",
  (string) (len=59) "\t// ColorWithCommentGrey is a ColorWithComment of type Grey",
  (string) (len=21) "\tColorWithCommentGrey",
  (string) (len=63) "\t// ColorWithCommentYellow is a ColorWithComment of type Yellow",
  (string) (len=23) "\tColorWithCommentYellow",
  (string) (len=1) ")",
  (string) "",
  (string) (len=64) "const _ColorWithCommentName = \"BlackWhiteRedGreenBluegreyyellow\"",
  (string) "",
  (string) (len=38) "var _ColorWithCommentNames = []string{",
  (string) (len=28) "\t_ColorWithCommentName[0:5],",
  (string) (len=29) "\t_ColorWithCommentName[5:10],",
  (string) (len=30) "\t_ColorWithCommentName[10:13],",
  (string) (len=30) "\t_ColorWithCommentName[13:18],",
  (string) (len=30) "\t_ColorWithCommentName[18:22],",
  (string) (len=30) "\t_ColorWithCommentName[22:26],",
  (string) (len=30) "\t_ColorWithCommentName[26:32],",
  (string) (len=1) "}",
  (string) "",
  (string) (len=86) "// ColorWithCommentNames returns a list of possible string values of ColorWithComment.",
  (string) (len=39) "func ColorWithCommentNames() []string {",
  (string) (len=51) "\ttmp := make([]string, len(_ColorWithCommentNames))",
  (string) (len=34) "\tcopy(tmp, _ColorWithCommentNames)",
  (string) (len=11) "\treturn tmp",
  (string) (len=1) "}",
  (string) "",
  (string) (len=55) "var _ColorWithCommentMap = map[ColorWithComment]string{",
  (string) (len=32) "\t0:  _ColorWithCommentName[0:5],",
  (string) (len=33) "\t1:  _ColorWithCommentName[5:10],",
  (string) (len=34) "\t2:  _ColorWithCommentName[10:13],",
  (string) (len=34) "\t3:  _ColorWithCommentName[13:18],",
  (string) (len=34) "\t33: _ColorWithCommentName[18:22],",
  (string) (len=34) "\t34: _ColorWithCommentName[22:26],",
  (string) (len=34) "\t35: _ColorWithCommentName[26:32],",
  (string) (len=1) "}",
  (string) "",
  (string) (len=44) "// String implements the Stringer interface.",
  (string) (len=43) "func (x ColorWithComment) String() string {",
  (string) (len=44) "\tif str, ok := _ColorWithCommentMap[x]; ok {",
  (string) (len=12) "\t\treturn str",
  (string) (len=2) "\t}",
  (string) (len=46) "\treturn fmt.Sprintf(\"ColorWithComment(%d)\", x)",
  (string) (len=1) "}",
  (string) "",
  (string) (len=57) "var _ColorWithCommentValue = map[string]ColorWithComment{",
  (string) (len=50) "\t_ColorWithCommentName[0:5]:                    0,",
  (string) (len=50) "\tstrings.ToLower(_ColorWithCommentName[0:5]):   0,",
  (string) (len=50) "\t_ColorWithCommentName[5:10]:                   1,",
  (string) (len=50) "\tstrings.ToLower(_ColorWithCommentName[5:10]):  1,",
  (string) (len=50) "\t_ColorWithCommentName[10:13]:                  2,",
  (string) (len=50) "\tstrings.ToLower(_ColorWithCommentName[10:13]): 2,",
  (string) (len=50) "\t_ColorWithCommentName[13:18]:                  3,",
  (string) (len=50) "\tstrings.ToLower(_ColorWithCommentName[13:18]): 3,",
  (string) (len=51) "\t_ColorWithCommentName[18:22]:                  33,",
  (string) (len=51) "\tstrings.ToLower(_ColorWithCommentName[18:22]): 33,",
  (string) (len=51) "\t_ColorWithCommentName[22:26]:                  34,",
  (string) (len=51) "\tstrings.ToLower(_ColorWithCommentName[22:26]): 34,",
  (string) (len=51) "\t_ColorWithCommentName[26:32]:                  35,",
  (string) (len=51) "\tstrings.ToLower(_ColorWithCommentName[26:32]): 35,",
  (string) (len=1) "}",
  (string) "",
  (string) (len=75) "// ParseColorWithComment attempts to convert a string to a ColorWithComment",
  (string) (len=67) "func ParseColorWithComment(name string) (ColorWithComment, error) {",
  (string) (len=47) "\tif x, ok := _ColorWithCommentValue[name]; ok {",
  (string) (len=15) "\t\treturn x, nil",
  (string) (len=2) "\t}",
  (string) (len=137) "\treturn ColorWithComment(0), fmt.Errorf(\"%s is not a valid ColorWithComment, try [%s]\", name, strings.Join(_ColorWithCommentNames, \", \"))",
  (string) (len=1) "}",
  (string) "",
  (string) (len=52) "// MarshalText implements the text marshaller method",
  (string) (len=58) "func (x *ColorWithComment) MarshalText() ([]byte, error) {",
  (string) (len=31) "\treturn []byte(x.String()), nil",
  (string) (len=1) "}",
  (string) "",
  (string) (len=56) "// UnmarshalText implements the text unmarshaller method",
  (string) (len=61) "func (x *ColorWithComment) UnmarshalText(text []byte) error {",
  (string) (len=21) "\tname := string(text)",
  (string) (len=40) "\ttmp, err := ParseColorWithComment(name)",
  (string) (len=16) "\tif err != nil {",
  (string) (len=12) "\t\treturn err",
  (string) (len=2) "\t}",
  (string) (len=9) "\t*x = tmp",
  (string) (len=11) "\treturn nil",
  (string) (len=1) "}",
  (string) "",
  (string) (len=41) "// Scan implements the Scanner interface.",
  (string) (len=58) "func (x *ColorWithComment) Scan(value interface{}) error {",
  (string) (len=16) "\tvar name string",
  (string) "",
  (string) (len=27) "\tswitch v := value.(type) {",
  (string) (len=13) "\tcase string:",
  (string) (len=10) "\t\tname = v",
  (string) (len=13) "\tcase []byte:",
  (string) (len=18) "\t\tname = string(v)",
  (string) (len=10) "\tcase nil:",
  (string) (len=26) "\t\t*x = ColorWithComment(0)",
  (string) (len=12) "\t\treturn nil",
  (string) (len=2) "\t}",
  (string) "",
  (string) (len=40) "\ttmp, err := ParseColorWithComment(name)",
  (string) (len=16) "\tif err != nil {",
  (string) (len=12) "\t\treturn err",
  (string) (len=2) "\t}",
  (string) (len=9) "\t*x = tmp",
  (string) (len=11) "\treturn nil",
  (string) (len=1) "}",
  (string) "",
  (string) (len=48) "// Value implements the driver Valuer interface.",
  (string) (len=57) "func (x ColorWithComment) Value() (driver.Value, error) {",
  (string) (len=23) "\treturn x.String(), nil",
  (string) (len=1) "}",
  (string) "",
  (string) (len=7) "const (",
  (string) (len=63) "\t// ColorWithComment2Black is a ColorWithComment2 of type Black",
  (string) (len=48) "\tColorWithComment2Black ColorWithComment2 = iota",
  (string) (len=63) "\t// ColorWithComment2White is a ColorWithComment2 of type White",
  (string) (len=23) "\tColorWithComment2White",
  (string) (len=59) "\t// ColorWithComment2Red is a ColorWithComment2 of type Red",
  (string) (len=21) "\tColorWithComment2Red",
  (string) (len=63) "\t// ColorWithComment2Green is a ColorWithComment2 of type Green",
  (string) (len=23) "\tColorWithComment2Green",
  (string) (len=61) "\t// ColorWithComment2Blue is a ColorWithComment2 of type Blue",
  (string) (len=23) "\t// Blue starts with 33",
  (string) (len=52) "\tColorWithComment2Blue ColorWithComment2 = iota + 29",
  (string) (len=61) "\t// ColorWithComment2Grey is a ColorWithComment2 of type Grey",
  (string) (len=22) "\tColorWithComment2Grey",
  (string) (len=65) "\t// ColorWithComment2Yellow is a ColorWithComment2 of type Yellow",
  (string) (len=24) "\tColorWithComment2Yellow",
  (string) (len=1) ")",
  (string) "",
  (string) (len=65) "const _ColorWithComment2Name = \"BlackWhiteRedGreenBluegreyyellow\"",
  (string) "",
  (string) (len=39) "var _ColorWithComment2Names = []string{",
  (string) (len=29) "\t_ColorWithComment2Name[0:5],",
  (string) (len=30) "\t_ColorWithComment2Name[5:10],",
  (string) (len=31) "\t_ColorWithComment2Name[10:13],",
  (string) (len=31) "\t_ColorWithComment2Name[13:18],",
  (string) (len=31) "\t_ColorWithComment2Name[18:22],",
  (string) (len=31) "\t_ColorWithComment2Name[22:26],",
  (string) (len=31) "\t_ColorWithComment2Name[26:32],",
  (string) (len=1) "}",
  (string) "",
  (string) (len=88) "// ColorWithComment2Names returns a list of possible string values of ColorWithComment2.",
  (string) (len=40) "func ColorWithComment2Names() []string {",
  (string) (len=52) "\ttmp := make([]string, len(_ColorWithComment2Names))",
  (string) (len=35) "\tcopy(tmp, _ColorWithComment2Names)",
  (string) (len=11) "\treturn tmp",
  (string) (len=1) "}",
  (string) "",
  (string) (len=57) "var _ColorWithComment2Map = map[ColorWithComment2]string{",
  (string) (len=33) "\t0:  _ColorWithComment2Name[0:5],",
  (string) (len=34) "\t1:  _ColorWithComment2Name[5:10],",
  (string) (len=35) "\t2:  _ColorWithComment2Name[10:13],",
  (string) (len=35) "\t3:  _ColorWithComment2Name[13:18],",
  (string) (len=35) "\t33: _ColorWithComment2Name[18:22],",
  (string) (len=35) "\t34: _ColorWithComment2Name[22:26],",
  (string) (len=35) "\t35: _ColorWithComment2Name[26:32],",
  (string) (len=1) "}",
  (string) "",
  (string) (len=44) "// String implements the Stringer interface.",
  (string) (len=44) "func (x ColorWithComment2) String() string {",
  (string) (len=45) "\tif str, ok := _ColorWithComment2Map[x]; ok {",
  (string) (len=12) "\t\treturn str",
  (string) (len=2) "\t}",
  (string) (len=47) "\treturn fmt.Sprintf(\"ColorWithComment2(%d)\", x)",
  (string) (len=1) "}",
  (string) "",
  (string) (len=59) "var _ColorWithComment2Value = map[string]ColorWithComment2{",
  (string) (len=51) "\t_ColorWithComment2Name[0:5]:                    0,",
  (string) (len=51) "\tstrings.ToLower(_ColorWithComment2Name[0:5]):   0,",
  (string) (len=51) "\t_ColorWithComment2Name[5:10]:                   1,",
  (string) (len=51) "\tstrings.ToLower(_ColorWithComment2Name[5:10]):  1,",
  (string) (len=51) "\t_ColorWithComment2Name[10:13]:                  2,",
  (string) (len=51) "\tstrings.ToLower(_ColorWithComment2Name[10:13]): 2,",
  (string) (len=51) "\t_ColorWithComment2Name[13:18]:                  3,",
  (string) (len=51) "\tstrings.ToLower(_ColorWithComment2Name[13:18]): 3,",
  (string) (len=52) "\t_ColorWithComment2Name[18:22]:                  33,",
  (string) (len=52) "\tstrings.ToLower(_ColorWithComment2Name[18:22]): 33,",
  (string) (len=52) "\t_ColorWithComment2Name[22:26]:                  34,",
  (string) (len=52) "\tstrings.ToLower(_ColorWithComment2Name[22:26]): 34,",
  (string) (len=52) "\t_ColorWithComment2Name[26:32]:                  35,",
  (string) (len=52) "\tstrings.ToLower(_ColorWithComment2Name[26:32]): 35,",
  (string) (len=1) "}",
  (string) "",
  (string) (len=77) "// ParseColorWithComment2 attempts to convert a string to a ColorWithComment2",
  (string) (len=69) "func ParseColorWithComment2(name string) (ColorWithComment2, error) {",
  (string) (len=48) "\tif x, ok := _ColorWithComment2Value[name]; ok {",
  (string) (len=15) "\t\treturn x, nil",
  (string) (len=2) "\t}",
  (string) (len=140) "\treturn ColorWithComment2(0), fmt.Errorf(\"%s is not a valid ColorWithComment2, try [%s]\", name, strings.Join(_ColorWithComment2Names, \", \"))",
  (string) (len=1) "}",
  (string) "",
  (string) (len=52) "// MarshalText implements the text marshaller method",
  (string) (len=59) "func (x *ColorWithComment2) MarshalText() ([]byte, error) {",
  (string) (len=31) "\treturn []byte(x.String()), nil",
  (string) (len=1) "}",
  (string) "",
  (string) (len=56) "// UnmarshalText implements the text unmarshaller method",
  (string) (len=62) "func (x *ColorWithComment2) UnmarshalText(text []byte) error {",
  (string) (len=21) "\tname := string(text)",
  (string) (len=41) "\ttmp, err := ParseColorWithComment2(name)",
  (string) (len=16) "\tif err != nil {",
  (string) (len=12) "\t\treturn err",
  (string) (len=2) "\t}",
  (string) (len=9) "\t*x = tmp",
  (string) (len=11) "\treturn nil",
  (string) (len=1) "}",
  (string) "",
  (string) (len=41) "// Scan implements the Scanner interface.",
  (string) (len=59) "func (x *ColorWithComment2) Scan(value interface{}) error {",
  (string) (len=16) "\tvar name string",
  (string) "",
  (string) (len=27) "\tswitch v := value.(type) {",
  (string) (len=13) "\tcase string:",
  (string) (len=10) "\t\tname = v",
  (string) (len=13) "\tcase []byte:",
  (string) (len=18) "\t\tname = string(v)",
  (string) (len=10) "\tcase nil:",
  (string) (len=27) "\t\t*x = ColorWithComment2(0)",
  (string) (len=12) "\t\treturn nil",
  (string) (len=2) "\t}",
  (string) "",
  (string) (len=41) "\ttmp, err := ParseColorWithComment2(name)",
  (string) (len=16) "\tif err != nil {",
  (string) (len=12) "\t\treturn err",
  (string) (len=2) "\t}",
  (string) (len=9) "\t*x = tmp",
  (string) (len=11) "\treturn nil",
  (string) (len=1) "}",
  (string) "",
  (string) (len=48) "// Value implements the driver Valuer interface.",
  (string) (len=58) "func (x ColorWithComment2) Value() (driver.Value, error) {",
  (string) (len=23) "\treturn x.String(), nil",
  (string) (len=1) "}",
  (string) "",
  (string) (len=7) "const (",
  (string) (len=63) "\t// ColorWithComment3Black is a ColorWithComment3 of type Black",
  (string) (len=48) "\tColorWithComment3Black ColorWithComment3 = iota",
  (string) (len=63) "\t// ColorWithComment3White is a ColorWithComment3 of type White",
  (string) (len=23) "\tColorWithComment3White",
  (string) (len=59) "\t// ColorWithComment3Red is a ColorWithComment3 of type Red",
  (string) (len=21) "\tColorWithComment3Red",
  (string) (len=63) "\t// ColorWithComment3Green is a ColorWithComment3 of type Green",
  (string) (len=24) "\t// Green starts with 33",
  (string) (len=53) "\tColorWithComment3Green ColorWithComment3 = iota + 30",
  (string) (len=61) "\t// ColorWithComment3Blue is a ColorWithComment3 of type Blue",
  (string) (len=22) "\tColorWithComment3Blue",
  (string) (len=61) "\t// ColorWithComment3Grey is a ColorWithComment3 of type Grey",
  (string) (len=22) "\tColorWithComment3Grey",
  (string) (len=65) "\t// ColorWithComment3Yellow is a ColorWithComment3 of type Yellow",
  (string) (len=24) "\tColorWithComment3Yellow",
  (string) (len=72) "\t// ColorWithComment3BlueGreen is a ColorWithComment3 of type Blue-Green",
  (string) (len=22) "\t// blue-green comment",
  (string) (len=27) "\tColorWithComment3BlueGreen",
  (string) (len=72) "\t// ColorWithComment3RedOrange is a ColorWithComment3 of type Red-Orange",
  (string) (len=27) "\tColorWithComment3RedOrange",
  (string) (len=1) ")",
  (string) "",
  (string) (len=85) "const _ColorWithComment3Name = \"BlackWhiteRedGreenBluegreyyellowblue-greenred-orange\"",
  (string) "",
  (string) (len=39) "var _ColorWithComment3Names = []string{",
  (string) (len=29) "\t_ColorWithComment3Name[0:5],",
  (string) (len=30) "\t_ColorWithComment3Name[5:10],",
  (string) (len=31) "\t_ColorWithComment3Name[10:13],",
  (string) (len=31) "\t_ColorWithComment3Name[13:18],",
  (string) (len=31) "\t_ColorWithComment3Name[18:22],",
  (string) (len=31) "\t_ColorWithComment3Name[22:26],",
  (string) (len=31) "\t_ColorWithComment3Name[26:32],",
  (string) (len=31) "\t_ColorWithComment3Name[32:42],",
  (string) (len=31) "\t_ColorWithComment3Name[42:52],",
  (string) (len=1) "}",
  (string) "",
  (string) (len=88) "// ColorWithComment3Names returns a list of possible string values of ColorWithComment3.",
  (string) (len=40) "func ColorWithComment3Names() []string {",
  (string) (len=52) "\ttmp := make([]string, len(_ColorWithComment3Names))",
  (string) (len=35) "\tcopy(tmp, _ColorWithComment3Names)",
  (string) (len=11) "\treturn tmp",
  (string) (len=1) "}",
  (string) "",
  (string) (len=57) "var _ColorWithComment3Map = map[ColorWithComment3]string{",
  (string) (len=33) "\t0:  _ColorWithComment3Name[0:5],",
  (string) (len=34) "\t1:  _ColorWithComment3Name[5:10],",
  (string) (len=35) "\t2:  _ColorWithComment3Name[10:13],",
  (string) (len=35) "\t33: _ColorWithComment3Name[13:18],",
  (string) (len=35) "\t34: _ColorWithComment3Name[18:22],",
  (string) (len=35) "\t35: _ColorWithComment3Name[22:26],",
  (string) (len=35) "\t36: _ColorWithComment3Name[26:32],",
  (string) (len=35) "\t37: _ColorWithComment3Name[32:42],",
  (string) (len=35) "\t38: _ColorWithComment3Name[42:52],",
  (string) (len=1) "}",
  (string) "",
  (string) (len=44) "// String implements the Stringer interface.",
  (string) (len=44) "func (x ColorWithComment3) String() string {",
  (string) (len=45) "\tif str, ok := _ColorWithComment3Map[x]; ok {",
  (string) (len=12) "\t\treturn str",
  (string) (len=2) "\t}",
  (string) (len=47) "\treturn fmt.Sprintf(\"ColorWithComment3(%d)\", x)",
  (string) (len=1) "}",
  (string) "",
  (string) (len=59) "var _ColorWithComment3Value = map[string]ColorWithComment3{",
  (string) (len=51) "\t_ColorWithComment3Name[0:5]:                    0,",
  (string) (len=51) "\tstrings.ToLower(_ColorWithComment3Name[0:5]):   0,",
  (string) (len=51) "\t_ColorWithComment3Name[5:10]:                   1,",
  (string) (len=51) "\tstrings.ToLower(_ColorWithComment3Name[5:10]):  1,",
  (string) (len=51) "\t_ColorWithComment3Name[10:13]:                  2,",
  (string) (len=51) "\tstrings.ToLower(_ColorWithComment3Name[10:13]): 2,",
  (string) (len=52) "\t_ColorWithComment3Name[13:18]:                  33,",
  (string) (len=52) "\tstrings.ToLower(_ColorWithComment3Name[13:18]): 33,",
  (string) (len=52) "\t_ColorWithComment3Name[18:22]:                  34,",
  (string) (len=52) "\tstrings.ToLower(_ColorWithComment3Name[18:22]): 34,",
  (string) (len=52) "\t_ColorWithComment3Name[22:26]:                  35,",
  (string) (len=52) "\tstrings.ToLower(_ColorWithComment3Name[22:26]): 35,",
  (string) (len=52) "\t_ColorWithComment3Name[26:32]:                  36,",
  (string) (len=52) "\tstrings.ToLower(_ColorWithComment3Name[26:32]): 36,",
  (string) (len=52) "\t_ColorWithComment3Name[32:42]:                  37,",
  (string) (len=52) "\tstrings.ToLower(_ColorWithComment3Name[32:42]): 37,",
  (string) (len=52) "\t_ColorWithComment3Name[42:52]:                  38,",
  (string) (len=52) "\tstrings.ToLower(_ColorWithComment3Name[42:52]): 38,",
  (string) (len=1) "}",
  (string) "",
  (string) (len=77) "// ParseColorWithComment3 attempts to convert a string to a ColorWithComment3",
  (string) (len=69) "func ParseColorWithComment3(name string) (ColorWithComment3, error) {",
  (string) (len=48) "\tif x, ok := _ColorWithComment3Value[name]; ok {",
  (string) (len=15) "\t\treturn x, nil",
  (string) (len=2) "\t}",
  (string) (len=140) "\treturn ColorWithComment3(0), fmt.Errorf(\"%s is not a valid ColorWithComment3, try [%s]\", name, strings.Join(_ColorWithComment3Names, \", \"))",
  (string) (len=1) "}",
  (string) "",
  (string) (len=52) "// MarshalText implements the text marshaller method",
  (string) (len=59) "func (x *ColorWithComment3) MarshalText() ([]byte, error) {",
  (string) (len=31) "\treturn []byte(x.String()), nil",
  (string) (len=1) "}",
  (string) "",
  (string) (len=56) "// UnmarshalText implements the text unmarshaller method",
  (string) (len=62) "func (x *ColorWithComment3) UnmarshalText(text []byte) error {",
  (string) (len=21) "\tname := string(text)",
  (string) (len=41) "\ttmp, err := ParseColorWithComment3(name)",
  (string) (len=16) "\tif err != nil {",
  (string) (len=12) "\t\treturn err",
  (string) (len=2) "\t}",
  (string) (len=9) "\t*x = tmp",
  (string) (len=11) "\treturn nil",
  (string) (len=1) "}",
  (string) "",
  (string) (len=41) "// Scan implements the Scanner interface.",
  (string) (len=59) "func (x *ColorWithComment3) Scan(value interface{}) error {",
  (string) (len=16) "\tvar name string",
  (string) "",
  (string) (len=27) "\tswitch v := value.(type) {",
  (string) (len=13) "\tcase string:",
  (string) (len=10) "\t\tname = v",
  (string) (len=13) "\tcase []byte:",
  (string) (len=18) "\t\tname = string(v)",
  (string) (len=10) "\tcase nil:",
  (string) (len=27) "\t\t*x = ColorWithComment3(0)",
  (string) (len=12) "\t\treturn nil",
  (string) (len=2) "\t}",
  (string) "",
  (string) (len=41) "\ttmp, err := ParseColorWithComment3(name)",
  (string) (len=16) "\tif err != nil {",
  (string) (len=12) "\t\treturn err",
  (string) (len=2) "\t}",
  (string) (len=9) "\t*x = tmp",
  (string) (len=11) "\treturn nil",
  (string) (len=1) "}",
  (string) "",
  (string) (len=48) "// Value implements the driver Valuer interface.",
  (string) (len=58) "func (x ColorWithComment3) Value() (driver.Value, error) {",
  (string) (len=23) "\treturn x.String(), nil",
  (string) (len=1) "}",
  (string) "",
  (string) (len=7) "const (",
  (string) (len=41) "\t// ModelToyota is a Model of type Toyota",
  (string) (len=25) "\tModelToyota Model = iota",
  (string) (len=17) "\t// Skipped value",
  (string) (len=2) "\t_",
  (string) (len=39) "\t// ModelChevy is a Model of type Chevy",
  (string) (len=11) "\tModelChevy",
  (string) (len=17) "\t// Skipped value",
  (string) (len=2) "\t_",
  (string) (len=37) "\t// ModelFord is a Model of type Ford",
  (string) (len=10) "\tModelFord",
  (string) (len=1) ")",
  (string) "",
  (string) (len=36) "const _ModelName = \"ToyotaChevyFord\"",
  (string) "",
  (string) (len=27) "var _ModelNames = []string{",
  (string) (len=17) "\t_ModelName[0:6],",
  (string) (len=18) "\t_ModelName[6:11],",
  (string) (len=19) "\t_ModelName[11:15],",
  (string) (len=1) "}",
  (string) "",
  (string) (len=64) "// ModelNames returns a list of possible string values of Model.",
  (string) (len=28) "func ModelNames() []string {",
  (string) (len=40) "\ttmp := make([]string, len(_ModelNames))",
  (string) (len=23) "\tcopy(tmp, _ModelNames)",
  (string) (len=11) "\treturn tmp",
  (string) (len=1) "}",
  (string) "",
  (string) (len=33) "var _ModelMap = map[Model]string{",
  (string) (len=20) "\t0: _ModelName[0:6],",
  (string) (len=21) "\t2: _ModelName[6:11],",
  (string) (len=22) "\t4: _ModelName[11:15],",
  (string) (len=1) "}",
  (string) "",
  (string) (len=44) "// String implements the Stringer interface.",
  (string) (len=32) "func (x Model) String() string {",
  (string) (len=33) "\tif str, ok := _ModelMap[x]; ok {",
  (string) (len=12) "\t\treturn str",
  (string) (len=2) "\t}",
  (string) (len=35) "\treturn fmt.Sprintf(\"Model(%d)\", x)",
  (string) (len=1) "}",
  (string) "",
  (string) (len=35) "var _ModelValue = map[string]Model{",
  (string) (len=39) "\t_ModelName[0:6]:                    0,",
  (string) (len=39) "\tstrings.ToLower(_ModelName[0:6]):   0,",
  (string) (len=39) "\t_ModelName[6:11]:                   2,",
  (string) (len=39) "\tstrings.ToLower(_ModelName[6:11]):  2,",
  (string) (len=39) "\t_ModelName[11:15]:                  4,",
  (string) (len=39) "\tstrings.ToLower(_ModelName[11:15]): 4,",
  (string) (len=1) "}",
  (string) "",
  (string) (len=53) "// ParseModel attempts to convert a string to a Model",
  (string) (len=45) "func ParseModel(name string) (Model, error) {",
  (string) (len=36) "\tif x, ok := _ModelValue[name]; ok {",
  (string) (len=15) "\t\treturn x, nil",
  (string) (len=2) "\t}",
  (string) (len=104) "\treturn Model(0), fmt.Errorf(\"%s is not a valid Model, try [%s]\", name, strings.Join(_ModelNames, \", \"))",
  (string) (len=1) "}",
  (string) "",
  (string) (len=52) "// MarshalText implements the text marshaller method",
  (string) (len=47) "func (x *Model) MarshalText() ([]byte, error) {",
  (string) (len=31) "\treturn []byte(x.String()), nil",
  (string) (len=1) "}",
  (string) "",
  (string) (len=56) "// UnmarshalText implements the text unmarshaller method",
  (string) (len=50) "func (x *Model) UnmarshalText(text []byte) error {",
  (string) (len=21) "\tname := string(text)",
  (string) (len=29) "\ttmp, err := ParseModel(name)",
  (string) (len=16) "\tif err != nil {",
  (string) (len=12) "\t\treturn err",
  (string) (len=2) "\t}",
  (string) (len=9) "\t*x = tmp",
  (string) (len=11) "\treturn nil",
  (string) (len=1) "}",
  (string) "",
  (string) (len=41) "// Scan implements the Scanner interface.",
  (string) (len=47) "func (x *Model) Scan(value interface{}) error {",
  (string) (len=16) "\tvar name string",
  (string) "",
  (string) (len=27) "\tswitch v := value.(type) {",
  (string) (len=13) "\tcase string:",
  (string) (len=10) "\t\tname = v",
  (string) (len=13) "\tcase []byte:",
  (string) (len=18) "\t\tname = string(v)",
  (string) (len=10) "\tcase nil:",
  (string) (len=15) "\t\t*x = Model(0)",
  (string) (len=12) "\t\treturn nil",
  (string) (len=2) "\t}",
  (string) "",
  (string) (len=29) "\ttmp, err := ParseModel(name)",
  (string) (len=16) "\tif err != nil {",
  (string) (len=12) "\t\treturn err",
  (string) (len=2) "\t}",
  (string) (len=9) "\t*x = tmp",
  (string) (len=11) "\treturn nil",
  (string) (len=1) "}",
  (string) "",
  (string) (len=48) "// Value implements the driver Valuer interface.",
  (string) (len=46) "func (x Model) Value() (driver.Value, error) {",
  (string) (len=23) "\treturn x.String(), nil",
  (string) (len=1) "}",
  (string) "",
  (string) (len=7) "const (",
  (string) (len=60) "\t// SanitizingTestHyphen is a Sanitizing of type Test-Hyphen",
  (string) (len=39) "\tSanitizingTestHyphen Sanitizing = iota",
  (string) (len=62) "\t// SanitizingHyphenStart is a Sanitizing of type -HyphenStart",
  (string) (len=22) "\tSanitizingHyphenStart",
  (string) (len=71) "\t// Sanitizing_underscoreFirst is a Sanitizing of type _underscoreFirst",
  (string) (len=27) "\tSanitizing_underscoreFirst",
  (string) (len=63) "\t// Sanitizing0numberFirst is a Sanitizing of type 0numberFirst",
  (string) (len=23) "\tSanitizing0numberFirst",
  (string) (len=59) "\t// Sanitizing123456789a is a Sanitizing of type 123456789a",
  (string) (len=21) "\tSanitizing123456789a",
  (string) (len=60) "\t// Sanitizing123123Asdf is a Sanitizing of type 123123-Asdf",
  (string) (len=21) "\tSanitizing123123Asdf",
  (string) (len=65) "\t// SanitizingEndingHyphen is a Sanitizing of type Ending-Hyphen-",
  (string) (len=23) "\tSanitizingEndingHyphen",
  (string) (len=1) ")",
  (string) "",
  (string) (len=112) "const _SanitizingName = \"test-Hyphen-hyphenStart_underscoreFirst0numberFirst123456789a123123-asdfending-hyphen-\"",
  (string) "",
  (string) (len=32) "var _SanitizingNames = []string{",
  (string) (len=23) "\t_SanitizingName[0:11],",
  (string) (len=24) "\t_SanitizingName[11:23],",
  (string) (len=24) "\t_SanitizingName[23:39],",
  (string) (len=24) "\t_SanitizingName[39:51],",
  (string) (len=24) "\t_SanitizingName[51:61],",
  (string) (len=24) "\t_SanitizingName[61:72],",
  (string) (len=24) "\t_SanitizingName[72:86],",
  (string) (len=1) "}",
  (string) "",
  (string) (len=74) "// SanitizingNames returns a list of possible string values of Sanitizing.",
  (string) (len=33) "func SanitizingNames() []string {",
  (string) (len=45) "\ttmp := make([]string, len(_SanitizingNames))",
  (string) (len=28) "\tcopy(tmp, _SanitizingNames)",
  (string) (len=11) "\treturn tmp",
  (string) (len=1) "}",
  (string) "",
  (string) (len=43) "var _SanitizingMap = map[Sanitizing]string{",
  (string) (len=26) "\t0: _SanitizingName[0:11],",
  (string) (len=27) "\t1: _SanitizingName[11:23],",
  (string) (len=27) "\t2: _SanitizingName[23:39],",
  (string) (len=27) "\t3: _SanitizingName[39:51],",
  (string) (len=27) "\t4: _SanitizingName[51:61],",
  (string) (len=27) "\t5: _SanitizingName[61:72],",
  (string) (len=27) "\t6: _SanitizingName[72:86],",
  (string) (len=1) "}",
  (string) "",
  (string) (len=44) "// String implements the Stringer interface.",
  (string) (len=37) "func (x Sanitizing) String() string {",
  (string) (len=38) "\tif str, ok := _SanitizingMap[x]; ok {",
  (string) (len=12) "\t\treturn str",
  (string) (len=2) "\t}",
  (string) (len=40) "\treturn fmt.Sprintf(\"Sanitizing(%d)\", x)",
  (string) (len=1) "}",
  (string) "",
  (string) (len=45) "var _SanitizingValue = map[string]Sanitizing{",
  (string) (len=44) "\t_SanitizingName[0:11]:                   0,",
  (string) (len=44) "\tstrings.ToLower(_SanitizingName[0:11]):  0,",
  (string) (len=44) "\t_SanitizingName[11:23]:                  1,",
  (string) (len=44) "\tstrings.ToLower(_SanitizingName[11:23]): 1,",
  (string) (len=44) "\t_SanitizingName[23:39]:                  2,",
  (string) (len=44) "\tstrings.ToLower(_SanitizingName[23:39]): 2,",
  (string) (len=44) "\t_SanitizingName[39:51]:                  3,",
  (string) (len=44) "\tstrings.ToLower(_SanitizingName[39:51]): 3,",
  (string) (len=44) "\t_SanitizingName[51:61]:                  4,",
  (string) (len=44) "\tstrings.ToLower(_SanitizingName[51:61]): 4,",
  (string) (len=44) "\t_SanitizingName[61:72]:                  5,",
  (string) (len=44) "\tstrings.ToLower(_SanitizingName[61:72]): 5,",
  (string) (len=44) "\t_SanitizingName[72:86]:                  6,",
  (string) (len=44) "\tstrings.ToLower(_SanitizingName[72:86]): 6,",
  (string) (len=1) "}",
  (string) "",
  (string) (len=63) "// ParseSanitizing attempts to convert a string to a Sanitizing",
  (string) (len=55) "func ParseSanitizing(name string) (Sanitizing, error) {",
  (string) (len=41) "\tif x, ok := _SanitizingValue[name]; ok {",
  (string) (len=15) "\t\treturn x, nil",
  (string) (len=2) "\t}",
  (string) (len=119) "\treturn Sanitizing(0), fmt.Errorf(\"%s is not a valid Sanitizing, try [%s]\", name, strings.Join(_SanitizingNames, \", \"))",
  (string) (len=1) "}",
  (string) "",
  (string) (len=52) "// MarshalText implements the text marshaller method",
  (string) (len=52) "func (x *Sanitizing) MarshalText() ([]byte, error) {",
  (string) (len=31) "\treturn []byte(x.String()), nil",
  (string) (len=1) "}",
  (string) "",
  (string) (len=56) "// UnmarshalText implements the text unmarshaller method",
  (string) (len=55) "func (x *Sanitizing) UnmarshalText(text []byte) error {",
  (string) (len=21) "\tname := string(text)",
  (string) (len=34) "\ttmp, err := ParseSanitizing(name)",
  (string) (len=16) "\tif err != nil {",
  (string) (len=12) "\t\treturn err",
  (string) (len=2) "\t}",
  (string) (len=9) "\t*x = tmp",
  (string) (len=11) "\treturn nil",
  (string) (len=1) "}",
  (string) "",
  (string) (len=41) "// Scan implements the Scanner interface.",
  (string) (len=52) "func (x *Sanitizing) Scan(value interface{}) error {",
  (string) (len=16) "\tvar name string",
  (string) "",
  (string) (len=27) "\tswitch v := value.(type) {",
  (string) (len=13) "\tcase string:",
  (string) (len=10) "\t\tname = v",
  (string) (len=13) "\tcase []byte:",
  (string) (len=18) "\t\tname = string(v)",
  (string) (len=10) "\tcase nil:",
  (string) (len=20) "\t\t*x = Sanitizing(0)",
  (string) (len=12) "\t\treturn nil",
  (string) (len=2) "\t}",
  (string) "",
  (string) (len=34) "\ttmp, err := ParseSanitizing(name)",
  (string) (len=16) "\tif err != nil {",
  (string) (len=12) "\t\treturn err",
  (string) (len=2) "\t}",
  (string) (len=9) "\t*x = tmp",
  (string) (len=11) "\treturn nil",
  (string) (len=1) "}",
  (string) "",
  (string) (len=48) "// Value implements the driver Valuer interface.",
  (string) (len=51) "func (x Sanitizing) Value() (driver.Value, error) {",
  (string) (len=23) "\treturn x.String(), nil",
  (string) (len=1) "}",
  (string) "",
  (string) (len=7) "const (",
  (string) (len=35) "\t// SodaCoke is a Soda of type Coke",
  (string) (len=21) "\tSodaCoke Soda = iota",
  (string) (len=37) "\t// SodaPepsi is a Soda of type Pepsi",
  (string) (len=10) "\tSodaPepsi",
  (string) (len=39) "\t// SodaMtnDew is a Soda of type MtnDew",
  (string) (len=11) "\tSodaMtnDew",
  (string) (len=1) ")",
  (string) "",
  (string) (len=35) "const _SodaName = \"CokePepsiMtnDew\"",
  (string) "",
  (string) (len=26) "var _SodaNames = []string{",
  (string) (len=16) "\t_SodaName[0:4],",
  (string) (len=16) "\t_SodaName[4:9],",
  (string) (len=17) "\t_SodaName[9:15],",
  (string) (len=1) "}",
  (string) "",
  (string) (len=62) "// SodaNames returns a list of possible string values of Soda.",
  (string) (len=27) "func SodaNames() []string {",
  (string) (len=39) "\ttmp := make([]string, len(_SodaNames))",
  (string) (len=22) "\tcopy(tmp, _SodaNames)",
  (string) (len=11) "\treturn tmp",
  (string) (len=1) "}",
  (string) "",
  (string) (len=31) "var _SodaMap = map[Soda]string{",
  (string) (len=19) "\t0: _SodaName[0:4],",
  (string) (len=19) "\t1: _SodaName[4:9],",
  (string) (len=20) "\t2: _SodaName[9:15],",
  (string) (len=1) "}",
  (string) "",
  (string) (len=44) "// String implements the Stringer interface.",
  (string) (len=31) "func (x Soda) String() string {",
  (string) (len=32) "\tif str, ok := _SodaMap[x]; ok {",
  (string) (len=12) "\t\treturn str",
  (string) (len=2) "\t}",
  (string) (len=34) "\treturn fmt.Sprintf(\"Soda(%d)\", x)",
  (string) (len=1) "}",
  (string) "",
  (string) (len=33) "var _SodaValue = map[string]Soda{",
  (string) (len=37) "\t_SodaName[0:4]:                   0,",
  (string) (len=37) "\tstrings.ToLower(_SodaName[0:4]):  0,",
  (string) (len=37) "\t_SodaName[4:9]:                   1,",
  (string) (len=37) "\tstrings.ToLower(_SodaName[4:9]):  1,",
  (string) (len=37) "\t_SodaName[9:15]:                  2,",
  (string) (len=37) "\tstrings.ToLower(_SodaName[9:15]): 2,",
  (string) (len=1) "}",
  (string) "",
  (string) (len=51) "// ParseSoda attempts to convert a string to a Soda",
  (string) (len=43) "func ParseSoda(name string) (Soda, error) {",
  (string) (len=35) "\tif x, ok := _SodaValue[name]; ok {",
  (string) (len=15) "\t\treturn x, nil",
  (string) (len=2) "\t}",
  (string) (len=101) "\treturn Soda(0), fmt.Errorf(\"%s is not a valid Soda, try [%s]\", name, strings.Join(_SodaNames, \", \"))",
  (string) (len=1) "}",
  (string) "",
  (string) (len=52) "// MarshalText implements the text marshaller method",
  (string) (len=46) "func (x *Soda) MarshalText() ([]byte, error) {",
  (string) (len=31) "\treturn []byte(x.String()), nil",
  (string) (len=1) "}",
  (string) "",
  (string) (len=56) "// UnmarshalText implements the text unmarshaller method",
  (string) (len=49) "func (x *Soda) UnmarshalText(text []byte) error {",
  (string) (len=21) "\tname := string(text)",
  (string) (len=28) "\ttmp, err := ParseSoda(name)",
  (string) (len=16) "\tif err != nil {",
  (string) (len=12) "\t\treturn err",
  (string) (len=2) "\t}",
  (string) (len=9) "\t*x = tmp",
  (string) (len=11) "\treturn nil",
  (string) (len=1) "}",
  (string) "",
  (string) (len=41) "// Scan implements the Scanner interface.",
  (string) (len=46) "func (x *Soda) Scan(value interface{}) error {",
  (string) (len=16) "\tvar name string",
  (string) "",
  (string) (len=27) "\tswitch v := value.(type) {",
  (string) (len=13) "\tcase string:",
  (string) (len=10) "\t\tname = v",
  (string) (len=13) "\tcase []byte:",
  (string) (len=18) "\t\tname = string(v)",
  (string) (len=10) "\tcase nil:",
  (string) (len=14) "\t\t*x = Soda(0)",
  (string) (len=12) "\t\treturn nil",
  (string) (len=2) "\t}",
  (string) "",
  (string) (len=28) "\ttmp, err := ParseSoda(name)",
  (string) (len=16) "\tif err != nil {",
  (string) (len=12) "\t\treturn err",
  (string) (len=2) "\t}",
  (string) (len=9) "\t*x = tmp",
  (string) (len=11) "\treturn nil",
  (string) (len=1) "}",
  (string) "",
  (string) (len=48) "// Value implements the driver Valuer interface.",
  (string) (len=45) "func (x Soda) Value() (driver.Value, error) {",
  (string) (len=23) "\treturn x.String(), nil",
  (string) (len=1) "}",
  (string) "",
  (string) (len=7) "const (",
  (string) (len=67) "\t// StartNotZeroStartWithNum is a StartNotZero of type StartWithNum",
  (string) (len=50) "\tStartNotZeroStartWithNum StartNotZero = iota + 23",
  (string) (len=57) "\t// StartNotZeroNextNum is a StartNotZero of type NextNum",
  (string) (len=20) "\tStartNotZeroNextNum",
  (string) (len=1) ")",
  (string) "",
  (string) (len=47) "const _StartNotZeroName = \"startWithNumnextNum\"",
  (string) "",
  (string) (len=34) "var _StartNotZeroNames = []string{",
  (string) (len=25) "\t_StartNotZeroName[0:12],",
  (string) (len=26) "\t_StartNotZeroName[12:19],",
  (string) (len=1) "}",
  (string) "",
  (string) (len=78) "// StartNotZeroNames returns a list of possible string values of StartNotZero.",
  (string) (len=35) "func StartNotZeroNames() []string {",
  (string) (len=47) "\ttmp := make([]string, len(_StartNotZeroNames))",
  (string) (len=30) "\tcopy(tmp, _StartNotZeroNames)",
  (string) (len=11) "\treturn tmp",
  (string) (len=1) "}",
  (string) "",
  (string) (len=47) "var _StartNotZeroMap = map[StartNotZero]string{",
  (string) (len=29) "\t23: _StartNotZeroName[0:12],",
  (string) (len=30) "\t24: _StartNotZeroName[12:19],",
  (string) (len=1) "}",
  (string) "",
  (string) (len=44) "// String implements the Stringer interface.",
  (string) (len=39) "func (x StartNotZero) String() string {",
  (string) (len=40) "\tif str, ok := _StartNotZeroMap[x]; ok {",
  (string) (len=12) "\t\treturn str",
  (string) (len=2) "\t}",
  (string) (len=42) "\treturn fmt.Sprintf(\"StartNotZero(%d)\", x)",
  (string) (len=1) "}",
  (string) "",
  (string) (len=49) "var _StartNotZeroValue = map[string]StartNotZero{",
  (string) (len=47) "\t_StartNotZeroName[0:12]:                   23,",
  (string) (len=47) "\tstrings.ToLower(_StartNotZeroName[0:12]):  23,",
  (string) (len=47) "\t_StartNotZeroName[12:19]:                  24,",
  (string) (len=47) "\tstrings.ToLower(_StartNotZeroName[12:19]): 24,",
  (string) (len=1) "}",
  (string) "",
  (string) (len=67) "// ParseStartNotZero attempts to convert a string to a StartNotZero",
  (string) (len=59) "func ParseStartNotZero(name string) (StartNotZero, error) {",
  (string) (len=43) "\tif x, ok := _StartNotZeroValue[name]; ok {",
  (string) (len=15) "\t\treturn x, nil",
  (string) (len=2) "\t}",
  (string) (len=125) "\treturn StartNotZero(0), fmt.Errorf(\"%s is not a valid StartNotZero, try [%s]\", name, strings.Join(_StartNotZeroNames, \", \"))",
  (string) (len=1) "}",
  (string) "",
  (string) (len=52) "// MarshalText implements the text marshaller method",
  (string) (len=54) "func (x *StartNotZero) MarshalText() ([]byte, error) {",
  (string) (len=31) "\treturn []byte(x.String()), nil",
  (string) (len=1) "}",
  (string) "",
  (string) (len=56) "// UnmarshalText implements the text unmarshaller method",
  (string) (len=57) "func (x *StartNotZero) UnmarshalText(text []byte) error {",
  (string) (len=21) "\tname := string(text)",
  (string) (len=36) "\ttmp, err := ParseStartNotZero(name)",
  (string) (len=16) "\tif err != nil {",
  (string) (len=12) "\t\treturn err",
  (string) (len=2) "\t}",
  (string) (len=9) "\t*x = tmp",
  (string) (len=11) "\treturn nil",
  (string) (len=1) "}",
  (string) "",
  (string) (len=41) "// Scan implements the Scanner interface.",
  (string) (len=54) "func (x *StartNotZero) Scan(value interface{}) error {",
  (string) (len=16) "\tvar name string",
  (string) "",
  (string) (len=27) "\tswitch v := value.(type) {",
  (string) (len=13) "\tcase string:",
  (string) (len=10) "\t\tname = v",
  (string) (len=13) "\tcase []byte:",
  (string) (len=18) "\t\tname = string(v)",
  (string) (len=10) "\tcase nil:",
  (string) (len=22) "\t\t*x = StartNotZero(0)",
  (string) (len=12) "\t\treturn nil",
  (string) (len=2) "\t}",
  (string) "",
  (string) (len=36) "\ttmp, err := ParseStartNotZero(name)",
  (string) (len=16) "\tif err != nil {",
  (string) (len=12) "\t\treturn err",
  (string) (len=2) "\t}",
  (string) (len=9) "\t*x = tmp",
  (string) (len=11) "\treturn nil",
  (string) (len=1) "}",
  (string) "",
  (string) (len=48) "// Value implements the driver Valuer interface.",
  (string) (len=53) "func (x StartNotZero) Value() (driver.Value, error) {",
  (string) (len=23) "\treturn x.String(), nil",
  (string) (len=1) "}",
  (string) ""
}
