([]string) (len=280) {
  (string) (len=41) "// Code generated by go-enum DO NOT EDIT.",
  (string) (len=13) "// Version: -",
  (string) (len=14) "// Revision: -",
  (string) (len=16) "// Build Date: -",
  (string) (len=14) "// Built By: -",
  (string) "",
  (string) (len=17) "package generator",
  (string) "",
  (string) (len=8) "import (",
  (string) (len=22) "\t\"database/sql/driver\"",
  (string) (len=16) "\t\"encoding/json\"",
  (string) (len=6) "\t\"fmt\"",
  (string) (len=10) "\t\"strconv\"",
  (string) (len=10) "\t\"strings\"",
  (string) "",
  (string) (len=24) "\t\"github.com/pkg/errors\"",
  (string) (len=1) ")",
  (string) "",
  (string) (len=7) "const (",
  (string) (len=56) "\t// Custom_prefix_Create is a ChangeType of type Create.",
  (string) (len=39) "\tCustom_prefix_Create ChangeType = iota",
  (string) (len=56) "\t// Custom_prefix_Update is a ChangeType of type Update.",
  (string) (len=21) "\tCustom_prefix_Update",
  (string) (len=56) "\t// Custom_prefix_Delete is a ChangeType of type Delete.",
  (string) (len=21) "\tCustom_prefix_Delete",
  (string) (len=1) ")",
  (string) "",
  (string) (len=44) "const _ChangeTypeName = \"CreateUpdateDelete\"",
  (string) "",
  (string) (len=43) "var _ChangeTypeMap = map[ChangeType]string{",
  (string) (len=44) "\tCustom_prefix_Create: _ChangeTypeName[0:6],",
  (string) (len=45) "\tCustom_prefix_Update: _ChangeTypeName[6:12],",
  (string) (len=46) "\tCustom_prefix_Delete: _ChangeTypeName[12:18],",
  (string) (len=1) "}",
  (string) "",
  (string) (len=44) "// String implements the Stringer interface.",
  (string) (len=37) "func (x ChangeType) String() string {",
  (string) (len=38) "\tif str, ok := _ChangeTypeMap[x]; ok {",
  (string) (len=12) "\t\treturn str",
  (string) (len=2) "\t}",
  (string) (len=40) "\treturn fmt.Sprintf(\"ChangeType(%d)\", x)",
  (string) (len=1) "}",
  (string) "",
  (string) (len=45) "var _ChangeTypeValue = map[string]ChangeType{",
  (string) (len=63) "\t_ChangeTypeName[0:6]:                    Custom_prefix_Create,",
  (string) (len=63) "\tstrings.ToLower(_ChangeTypeName[0:6]):   Custom_prefix_Create,",
  (string) (len=63) "\t_ChangeTypeName[6:12]:                   Custom_prefix_Update,",
  (string) (len=63) "\tstrings.ToLower(_ChangeTypeName[6:12]):  Custom_prefix_Update,",
  (string) (len=63) "\t_ChangeTypeName[12:18]:                  Custom_prefix_Delete,",
  (string) (len=63) "\tstrings.ToLower(_ChangeTypeName[12:18]): Custom_prefix_Delete,",
  (string) (len=1) "}",
  (string) "",
  (string) (len=64) "// ParseChangeType attempts to convert a string to a ChangeType.",
  (string) (len=55) "func ParseChangeType(name string) (ChangeType, error) {",
  (string) (len=41) "\tif x, ok := _ChangeTypeValue[name]; ok {",
  (string) (len=15) "\t\treturn x, nil",
  (string) (len=2) "\t}",
  (string) (len=71) "\treturn ChangeType(0), fmt.Errorf(\"%s is not a valid ChangeType\", name)",
  (string) (len=1) "}",
  (string) "",
  (string) (len=39) "func (x ChangeType) Ptr() *ChangeType {",
  (string) (len=10) "\treturn &x",
  (string) (len=1) "}",
  (string) "",
  (string) (len=53) "// MarshalText implements the text marshaller method.",
  (string) (len=51) "func (x ChangeType) MarshalText() ([]byte, error) {",
  (string) (len=31) "\treturn []byte(x.String()), nil",
  (string) (len=1) "}",
  (string) "",
  (string) (len=57) "// UnmarshalText implements the text unmarshaller method.",
  (string) (len=55) "func (x *ChangeType) UnmarshalText(text []byte) error {",
  (string) (len=21) "\tname := string(text)",
  (string) (len=34) "\ttmp, err := ParseChangeType(name)",
  (string) (len=16) "\tif err != nil {",
  (string) (len=12) "\t\treturn err",
  (string) (len=2) "\t}",
  (string) (len=9) "\t*x = tmp",
  (string) (len=11) "\treturn nil",
  (string) (len=1) "}",
  (string) "",
  (string) (len=96) "var errChangeTypeNilPtr = errors.New(\"value pointer is nil\") // one per type for package clashes",
  (string) "",
  (string) (len=41) "// Scan implements the Scanner interface.",
  (string) (len=58) "func (x *ChangeType) Scan(value interface{}) (err error) {",
  (string) (len=18) "\tif value == nil {",
  (string) (len=20) "\t\t*x = ChangeType(0)",
  (string) (len=8) "\t\treturn",
  (string) (len=2) "\t}",
  (string) "",
  (string) (len=37) "\t// A wider range of scannable types.",
  (string) (len=61) "\t// driver.Value values at the top of the list for expediency",
  (string) (len=27) "\tswitch v := value.(type) {",
  (string) (len=12) "\tcase int64:",
  (string) (len=20) "\t\t*x = ChangeType(v)",
  (string) (len=13) "\tcase string:",
  (string) (len=30) "\t\t*x, err = ParseChangeType(v)",
  (string) (len=17) "\t\tif err != nil {",
  (string) (len=47) "\t\t\t// try parsing the integer value as a string",
  (string) (len=49) "\t\t\tif val, verr := strconv.Atoi(v); verr == nil {",
  (string) (len=34) "\t\t\t\t*x, err = ChangeType(val), nil",
  (string) (len=4) "\t\t\t}",
  (string) (len=3) "\t\t}",
  (string) (len=13) "\tcase []byte:",
  (string) (len=38) "\t\t*x, err = ParseChangeType(string(v))",
  (string) (len=17) "\t\tif err != nil {",
  (string) (len=47) "\t\t\t// try parsing the integer value as a string",
  (string) (len=57) "\t\t\tif val, verr := strconv.Atoi(string(v)); verr == nil {",
  (string) (len=34) "\t\t\t\t*x, err = ChangeType(val), nil",
  (string) (len=4) "\t\t\t}",
  (string) (len=3) "\t\t}",
  (string) (len=17) "\tcase ChangeType:",
  (string) (len=8) "\t\t*x = v",
  (string) (len=10) "\tcase int:",
  (string) (len=20) "\t\t*x = ChangeType(v)",
  (string) (len=18) "\tcase *ChangeType:",
  (string) (len=15) "\t\tif v == nil {",
  (string) (len=29) "\t\t\treturn errChangeTypeNilPtr",
  (string) (len=3) "\t\t}",
  (string) (len=9) "\t\t*x = *v",
  (string) (len=11) "\tcase uint:",
  (string) (len=20) "\t\t*x = ChangeType(v)",
  (string) (len=13) "\tcase uint64:",
  (string) (len=20) "\t\t*x = ChangeType(v)",
  (string) (len=11) "\tcase *int:",
  (string) (len=15) "\t\tif v == nil {",
  (string) (len=29) "\t\t\treturn errChangeTypeNilPtr",
  (string) (len=3) "\t\t}",
  (string) (len=21) "\t\t*x = ChangeType(*v)",
  (string) (len=13) "\tcase *int64:",
  (string) (len=15) "\t\tif v == nil {",
  (string) (len=29) "\t\t\treturn errChangeTypeNilPtr",
  (string) (len=3) "\t\t}",
  (string) (len=21) "\t\t*x = ChangeType(*v)",
  (string) (len=72) "\tcase float64: // json marshals everything as a float64 if it's a number",
  (string) (len=20) "\t\t*x = ChangeType(v)",
  (string) (len=73) "\tcase *float64: // json marshals everything as a float64 if it's a number",
  (string) (len=15) "\t\tif v == nil {",
  (string) (len=29) "\t\t\treturn errChangeTypeNilPtr",
  (string) (len=3) "\t\t}",
  (string) (len=21) "\t\t*x = ChangeType(*v)",
  (string) (len=12) "\tcase *uint:",
  (string) (len=15) "\t\tif v == nil {",
  (string) (len=29) "\t\t\treturn errChangeTypeNilPtr",
  (string) (len=3) "\t\t}",
  (string) (len=21) "\t\t*x = ChangeType(*v)",
  (string) (len=14) "\tcase *uint64:",
  (string) (len=15) "\t\tif v == nil {",
  (string) (len=29) "\t\t\treturn errChangeTypeNilPtr",
  (string) (len=3) "\t\t}",
  (string) (len=21) "\t\t*x = ChangeType(*v)",
  (string) (len=14) "\tcase *string:",
  (string) (len=15) "\t\tif v == nil {",
  (string) (len=29) "\t\t\treturn errChangeTypeNilPtr",
  (string) (len=3) "\t\t}",
  (string) (len=31) "\t\t*x, err = ParseChangeType(*v)",
  (string) (len=17) "\t\tif err != nil {",
  (string) (len=47) "\t\t\t// try parsing the integer value as a string",
  (string) (len=50) "\t\t\tif val, verr := strconv.Atoi(*v); verr == nil {",
  (string) (len=34) "\t\t\t\t*x, err = ChangeType(val), nil",
  (string) (len=4) "\t\t\t}",
  (string) (len=3) "\t\t}",
  (string) (len=2) "\t}",
  (string) "",
  (string) (len=7) "\treturn",
  (string) (len=1) "}",
  (string) "",
  (string) (len=48) "// Value implements the driver Valuer interface.",
  (string) (len=51) "func (x ChangeType) Value() (driver.Value, error) {",
  (string) (len=23) "\treturn x.String(), nil",
  (string) (len=1) "}",
  (string) "",
  (string) (len=55) "// Set implements the Golang flag.Value interface func.",
  (string) (len=44) "func (x *ChangeType) Set(val string) error {",
  (string) (len=31) "\tv, err := ParseChangeType(val)",
  (string) (len=7) "\t*x = v",
  (string) (len=11) "\treturn err",
  (string) (len=1) "}",
  (string) "",
  (string) (len=56) "// Get implements the Golang flag.Getter interface func.",
  (string) (len=40) "func (x *ChangeType) Get() interface{} {",
  (string) (len=10) "\treturn *x",
  (string) (len=1) "}",
  (string) "",
  (string) (len=62) "// Type implements the github.com/spf13/pFlag Value interface.",
  (string) (len=36) "func (x *ChangeType) Type() string {",
  (string) (len=20) "\treturn \"ChangeType\"",
  (string) (len=1) "}",
  (string) "",
  (string) (len=28) "type NullChangeType struct {",
  (string) (len=22) "\tChangeType ChangeType",
  (string) (len=16) "\tValid      bool",
  (string) (len=16) "\tSet        bool",
  (string) (len=1) "}",
  (string) "",
  (string) (len=60) "func NewNullChangeType(val interface{}) (x NullChangeType) {",
  (string) (len=76) "\tx.Scan(val) // yes, we ignore this error, it will just be an invalid value.",
  (string) (len=7) "\treturn",
  (string) (len=1) "}",
  (string) "",
  (string) (len=41) "// Scan implements the Scanner interface.",
  (string) (len=62) "func (x *NullChangeType) Scan(value interface{}) (err error) {",
  (string) (len=13) "\tx.Set = true",
  (string) (len=18) "\tif value == nil {",
  (string) (len=46) "\t\tx.ChangeType, x.Valid = ChangeType(0), false",
  (string) (len=8) "\t\treturn",
  (string) (len=2) "\t}",
  (string) "",
  (string) (len=31) "\terr = x.ChangeType.Scan(value)",
  (string) (len=23) "\tx.Valid = (err == nil)",
  (string) (len=7) "\treturn",
  (string) (len=1) "}",
  (string) "",
  (string) (len=48) "// Value implements the driver Valuer interface.",
  (string) (len=55) "func (x NullChangeType) Value() (driver.Value, error) {",
  (string) (len=14) "\tif !x.Valid {",
  (string) (len=17) "\t\treturn nil, nil",
  (string) (len=2) "\t}",
  (string) (len=46) "\t// driver.Value accepts int64 for int values.",
  (string) (len=32) "\treturn int64(x.ChangeType), nil",
  (string) (len=1) "}",
  (string) "",
  (string) (len=61) "// MarshalJSON correctly serializes a NullChangeType to JSON.",
  (string) (len=55) "func (n NullChangeType) MarshalJSON() ([]byte, error) {",
  (string) (len=23) "\tconst nullStr = \"null\"",
  (string) (len=13) "\tif n.Valid {",
  (string) (len=35) "\t\treturn json.Marshal(n.ChangeType)",
  (string) (len=2) "\t}",
  (string) (len=28) "\treturn []byte(nullStr), nil",
  (string) (len=1) "}",
  (string) "",
  (string) (len=67) "// UnmarshalJSON correctly deserializes a NullChangeType from JSON.",
  (string) (len=56) "func (n *NullChangeType) UnmarshalJSON(b []byte) error {",
  (string) (len=13) "\tn.Set = true",
  (string) (len=18) "\tvar x interface{}",
  (string) (len=29) "\terr := json.Unmarshal(b, &x)",
  (string) (len=16) "\tif err != nil {",
  (string) (len=12) "\t\treturn err",
  (string) (len=2) "\t}",
  (string) (len=16) "\terr = n.Scan(x)",
  (string) (len=11) "\treturn err",
  (string) (len=1) "}",
  (string) "",
  (string) (len=31) "type NullChangeTypeStr struct {",
  (string) (len=15) "\tNullChangeType",
  (string) (len=1) "}",
  (string) "",
  (string) (len=66) "func NewNullChangeTypeStr(val interface{}) (x NullChangeTypeStr) {",
  (string) (len=76) "\tx.Scan(val) // yes, we ignore this error, it will just be an invalid value.",
  (string) (len=7) "\treturn",
  (string) (len=1) "}",
  (string) "",
  (string) (len=48) "// Value implements the driver Valuer interface.",
  (string) (len=58) "func (x NullChangeTypeStr) Value() (driver.Value, error) {",
  (string) (len=14) "\tif !x.Valid {",
  (string) (len=17) "\t\treturn nil, nil",
  (string) (len=2) "\t}",
  (string) (len=34) "\treturn x.ChangeType.String(), nil",
  (string) (len=1) "}",
  (string) "",
  (string) (len=61) "// MarshalJSON correctly serializes a NullChangeType to JSON.",
  (string) (len=58) "func (n NullChangeTypeStr) MarshalJSON() ([]byte, error) {",
  (string) (len=23) "\tconst nullStr = \"null\"",
  (string) (len=13) "\tif n.Valid {",
  (string) (len=35) "\t\treturn json.Marshal(n.ChangeType)",
  (string) (len=2) "\t}",
  (string) (len=28) "\treturn []byte(nullStr), nil",
  (string) (len=1) "}",
  (string) "",
  (string) (len=67) "// UnmarshalJSON correctly deserializes a NullChangeType from JSON.",
  (string) (len=59) "func (n *NullChangeTypeStr) UnmarshalJSON(b []byte) error {",
  (string) (len=13) "\tn.Set = true",
  (string) (len=18) "\tvar x interface{}",
  (string) (len=29) "\terr := json.Unmarshal(b, &x)",
  (string) (len=16) "\tif err != nil {",
  (string) (len=12) "\t\treturn err",
  (string) (len=2) "\t}",
  (string) (len=16) "\terr = n.Scan(x)",
  (string) (len=11) "\treturn err",
  (string) (len=1) "}",
  (string) ""
}
