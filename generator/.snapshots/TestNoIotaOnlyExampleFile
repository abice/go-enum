([]string) (len=106) {
  (string) (len=41) "// Code generated by go-enum DO NOT EDIT.",
  (string) (len=13) "// Version: -",
  (string) (len=14) "// Revision: -",
  (string) (len=16) "// Build Date: -",
  (string) (len=14) "// Built By: -",
  (string) "",
  (string) (len=17) "package generator",
  (string) "",
  (string) (len=8) "import (",
  (string) (len=9) "\t\"errors\"",
  (string) (len=6) "\t\"fmt\"",
  (string) (len=10) "\t\"strings\"",
  (string) (len=1) ")",
  (string) "",
  (string) (len=7) "const (",
  (string) (len=32) "\t// BuggyA is a Buggy of type A.",
  (string) (len=17) "\tBuggyA Buggy = 0",
  (string) (len=32) "\t// BuggyB is a Buggy of type B.",
  (string) (len=17) "\tBuggyB Buggy = 2",
  (string) (len=32) "\t// BuggyC is a Buggy of type C.",
  (string) (len=17) "\tBuggyC Buggy = 1",
  (string) (len=1) ")",
  (string) "",
  (string) (len=53) "var ErrInvalidBuggy = errors.New(\"not a valid Buggy\")",
  (string) "",
  (string) (len=24) "const _BuggyName = \"ABC\"",
  (string) "",
  (string) (len=33) "var _BuggyMap = map[Buggy]string{",
  (string) (len=25) "\tBuggyA: _BuggyName[0:1],",
  (string) (len=25) "\tBuggyB: _BuggyName[1:2],",
  (string) (len=25) "\tBuggyC: _BuggyName[2:3],",
  (string) (len=1) "}",
  (string) "",
  (string) (len=44) "// String implements the Stringer interface.",
  (string) (len=32) "func (x Buggy) String() string {",
  (string) (len=33) "\tif str, ok := _BuggyMap[x]; ok {",
  (string) (len=12) "\t\treturn str",
  (string) (len=2) "\t}",
  (string) (len=35) "\treturn fmt.Sprintf(\"Buggy(%d)\", x)",
  (string) (len=1) "}",
  (string) "",
  (string) (len=66) "// IsValid provides a quick way to determine if the typed value is",
  (string) (len=40) "// part of the allowed enumerated values",
  (string) (len=31) "func (x Buggy) IsValid() bool {",
  (string) (len=22) "\t_, ok := _BuggyMap[x]",
  (string) (len=10) "\treturn ok",
  (string) (len=1) "}",
  (string) "",
  (string) (len=35) "var _BuggyValue = map[string]Buggy{",
  (string) (len=42) "\t_BuggyName[0:1]:                  BuggyA,",
  (string) (len=42) "\tstrings.ToLower(_BuggyName[0:1]): BuggyA,",
  (string) (len=42) "\t_BuggyName[1:2]:                  BuggyB,",
  (string) (len=42) "\tstrings.ToLower(_BuggyName[1:2]): BuggyB,",
  (string) (len=42) "\t_BuggyName[2:3]:                  BuggyC,",
  (string) (len=42) "\tstrings.ToLower(_BuggyName[2:3]): BuggyC,",
  (string) (len=1) "}",
  (string) "",
  (string) (len=54) "// ParseBuggy attempts to convert a string to a Buggy.",
  (string) (len=45) "func ParseBuggy(name string) (Buggy, error) {",
  (string) (len=36) "\tif x, ok := _BuggyValue[name]; ok {",
  (string) (len=15) "\t\treturn x, nil",
  (string) (len=2) "\t}",
  (string) (len=63) "\treturn Buggy(0), fmt.Errorf(\"%s is %w\", name, ErrInvalidBuggy)",
  (string) (len=1) "}",
  (string) "",
  (string) (len=53) "// MarshalText implements the text marshaller method.",
  (string) (len=46) "func (x Buggy) MarshalText() ([]byte, error) {",
  (string) (len=31) "\treturn []byte(x.String()), nil",
  (string) (len=1) "}",
  (string) "",
  (string) (len=57) "// UnmarshalText implements the text unmarshaller method.",
  (string) (len=50) "func (x *Buggy) UnmarshalText(text []byte) error {",
  (string) (len=21) "\tname := string(text)",
  (string) (len=29) "\ttmp, err := ParseBuggy(name)",
  (string) (len=16) "\tif err != nil {",
  (string) (len=12) "\t\treturn err",
  (string) (len=2) "\t}",
  (string) (len=9) "\t*x = tmp",
  (string) (len=11) "\treturn nil",
  (string) (len=1) "}",
  (string) "",
  (string) (len=74) "// AppendText appends the textual representation of itself to the end of b",
  (string) (len=74) "// (allocating a larger slice if necessary) and returns the updated slice.",
  (string) (len=2) "//",
  (string) (len=77) "// Implementations must not retain b, nor mutate any bytes within b[:len(b)].",
  (string) (len=54) "func (x *Buggy) AppendText(b []byte) ([]byte, error) {",
  (string) (len=37) "\treturn append(b, x.String()...), nil",
  (string) (len=1) "}",
  (string) "",
  (string) (len=55) "// Set implements the Golang flag.Value interface func.",
  (string) (len=39) "func (x *Buggy) Set(val string) error {",
  (string) (len=26) "\tv, err := ParseBuggy(val)",
  (string) (len=7) "\t*x = v",
  (string) (len=11) "\treturn err",
  (string) (len=1) "}",
  (string) "",
  (string) (len=56) "// Get implements the Golang flag.Getter interface func.",
  (string) (len=35) "func (x *Buggy) Get() interface{} {",
  (string) (len=10) "\treturn *x",
  (string) (len=1) "}",
  (string) "",
  (string) (len=62) "// Type implements the github.com/spf13/pFlag Value interface.",
  (string) (len=31) "func (x *Buggy) Type() string {",
  (string) (len=15) "\treturn \"Buggy\"",
  (string) (len=1) "}",
  (string) ""
}
