([]string) (len=574) {
  (string) (len=28) "// Code generated by go-enum",
  (string) (len=15) "// DO NOT EDIT!",
  (string) "",
  (string) (len=17) "package generator",
  (string) "",
  (string) (len=8) "import (",
  (string) (len=6) "\t\"fmt\"",
  (string) (len=10) "\t\"strings\"",
  (string) (len=1) ")",
  (string) "",
  (string) (len=7) "const (",
  (string) (len=31) "\t// Cat is a Animal of type Cat",
  (string) (len=18) "\tCat Animal = iota",
  (string) (len=31) "\t// Dog is a Animal of type Dog",
  (string) (len=4) "\tDog",
  (string) (len=33) "\t// Fish is a Animal of type Fish",
  (string) (len=5) "\tFish",
  (string) (len=1) ")",
  (string) "",
  (string) (len=32) "const _AnimalName = \"CatDogFish\"",
  (string) "",
  (string) (len=35) "var _AnimalMap = map[Animal]string{",
  (string) (len=21) "\t0: _AnimalName[0:3],",
  (string) (len=21) "\t1: _AnimalName[3:6],",
  (string) (len=22) "\t2: _AnimalName[6:10],",
  (string) (len=1) "}",
  (string) "",
  (string) (len=44) "// String implements the Stringer interface.",
  (string) (len=33) "func (x Animal) String() string {",
  (string) (len=34) "\tif str, ok := _AnimalMap[x]; ok {",
  (string) (len=12) "\t\treturn str",
  (string) (len=2) "\t}",
  (string) (len=36) "\treturn fmt.Sprintf(\"Animal(%d)\", x)",
  (string) (len=1) "}",
  (string) "",
  (string) (len=37) "var _AnimalValue = map[string]Animal{",
  (string) (len=39) "\t_AnimalName[0:3]:                   0,",
  (string) (len=39) "\tstrings.ToLower(_AnimalName[0:3]):  0,",
  (string) (len=39) "\t_AnimalName[3:6]:                   1,",
  (string) (len=39) "\tstrings.ToLower(_AnimalName[3:6]):  1,",
  (string) (len=39) "\t_AnimalName[6:10]:                  2,",
  (string) (len=39) "\tstrings.ToLower(_AnimalName[6:10]): 2,",
  (string) (len=1) "}",
  (string) "",
  (string) (len=55) "// ParseAnimal attempts to convert a string to a Animal",
  (string) (len=47) "func ParseAnimal(name string) (Animal, error) {",
  (string) (len=37) "\tif x, ok := _AnimalValue[name]; ok {",
  (string) (len=15) "\t\treturn x, nil",
  (string) (len=2) "\t}",
  (string) (len=63) "\treturn Animal(0), fmt.Errorf(\"%s is not a valid Animal\", name)",
  (string) (len=1) "}",
  (string) "",
  (string) (len=52) "// MarshalText implements the text marshaller method",
  (string) (len=48) "func (x *Animal) MarshalText() ([]byte, error) {",
  (string) (len=31) "\treturn []byte(x.String()), nil",
  (string) (len=1) "}",
  (string) "",
  (string) (len=56) "// UnmarshalText implements the text unmarshaller method",
  (string) (len=51) "func (x *Animal) UnmarshalText(text []byte) error {",
  (string) (len=21) "\tname := string(text)",
  (string) (len=30) "\ttmp, err := ParseAnimal(name)",
  (string) (len=16) "\tif err != nil {",
  (string) (len=12) "\t\treturn err",
  (string) (len=2) "\t}",
  (string) (len=9) "\t*x = tmp",
  (string) (len=11) "\treturn nil",
  (string) (len=1) "}",
  (string) "",
  (string) (len=55) "// Set implements the Golang flag.Value interface func.",
  (string) (len=40) "func (x *Animal) Set(val string) error {",
  (string) (len=27) "\tv, err := ParseAnimal(val)",
  (string) (len=7) "\t*x = v",
  (string) (len=11) "\treturn err",
  (string) (len=1) "}",
  (string) "",
  (string) (len=56) "// Get implements the Golang flag.Getter interface func.",
  (string) (len=36) "func (x *Animal) Get() interface{} {",
  (string) (len=10) "\treturn *x",
  (string) (len=1) "}",
  (string) "",
  (string) (len=62) "// Type implements the github.com/spf13/pFlag Value interface.",
  (string) (len=32) "func (x *Animal) Type() string {",
  (string) (len=16) "\treturn \"Animal\"",
  (string) (len=1) "}",
  (string) "",
  (string) (len=7) "const (",
  (string) (len=44) "\t// Test_lower is a Cases of type Test_lower",
  (string) (len=24) "\tTest_lower Cases = iota",
  (string) (len=48) "\t// Test_capital is a Cases of type Test_capital",
  (string) (len=13) "\tTest_capital",
  (string) (len=66) "\t// AnotherLowerCaseStart is a Cases of type AnotherLowerCaseStart",
  (string) (len=22) "\tAnotherLowerCaseStart",
  (string) (len=1) ")",
  (string) "",
  (string) (len=64) "const _CasesName = \"test_lowerTest_capitalanotherLowerCaseStart\"",
  (string) "",
  (string) (len=33) "var _CasesMap = map[Cases]string{",
  (string) (len=21) "\t0: _CasesName[0:10],",
  (string) (len=22) "\t1: _CasesName[10:22],",
  (string) (len=22) "\t2: _CasesName[22:43],",
  (string) (len=1) "}",
  (string) "",
  (string) (len=44) "// String implements the Stringer interface.",
  (string) (len=32) "func (x Cases) String() string {",
  (string) (len=33) "\tif str, ok := _CasesMap[x]; ok {",
  (string) (len=12) "\t\treturn str",
  (string) (len=2) "\t}",
  (string) (len=35) "\treturn fmt.Sprintf(\"Cases(%d)\", x)",
  (string) (len=1) "}",
  (string) "",
  (string) (len=35) "var _CasesValue = map[string]Cases{",
  (string) (len=39) "\t_CasesName[0:10]:                   0,",
  (string) (len=39) "\tstrings.ToLower(_CasesName[0:10]):  0,",
  (string) (len=39) "\t_CasesName[10:22]:                  1,",
  (string) (len=39) "\tstrings.ToLower(_CasesName[10:22]): 1,",
  (string) (len=39) "\t_CasesName[22:43]:                  2,",
  (string) (len=39) "\tstrings.ToLower(_CasesName[22:43]): 2,",
  (string) (len=1) "}",
  (string) "",
  (string) (len=53) "// ParseCases attempts to convert a string to a Cases",
  (string) (len=45) "func ParseCases(name string) (Cases, error) {",
  (string) (len=36) "\tif x, ok := _CasesValue[name]; ok {",
  (string) (len=15) "\t\treturn x, nil",
  (string) (len=2) "\t}",
  (string) (len=61) "\treturn Cases(0), fmt.Errorf(\"%s is not a valid Cases\", name)",
  (string) (len=1) "}",
  (string) "",
  (string) (len=52) "// MarshalText implements the text marshaller method",
  (string) (len=47) "func (x *Cases) MarshalText() ([]byte, error) {",
  (string) (len=31) "\treturn []byte(x.String()), nil",
  (string) (len=1) "}",
  (string) "",
  (string) (len=56) "// UnmarshalText implements the text unmarshaller method",
  (string) (len=50) "func (x *Cases) UnmarshalText(text []byte) error {",
  (string) (len=21) "\tname := string(text)",
  (string) (len=29) "\ttmp, err := ParseCases(name)",
  (string) (len=16) "\tif err != nil {",
  (string) (len=12) "\t\treturn err",
  (string) (len=2) "\t}",
  (string) (len=9) "\t*x = tmp",
  (string) (len=11) "\treturn nil",
  (string) (len=1) "}",
  (string) "",
  (string) (len=55) "// Set implements the Golang flag.Value interface func.",
  (string) (len=39) "func (x *Cases) Set(val string) error {",
  (string) (len=26) "\tv, err := ParseCases(val)",
  (string) (len=7) "\t*x = v",
  (string) (len=11) "\treturn err",
  (string) (len=1) "}",
  (string) "",
  (string) (len=56) "// Get implements the Golang flag.Getter interface func.",
  (string) (len=35) "func (x *Cases) Get() interface{} {",
  (string) (len=10) "\treturn *x",
  (string) (len=1) "}",
  (string) "",
  (string) (len=62) "// Type implements the github.com/spf13/pFlag Value interface.",
  (string) (len=31) "func (x *Cases) Type() string {",
  (string) (len=15) "\treturn \"Cases\"",
  (string) (len=1) "}",
  (string) "",
  (string) (len=7) "const (",
  (string) (len=34) "\t// Black is a Color of type Black",
  (string) (len=19) "\tBlack Color = iota",
  (string) (len=34) "\t// White is a Color of type White",
  (string) (len=6) "\tWhite",
  (string) (len=30) "\t// Red is a Color of type Red",
  (string) (len=4) "\tRed",
  (string) (len=34) "\t// Green is a Color of type Green",
  (string) (len=6) "\tGreen",
  (string) (len=32) "\t// Blue is a Color of type Blue",
  (string) (len=23) "\tBlue Color = iota + 29",
  (string) (len=32) "\t// Grey is a Color of type Grey",
  (string) (len=5) "\tGrey",
  (string) (len=36) "\t// Yellow is a Color of type Yellow",
  (string) (len=7) "\tYellow",
  (string) (len=1) ")",
  (string) "",
  (string) (len=53) "const _ColorName = \"BlackWhiteRedGreenBluegreyyellow\"",
  (string) "",
  (string) (len=33) "var _ColorMap = map[Color]string{",
  (string) (len=21) "\t0:  _ColorName[0:5],",
  (string) (len=22) "\t1:  _ColorName[5:10],",
  (string) (len=23) "\t2:  _ColorName[10:13],",
  (string) (len=23) "\t3:  _ColorName[13:18],",
  (string) (len=23) "\t33: _ColorName[18:22],",
  (string) (len=23) "\t34: _ColorName[22:26],",
  (string) (len=23) "\t35: _ColorName[26:32],",
  (string) (len=1) "}",
  (string) "",
  (string) (len=44) "// String implements the Stringer interface.",
  (string) (len=32) "func (x Color) String() string {",
  (string) (len=33) "\tif str, ok := _ColorMap[x]; ok {",
  (string) (len=12) "\t\treturn str",
  (string) (len=2) "\t}",
  (string) (len=35) "\treturn fmt.Sprintf(\"Color(%d)\", x)",
  (string) (len=1) "}",
  (string) "",
  (string) (len=35) "var _ColorValue = map[string]Color{",
  (string) (len=39) "\t_ColorName[0:5]:                    0,",
  (string) (len=39) "\tstrings.ToLower(_ColorName[0:5]):   0,",
  (string) (len=39) "\t_ColorName[5:10]:                   1,",
  (string) (len=39) "\tstrings.ToLower(_ColorName[5:10]):  1,",
  (string) (len=39) "\t_ColorName[10:13]:                  2,",
  (string) (len=39) "\tstrings.ToLower(_ColorName[10:13]): 2,",
  (string) (len=39) "\t_ColorName[13:18]:                  3,",
  (string) (len=39) "\tstrings.ToLower(_ColorName[13:18]): 3,",
  (string) (len=40) "\t_ColorName[18:22]:                  33,",
  (string) (len=40) "\tstrings.ToLower(_ColorName[18:22]): 33,",
  (string) (len=40) "\t_ColorName[22:26]:                  34,",
  (string) (len=40) "\tstrings.ToLower(_ColorName[22:26]): 34,",
  (string) (len=40) "\t_ColorName[26:32]:                  35,",
  (string) (len=40) "\tstrings.ToLower(_ColorName[26:32]): 35,",
  (string) (len=1) "}",
  (string) "",
  (string) (len=53) "// ParseColor attempts to convert a string to a Color",
  (string) (len=45) "func ParseColor(name string) (Color, error) {",
  (string) (len=36) "\tif x, ok := _ColorValue[name]; ok {",
  (string) (len=15) "\t\treturn x, nil",
  (string) (len=2) "\t}",
  (string) (len=61) "\treturn Color(0), fmt.Errorf(\"%s is not a valid Color\", name)",
  (string) (len=1) "}",
  (string) "",
  (string) (len=52) "// MarshalText implements the text marshaller method",
  (string) (len=47) "func (x *Color) MarshalText() ([]byte, error) {",
  (string) (len=31) "\treturn []byte(x.String()), nil",
  (string) (len=1) "}",
  (string) "",
  (string) (len=56) "// UnmarshalText implements the text unmarshaller method",
  (string) (len=50) "func (x *Color) UnmarshalText(text []byte) error {",
  (string) (len=21) "\tname := string(text)",
  (string) (len=29) "\ttmp, err := ParseColor(name)",
  (string) (len=16) "\tif err != nil {",
  (string) (len=12) "\t\treturn err",
  (string) (len=2) "\t}",
  (string) (len=9) "\t*x = tmp",
  (string) (len=11) "\treturn nil",
  (string) (len=1) "}",
  (string) "",
  (string) (len=55) "// Set implements the Golang flag.Value interface func.",
  (string) (len=39) "func (x *Color) Set(val string) error {",
  (string) (len=26) "\tv, err := ParseColor(val)",
  (string) (len=7) "\t*x = v",
  (string) (len=11) "\treturn err",
  (string) (len=1) "}",
  (string) "",
  (string) (len=56) "// Get implements the Golang flag.Getter interface func.",
  (string) (len=35) "func (x *Color) Get() interface{} {",
  (string) (len=10) "\treturn *x",
  (string) (len=1) "}",
  (string) "",
  (string) (len=62) "// Type implements the github.com/spf13/pFlag Value interface.",
  (string) (len=31) "func (x *Color) Type() string {",
  (string) (len=15) "\treturn \"Color\"",
  (string) (len=1) "}",
  (string) "",
  (string) (len=7) "const (",
  (string) (len=36) "\t// Toyota is a Model of type Toyota",
  (string) (len=20) "\tToyota Model = iota",
  (string) (len=17) "\t// Skipped value",
  (string) (len=2) "\t_",
  (string) (len=34) "\t// Chevy is a Model of type Chevy",
  (string) (len=6) "\tChevy",
  (string) (len=17) "\t// Skipped value",
  (string) (len=2) "\t_",
  (string) (len=32) "\t// Ford is a Model of type Ford",
  (string) (len=5) "\tFord",
  (string) (len=1) ")",
  (string) "",
  (string) (len=36) "const _ModelName = \"ToyotaChevyFord\"",
  (string) "",
  (string) (len=33) "var _ModelMap = map[Model]string{",
  (string) (len=20) "\t0: _ModelName[0:6],",
  (string) (len=21) "\t2: _ModelName[6:11],",
  (string) (len=22) "\t4: _ModelName[11:15],",
  (string) (len=1) "}",
  (string) "",
  (string) (len=44) "// String implements the Stringer interface.",
  (string) (len=32) "func (x Model) String() string {",
  (string) (len=33) "\tif str, ok := _ModelMap[x]; ok {",
  (string) (len=12) "\t\treturn str",
  (string) (len=2) "\t}",
  (string) (len=35) "\treturn fmt.Sprintf(\"Model(%d)\", x)",
  (string) (len=1) "}",
  (string) "",
  (string) (len=35) "var _ModelValue = map[string]Model{",
  (string) (len=39) "\t_ModelName[0:6]:                    0,",
  (string) (len=39) "\tstrings.ToLower(_ModelName[0:6]):   0,",
  (string) (len=39) "\t_ModelName[6:11]:                   2,",
  (string) (len=39) "\tstrings.ToLower(_ModelName[6:11]):  2,",
  (string) (len=39) "\t_ModelName[11:15]:                  4,",
  (string) (len=39) "\tstrings.ToLower(_ModelName[11:15]): 4,",
  (string) (len=1) "}",
  (string) "",
  (string) (len=53) "// ParseModel attempts to convert a string to a Model",
  (string) (len=45) "func ParseModel(name string) (Model, error) {",
  (string) (len=36) "\tif x, ok := _ModelValue[name]; ok {",
  (string) (len=15) "\t\treturn x, nil",
  (string) (len=2) "\t}",
  (string) (len=61) "\treturn Model(0), fmt.Errorf(\"%s is not a valid Model\", name)",
  (string) (len=1) "}",
  (string) "",
  (string) (len=52) "// MarshalText implements the text marshaller method",
  (string) (len=47) "func (x *Model) MarshalText() ([]byte, error) {",
  (string) (len=31) "\treturn []byte(x.String()), nil",
  (string) (len=1) "}",
  (string) "",
  (string) (len=56) "// UnmarshalText implements the text unmarshaller method",
  (string) (len=50) "func (x *Model) UnmarshalText(text []byte) error {",
  (string) (len=21) "\tname := string(text)",
  (string) (len=29) "\ttmp, err := ParseModel(name)",
  (string) (len=16) "\tif err != nil {",
  (string) (len=12) "\t\treturn err",
  (string) (len=2) "\t}",
  (string) (len=9) "\t*x = tmp",
  (string) (len=11) "\treturn nil",
  (string) (len=1) "}",
  (string) "",
  (string) (len=55) "// Set implements the Golang flag.Value interface func.",
  (string) (len=39) "func (x *Model) Set(val string) error {",
  (string) (len=26) "\tv, err := ParseModel(val)",
  (string) (len=7) "\t*x = v",
  (string) (len=11) "\treturn err",
  (string) (len=1) "}",
  (string) "",
  (string) (len=56) "// Get implements the Golang flag.Getter interface func.",
  (string) (len=35) "func (x *Model) Get() interface{} {",
  (string) (len=10) "\treturn *x",
  (string) (len=1) "}",
  (string) "",
  (string) (len=62) "// Type implements the github.com/spf13/pFlag Value interface.",
  (string) (len=31) "func (x *Model) Type() string {",
  (string) (len=15) "\treturn \"Model\"",
  (string) (len=1) "}",
  (string) "",
  (string) (len=7) "const (",
  (string) (len=50) "\t// TestHyphen is a Sanitizing of type Test-Hyphen",
  (string) (len=29) "\tTestHyphen Sanitizing = iota",
  (string) (len=53) "\t// XHyphenStart is a Sanitizing of type -HyphenStart",
  (string) (len=13) "\tXHyphenStart",
  (string) (len=62) "\t// X_underscoreFirst is a Sanitizing of type _underscoreFirst",
  (string) (len=18) "\tX_underscoreFirst",
  (string) (len=54) "\t// X0numberFirst is a Sanitizing of type 0numberFirst",
  (string) (len=14) "\tX0numberFirst",
  (string) (len=50) "\t// X123456789a is a Sanitizing of type 123456789a",
  (string) (len=12) "\tX123456789a",
  (string) (len=51) "\t// X123123Asdf is a Sanitizing of type 123123-Asdf",
  (string) (len=12) "\tX123123Asdf",
  (string) (len=55) "\t// EndingHyphen is a Sanitizing of type Ending-Hyphen-",
  (string) (len=13) "\tEndingHyphen",
  (string) (len=1) ")",
  (string) "",
  (string) (len=112) "const _SanitizingName = \"test-Hyphen-hyphenStart_underscoreFirst0numberFirst123456789a123123-asdfending-hyphen-\"",
  (string) "",
  (string) (len=43) "var _SanitizingMap = map[Sanitizing]string{",
  (string) (len=26) "\t0: _SanitizingName[0:11],",
  (string) (len=27) "\t1: _SanitizingName[11:23],",
  (string) (len=27) "\t2: _SanitizingName[23:39],",
  (string) (len=27) "\t3: _SanitizingName[39:51],",
  (string) (len=27) "\t4: _SanitizingName[51:61],",
  (string) (len=27) "\t5: _SanitizingName[61:72],",
  (string) (len=27) "\t6: _SanitizingName[72:86],",
  (string) (len=1) "}",
  (string) "",
  (string) (len=44) "// String implements the Stringer interface.",
  (string) (len=37) "func (x Sanitizing) String() string {",
  (string) (len=38) "\tif str, ok := _SanitizingMap[x]; ok {",
  (string) (len=12) "\t\treturn str",
  (string) (len=2) "\t}",
  (string) (len=40) "\treturn fmt.Sprintf(\"Sanitizing(%d)\", x)",
  (string) (len=1) "}",
  (string) "",
  (string) (len=45) "var _SanitizingValue = map[string]Sanitizing{",
  (string) (len=44) "\t_SanitizingName[0:11]:                   0,",
  (string) (len=44) "\tstrings.ToLower(_SanitizingName[0:11]):  0,",
  (string) (len=44) "\t_SanitizingName[11:23]:                  1,",
  (string) (len=44) "\tstrings.ToLower(_SanitizingName[11:23]): 1,",
  (string) (len=44) "\t_SanitizingName[23:39]:                  2,",
  (string) (len=44) "\tstrings.ToLower(_SanitizingName[23:39]): 2,",
  (string) (len=44) "\t_SanitizingName[39:51]:                  3,",
  (string) (len=44) "\tstrings.ToLower(_SanitizingName[39:51]): 3,",
  (string) (len=44) "\t_SanitizingName[51:61]:                  4,",
  (string) (len=44) "\tstrings.ToLower(_SanitizingName[51:61]): 4,",
  (string) (len=44) "\t_SanitizingName[61:72]:                  5,",
  (string) (len=44) "\tstrings.ToLower(_SanitizingName[61:72]): 5,",
  (string) (len=44) "\t_SanitizingName[72:86]:                  6,",
  (string) (len=44) "\tstrings.ToLower(_SanitizingName[72:86]): 6,",
  (string) (len=1) "}",
  (string) "",
  (string) (len=63) "// ParseSanitizing attempts to convert a string to a Sanitizing",
  (string) (len=55) "func ParseSanitizing(name string) (Sanitizing, error) {",
  (string) (len=41) "\tif x, ok := _SanitizingValue[name]; ok {",
  (string) (len=15) "\t\treturn x, nil",
  (string) (len=2) "\t}",
  (string) (len=71) "\treturn Sanitizing(0), fmt.Errorf(\"%s is not a valid Sanitizing\", name)",
  (string) (len=1) "}",
  (string) "",
  (string) (len=52) "// MarshalText implements the text marshaller method",
  (string) (len=52) "func (x *Sanitizing) MarshalText() ([]byte, error) {",
  (string) (len=31) "\treturn []byte(x.String()), nil",
  (string) (len=1) "}",
  (string) "",
  (string) (len=56) "// UnmarshalText implements the text unmarshaller method",
  (string) (len=55) "func (x *Sanitizing) UnmarshalText(text []byte) error {",
  (string) (len=21) "\tname := string(text)",
  (string) (len=34) "\ttmp, err := ParseSanitizing(name)",
  (string) (len=16) "\tif err != nil {",
  (string) (len=12) "\t\treturn err",
  (string) (len=2) "\t}",
  (string) (len=9) "\t*x = tmp",
  (string) (len=11) "\treturn nil",
  (string) (len=1) "}",
  (string) "",
  (string) (len=55) "// Set implements the Golang flag.Value interface func.",
  (string) (len=44) "func (x *Sanitizing) Set(val string) error {",
  (string) (len=31) "\tv, err := ParseSanitizing(val)",
  (string) (len=7) "\t*x = v",
  (string) (len=11) "\treturn err",
  (string) (len=1) "}",
  (string) "",
  (string) (len=56) "// Get implements the Golang flag.Getter interface func.",
  (string) (len=40) "func (x *Sanitizing) Get() interface{} {",
  (string) (len=10) "\treturn *x",
  (string) (len=1) "}",
  (string) "",
  (string) (len=62) "// Type implements the github.com/spf13/pFlag Value interface.",
  (string) (len=36) "func (x *Sanitizing) Type() string {",
  (string) (len=20) "\treturn \"Sanitizing\"",
  (string) (len=1) "}",
  (string) "",
  (string) (len=7) "const (",
  (string) (len=31) "\t// Coke is a Soda of type Coke",
  (string) (len=17) "\tCoke Soda = iota",
  (string) (len=33) "\t// Pepsi is a Soda of type Pepsi",
  (string) (len=6) "\tPepsi",
  (string) (len=35) "\t// MtnDew is a Soda of type MtnDew",
  (string) (len=7) "\tMtnDew",
  (string) (len=1) ")",
  (string) "",
  (string) (len=35) "const _SodaName = \"CokePepsiMtnDew\"",
  (string) "",
  (string) (len=31) "var _SodaMap = map[Soda]string{",
  (string) (len=19) "\t0: _SodaName[0:4],",
  (string) (len=19) "\t1: _SodaName[4:9],",
  (string) (len=20) "\t2: _SodaName[9:15],",
  (string) (len=1) "}",
  (string) "",
  (string) (len=44) "// String implements the Stringer interface.",
  (string) (len=31) "func (x Soda) String() string {",
  (string) (len=32) "\tif str, ok := _SodaMap[x]; ok {",
  (string) (len=12) "\t\treturn str",
  (string) (len=2) "\t}",
  (string) (len=34) "\treturn fmt.Sprintf(\"Soda(%d)\", x)",
  (string) (len=1) "}",
  (string) "",
  (string) (len=33) "var _SodaValue = map[string]Soda{",
  (string) (len=37) "\t_SodaName[0:4]:                   0,",
  (string) (len=37) "\tstrings.ToLower(_SodaName[0:4]):  0,",
  (string) (len=37) "\t_SodaName[4:9]:                   1,",
  (string) (len=37) "\tstrings.ToLower(_SodaName[4:9]):  1,",
  (string) (len=37) "\t_SodaName[9:15]:                  2,",
  (string) (len=37) "\tstrings.ToLower(_SodaName[9:15]): 2,",
  (string) (len=1) "}",
  (string) "",
  (string) (len=51) "// ParseSoda attempts to convert a string to a Soda",
  (string) (len=43) "func ParseSoda(name string) (Soda, error) {",
  (string) (len=35) "\tif x, ok := _SodaValue[name]; ok {",
  (string) (len=15) "\t\treturn x, nil",
  (string) (len=2) "\t}",
  (string) (len=59) "\treturn Soda(0), fmt.Errorf(\"%s is not a valid Soda\", name)",
  (string) (len=1) "}",
  (string) "",
  (string) (len=52) "// MarshalText implements the text marshaller method",
  (string) (len=46) "func (x *Soda) MarshalText() ([]byte, error) {",
  (string) (len=31) "\treturn []byte(x.String()), nil",
  (string) (len=1) "}",
  (string) "",
  (string) (len=56) "// UnmarshalText implements the text unmarshaller method",
  (string) (len=49) "func (x *Soda) UnmarshalText(text []byte) error {",
  (string) (len=21) "\tname := string(text)",
  (string) (len=28) "\ttmp, err := ParseSoda(name)",
  (string) (len=16) "\tif err != nil {",
  (string) (len=12) "\t\treturn err",
  (string) (len=2) "\t}",
  (string) (len=9) "\t*x = tmp",
  (string) (len=11) "\treturn nil",
  (string) (len=1) "}",
  (string) "",
  (string) (len=55) "// Set implements the Golang flag.Value interface func.",
  (string) (len=38) "func (x *Soda) Set(val string) error {",
  (string) (len=25) "\tv, err := ParseSoda(val)",
  (string) (len=7) "\t*x = v",
  (string) (len=11) "\treturn err",
  (string) (len=1) "}",
  (string) "",
  (string) (len=56) "// Get implements the Golang flag.Getter interface func.",
  (string) (len=34) "func (x *Soda) Get() interface{} {",
  (string) (len=10) "\treturn *x",
  (string) (len=1) "}",
  (string) "",
  (string) (len=62) "// Type implements the github.com/spf13/pFlag Value interface.",
  (string) (len=30) "func (x *Soda) Type() string {",
  (string) (len=14) "\treturn \"Soda\"",
  (string) (len=1) "}",
  (string) "",
  (string) (len=7) "const (",
  (string) (len=55) "\t// StartWithNum is a StartNotZero of type StartWithNum",
  (string) (len=38) "\tStartWithNum StartNotZero = iota + 23",
  (string) (len=45) "\t// NextNum is a StartNotZero of type NextNum",
  (string) (len=8) "\tNextNum",
  (string) (len=1) ")",
  (string) "",
  (string) (len=47) "const _StartNotZeroName = \"startWithNumnextNum\"",
  (string) "",
  (string) (len=47) "var _StartNotZeroMap = map[StartNotZero]string{",
  (string) (len=29) "\t23: _StartNotZeroName[0:12],",
  (string) (len=30) "\t24: _StartNotZeroName[12:19],",
  (string) (len=1) "}",
  (string) "",
  (string) (len=44) "// String implements the Stringer interface.",
  (string) (len=39) "func (x StartNotZero) String() string {",
  (string) (len=40) "\tif str, ok := _StartNotZeroMap[x]; ok {",
  (string) (len=12) "\t\treturn str",
  (string) (len=2) "\t}",
  (string) (len=42) "\treturn fmt.Sprintf(\"StartNotZero(%d)\", x)",
  (string) (len=1) "}",
  (string) "",
  (string) (len=49) "var _StartNotZeroValue = map[string]StartNotZero{",
  (string) (len=47) "\t_StartNotZeroName[0:12]:                   23,",
  (string) (len=47) "\tstrings.ToLower(_StartNotZeroName[0:12]):  23,",
  (string) (len=47) "\t_StartNotZeroName[12:19]:                  24,",
  (string) (len=47) "\tstrings.ToLower(_StartNotZeroName[12:19]): 24,",
  (string) (len=1) "}",
  (string) "",
  (string) (len=67) "// ParseStartNotZero attempts to convert a string to a StartNotZero",
  (string) (len=59) "func ParseStartNotZero(name string) (StartNotZero, error) {",
  (string) (len=43) "\tif x, ok := _StartNotZeroValue[name]; ok {",
  (string) (len=15) "\t\treturn x, nil",
  (string) (len=2) "\t}",
  (string) (len=75) "\treturn StartNotZero(0), fmt.Errorf(\"%s is not a valid StartNotZero\", name)",
  (string) (len=1) "}",
  (string) "",
  (string) (len=52) "// MarshalText implements the text marshaller method",
  (string) (len=54) "func (x *StartNotZero) MarshalText() ([]byte, error) {",
  (string) (len=31) "\treturn []byte(x.String()), nil",
  (string) (len=1) "}",
  (string) "",
  (string) (len=56) "// UnmarshalText implements the text unmarshaller method",
  (string) (len=57) "func (x *StartNotZero) UnmarshalText(text []byte) error {",
  (string) (len=21) "\tname := string(text)",
  (string) (len=36) "\ttmp, err := ParseStartNotZero(name)",
  (string) (len=16) "\tif err != nil {",
  (string) (len=12) "\t\treturn err",
  (string) (len=2) "\t}",
  (string) (len=9) "\t*x = tmp",
  (string) (len=11) "\treturn nil",
  (string) (len=1) "}",
  (string) "",
  (string) (len=55) "// Set implements the Golang flag.Value interface func.",
  (string) (len=46) "func (x *StartNotZero) Set(val string) error {",
  (string) (len=33) "\tv, err := ParseStartNotZero(val)",
  (string) (len=7) "\t*x = v",
  (string) (len=11) "\treturn err",
  (string) (len=1) "}",
  (string) "",
  (string) (len=56) "// Get implements the Golang flag.Getter interface func.",
  (string) (len=42) "func (x *StartNotZero) Get() interface{} {",
  (string) (len=10) "\treturn *x",
  (string) (len=1) "}",
  (string) "",
  (string) (len=62) "// Type implements the github.com/spf13/pFlag Value interface.",
  (string) (len=38) "func (x *StartNotZero) Type() string {",
  (string) (len=22) "\treturn \"StartNotZero\"",
  (string) (len=1) "}",
  (string) ""
}
